From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Wed, 24 Jan 2024 15:39:50 +0800
Subject: [PATCH] ARC merged
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Way-Zer:
removed: LabelController,ARCChat,QuickCameraTable,changelogreaded, UpdateDialog, 主页标语(联网), 学术日报, 热更新(无效), 检查更新, arcPlayerEffect(VIP), District(区域规划器)
remove WindowManager.java
还原maxSchematicSize设置，优化ARCUnits
remove NumberFormat(已替代)
PICK 9eaa74b9 优化单位绘图执行逻辑，减少性能开销。同时不开启显示其他队伍状态时不绘制任何单位信息（除了碰撞箱）
  Lucky Clover <jmj18795967847@gmail.com> on 2024/2/29 at 10:09

MinRi2: improve drawText;PausedDialog重排

Cong0707: remove AboutCN_ARC

单位能力显示 优化
way-zer <himc.wicp@gmail.com> on 2024/4/18 at 23:22

remove getThemeColor()
way-zer <himc.wicp@gmail.com> on 2024/4/20 at 22:06

波次信息面板自动失焦;面板挤长ui
7c336939 MinRi2 <2275045670@qq.com> on 2024/4/20 at 22:25

* remove "selectTeam"(功能与工具箱重复)
* 移动QuickTool
* 清理ARCUI
way-zer <himc.wicp@gmail.com> on 2024/4/29

* remove "fontSize"
* remove "USIDDialog"(usid管理器)
* remove "AchievementsDialog"(学术成就)
* clean JoinDialog
* clean Block.drawPurePlaceText and Block.drawText
* 整理ARCBuilds ARCUnits 外部调用
way-zer <himc.wicp@gmail.com> on 2024/5/4

* fix "alwaysShowUnitRTSAi"
* KeyCode.unknown -> unset
* "@sectors.production" bug
* revert MenuFragment "discord and mobile info" button.
* fix about "unitTrans"
* 重制编辑器功能，修复错误的辅助线实现
way-zer <himc.wicp@gmail.com> on 2024/5/11

* clean "arcdrillmode"
* 还原unitHide实现;修复"showMineBeam"实现
* 从ARC同步MusicDialog(API更新)
* 重制炮台子弹范围显示
* arcSetCamera -> control.input.panCamera
way-zer <himc.wicp@gmail.com> on 2024/5/19

remove blockDrop and minimapTools(小地图工具)
way-zer <himc.wicp@gmail.com> on 2024/6/10 at 14:27

* remove arcChatPicture(图片分享) and MusicDialog(松鼠音乐)
* clean about `Format.duration` and `MessageDialog.share`
* clean about `ARCUI.arcInfo`
* split MessageDialog and clean ARCUI
* clean ARCVars
way-zer <himc.wicp@gmail.com> on 2024/6/14

* move package
* clean DrawUtilities
way-zer <himc.wicp@gmail.com> on 2024/6/15

clean PowerInfo, ArcMessageDialog, BlockSelectDialog, ItemImage
way-zer <himc.wicp@gmail.com> on 2024/6/30

remove minimap.forceShowPlayer, minimap.unitDetailsIcon, 左键切换视角(原版已实现右键切视角)
way-zer <himc.wicp@gmail.com> on 2024/7/2

* 修复BE版指挥菜单错乱
* 移除多余小地图按钮
way-zer <himc.wicp@gmail.com> on 2024/7/13

* fix no uiIcon
* remove menuFlyers
way-zer <himc.wicp@gmail.com> on 2024/7/13

* 整理PlayerListFragment
* fix #CN-ARC/Mindustry-CN-ARC:85
way-zer <himc.wicp@gmail.com> on 2024/7/28

* 清理Input相关，移除autoAim(无意义)
* 分离创世神和解禁相关
* 整理美化 PlacementFragment
* 更改开雾功能实现
way-zer <himc.wicp@gmail.com> on 2024/9/8
---
 core/src/mindustry/ai/BlockIndexer.java       | 116 ++++++
 core/src/mindustry/core/Renderer.java         |   1 +
 core/src/mindustry/core/UI.java               |   3 +
 core/src/mindustry/editor/MapInfoDialog.java  | 139 ++++++-
 .../mindustry/entities/comp/BuildingComp.java |  18 +-
 .../mindustry/entities/comp/PlayerComp.java   |  22 +-
 .../mindustry/entities/comp/ShieldComp.java   |   6 +
 .../mindustry/entities/comp/StatusComp.java   |  12 +
 core/src/mindustry/game/Schematic.java        | 158 ++++++++
 core/src/mindustry/game/Universe.java         |   2 +-
 .../src/mindustry/graphics/BlockRenderer.java |  17 +-
 core/src/mindustry/graphics/Drawf.java        |  54 +++
 .../mindustry/graphics/OverlayRenderer.java   |  84 +++-
 core/src/mindustry/input/Binding.java         |   6 +
 core/src/mindustry/input/DesktopInput.java    |  85 ++++-
 core/src/mindustry/input/InputHandler.java    |  55 ++-
 core/src/mindustry/input/MobileInput.java     |  16 +-
 core/src/mindustry/type/UnitType.java         | 162 ++++++--
 core/src/mindustry/type/Weapon.java           |  25 +-
 core/src/mindustry/ui/Fonts.java              |   2 +-
 .../ui/dialogs/ContentInfoDialog.java         |  27 +-
 .../ui/dialogs/CustomRulesDialog.java         | 118 +++++-
 .../mindustry/ui/dialogs/DatabaseDialog.java  |   5 +-
 .../mindustry/ui/dialogs/PausedDialog.java    |  12 +-
 .../mindustry/ui/dialogs/PlanetDialog.java    |  70 +++-
 .../ui/dialogs/SchematicsDialog.java          | 361 +++++++++++++++++-
 .../mindustry/ui/fragments/ChatFragment.java  |  25 +-
 .../ui/fragments/ConsoleFragment.java         |   3 +
 .../mindustry/ui/fragments/HudFragment.java   | 229 ++++++++++-
 .../mindustry/ui/fragments/MenuFragment.java  |  59 ++-
 .../ui/fragments/PlacementFragment.java       | 166 ++++++--
 .../ui/fragments/PlayerListFragment.java      |  93 +++--
 core/src/mindustry/world/Block.java           |  16 +-
 .../world/blocks/ConstructBlock.java          |  42 +-
 .../world/blocks/defense/ForceProjector.java  |   2 +
 .../world/blocks/defense/MendProjector.java   |   5 +-
 .../blocks/defense/OverdriveProjector.java    |   6 +-
 .../blocks/defense/turrets/BaseTurret.java    |   5 +-
 .../world/blocks/defense/turrets/Turret.java  |  12 +
 .../world/blocks/production/Drill.java        |  23 +-
 .../blocks/production/GenericCrafter.java     |  29 ++
 .../world/blocks/storage/CoreBlock.java       |   9 +
 42 files changed, 2072 insertions(+), 228 deletions(-)

diff --git a/core/src/mindustry/ai/BlockIndexer.java b/core/src/mindustry/ai/BlockIndexer.java
index 7f944a3eb06180f9e2b760bbd5aa41709ddf6611..4972f424edd41b8a29d926a09bc55987066d33aa 100644
--- a/core/src/mindustry/ai/BlockIndexer.java
+++ b/core/src/mindustry/ai/BlockIndexer.java
@@ -42,6 +42,14 @@ public class BlockIndexer{
     /** Array used for returning and reusing. */
     private Seq<Building> breturnArray = new Seq<>(Building.class);
 
+    /** Stores all wallore quadrants on the map. Maps ID to qX to qY to a list of tiles with that ore. */
+    private IntSeq[][][] oresWall;
+    /** All wallores available on this map. */
+    private final ObjectIntMap<Item> allOresWall = new ObjectIntMap<>();
+
+    public Integer[] floorOresCount = new Integer[content.blocks().size +1];
+    public Integer[] wallOresCount = new Integer[content.blocks().size +1];
+
     public BlockIndexer(){
         clearFlags();
 
@@ -61,7 +69,15 @@ public class BlockIndexer{
             clearFlags();
 
             allOres.clear();
+            allOresWall.clear();
+            floorOresCount = new Integer[content.blocks().size +1];
+            wallOresCount = new Integer[content.blocks().size +1];
+            for (int ls=0;ls<content.blocks().size;ls++){
+                floorOresCount[ls] = 0;
+                wallOresCount[ls] = 0;
+            }
             ores = new IntSeq[content.items().size][][];
+            oresWall = new IntSeq[content.items().size][][];
             quadWidth = Mathf.ceil(world.width() / (float)quadrantSize);
             quadHeight = Mathf.ceil(world.height() / (float)quadrantSize);
             blocksPresent = new boolean[content.blocks().size];
@@ -94,8 +110,36 @@ public class BlockIndexer{
                         }
                         ores[drop.id][qx][qy].add(tile.pos());
                         allOres.increment(drop);
+                        if(tile.overlay().itemDrop!=null) floorOresCount[tile.overlay().id] +=1;
+                        else if(tile.floor().itemDrop!=null) floorOresCount[tile.floor().id] +=1;
+                    }else{
+                        if(oresWall[drop.id] == null){
+                            oresWall[drop.id] = new IntSeq[quadWidth][quadHeight];
+                        }
+                        if(oresWall[drop.id][qx][qy] == null){
+                            oresWall[drop.id][qx][qy] = new IntSeq(false, 16);
+                        }
+                        oresWall[drop.id][qx][qy].add(tile.pos());
+                        allOresWall.increment(drop);
+                        if(tile.overlay().itemDrop!=null) wallOresCount[tile.overlay().id] +=1;
                     }
                 }
+                if(tile.block()!=null && tile.block().itemDrop!=null){
+                    int qx = (tile.x / quadrantSize);
+                    int qy = (tile.y / quadrantSize);
+                    if(oresWall[tile.block().itemDrop.id] == null){
+                        oresWall[tile.block().itemDrop.id] = new IntSeq[quadWidth][quadHeight];
+                    }
+                    if(oresWall[tile.block().itemDrop.id][qx][qy] == null){
+                        oresWall[tile.block().itemDrop.id][qx][qy] = new IntSeq(false, 16);
+                    }
+                    oresWall[tile.block().itemDrop.id][qx][qy].add(tile.pos());
+                    allOresWall.increment(tile.block().itemDrop);
+                    wallOresCount[tile.block().id] +=1;
+                }
+                if(tile.block()!=null && tile.floor().liquidDrop!=null){
+                    floorOresCount[tile.floor().id] +=1;
+                }
             }
         });
     }
@@ -168,6 +212,50 @@ public class BlockIndexer{
                 seq.removeValue(pos);
                 allOres.increment(drop, -1);
             }
+
+
+            ///wallore
+            if(oresWall[drop.id] == null){
+                oresWall[drop.id] = new IntSeq[quadWidth][quadHeight];
+            }
+            if(oresWall[drop.id][qx][qy] == null){
+                oresWall[drop.id][qx][qy] = new IntSeq(false, 16);
+            }
+
+            pos = tile.pos();
+            seq = oresWall[drop.id][qx][qy];
+            //when the drop can be mined, record the ore position
+            if(tile.block() != Blocks.air && !seq.contains(pos)){
+                seq.add(pos);
+                allOresWall.increment(drop);
+            }else{
+                //otherwise, it likely became blocked, remove it (even if it wasn't there)
+                seq.removeValue(pos);
+                allOresWall.increment(drop, -1);
+            }
+        }
+        else if(tile.block()!=null && tile.block().itemDrop!=null){
+            int qx = tile.x / quadrantSize;
+            int qy = tile.y / quadrantSize;
+            ///wallore
+            if(oresWall[tile.block().itemDrop.id] == null){
+                oresWall[tile.block().itemDrop.id] = new IntSeq[quadWidth][quadHeight];
+            }
+            if(oresWall[tile.block().itemDrop.id][qx][qy] == null){
+                oresWall[tile.block().itemDrop.id][qx][qy] = new IntSeq(false, 16);
+            }
+
+            int pos = tile.pos();
+            var seq = oresWall[tile.block().itemDrop.id][qx][qy];
+            //when the drop can be mined, record the ore position
+            if(!seq.contains(pos)){
+                seq.add(pos);
+                allOresWall.increment(tile.block().itemDrop);
+            }else{
+                //otherwise, it likely became blocked, remove it (even if it wasn't there)
+                seq.removeValue(pos);
+                allOresWall.increment(tile.block().itemDrop, -1);
+            }
         }
 
     }
@@ -194,6 +282,10 @@ public class BlockIndexer{
         return allOres.get(item) > 0;
     }
 
+    public boolean hasOreWall(Item item){
+        return allOresWall.get(item) > 0;
+    }
+
     /** Returns all damaged tiles by team. */
     public Seq<Building> getDamaged(Team team){
         if(damagedTiles[team.id] == null){
@@ -437,6 +529,30 @@ public class BlockIndexer{
         return findClosestOre(unit.x, unit.y, item);
     }
 
+    public Tile findClosestWallOre(float xp, float yp, Item item){
+        if(oresWall[item.id] != null){
+            float minDst = 0f;
+            Tile closest = null;
+            for(int qx = 0; qx < quadWidth; qx++){
+                for(int qy = 0; qy < quadHeight; qy++){
+                    var arr = oresWall[item.id][qx][qy];
+                    if(arr != null && arr.size > 0){
+                        Tile tile = world.tile(arr.first());
+                        if(tile.block() != Blocks.air){
+                            float dst = Mathf.dst2(xp, yp, tile.worldx(), tile.worldy());
+                            if(closest == null || dst < minDst){
+                                closest = tile;
+                                minDst = dst;
+                            }
+                        }
+                    }
+                }
+            }
+            return closest;
+        }
+
+        return null;
+    }
     private void process(Tile tile){
         var team = tile.team();
         //only process entity changes with centered tiles
diff --git a/core/src/mindustry/core/Renderer.java b/core/src/mindustry/core/Renderer.java
index d21aa28efe895c7d76dfd903a9942a03f5a012b9..14a4b72a0881327ce3a9bb65d0cc24b8cd0b804d 100644
--- a/core/src/mindustry/core/Renderer.java
+++ b/core/src/mindustry/core/Renderer.java
@@ -28,6 +28,7 @@ import static arc.Core.*;
 import static mindustry.Vars.*;
 
 public class Renderer implements ApplicationListener{
+    public boolean fogEnabled = true;
     /** These are global variables, for headless access. Cached. */
     public static float laserOpacity = 0.5f, bridgeOpacity = 0.75f;
 
diff --git a/core/src/mindustry/core/UI.java b/core/src/mindustry/core/UI.java
index ba021c6f6e788c869e2f1c6678a0b95e3f73a744..1de9f9267961db96ceb6f405f12508f44e9106cb 100644
--- a/core/src/mindustry/core/UI.java
+++ b/core/src/mindustry/core/UI.java
@@ -28,6 +28,7 @@ import mindustry.logic.*;
 import mindustry.ui.*;
 import mindustry.ui.dialogs.*;
 import mindustry.ui.fragments.*;
+import mindustryX.features.ui.*;
 
 import static arc.scene.actions.Actions.*;
 import static mindustry.Vars.*;
@@ -368,6 +369,7 @@ public class UI implements ApplicationListener, Loadable{
 
     /** Shows a fading label at the top of the screen. */
     public void showInfoToast(String info, float duration){
+        if (!info.contains("建筑过多单位") && !info.contains("可能造成服务器卡顿"))  ui.chatfrag.addMessage("[acid][公屏][white]"+info);
         var cinfo = Core.scene.find("coreinfo");
         Table table = new Table();
         table.touchable = Touchable.disabled;
@@ -384,6 +386,7 @@ public class UI implements ApplicationListener, Loadable{
 
     /** Shows a label at some position on the screen. Does not fade. */
     public void showInfoPopup(String info, float duration, int align, int top, int left, int bottom, int right){
+        if (!Core.settings.getBool("ShowInfoPopup")) return;
         Table table = new Table();
         table.setFillParent(true);
         table.touchable = Touchable.disabled;
diff --git a/core/src/mindustry/editor/MapInfoDialog.java b/core/src/mindustry/editor/MapInfoDialog.java
index ebc1f0b300d295e45333f1db38ea299c9658ec20..03e44e99a11362a2c3df1b05a63f2d1e9c8f743b 100644
--- a/core/src/mindustry/editor/MapInfoDialog.java
+++ b/core/src/mindustry/editor/MapInfoDialog.java
@@ -1,5 +1,6 @@
 package mindustry.editor;
 
+import arc.Core;
 import arc.scene.ui.*;
 import arc.struct.*;
 import mindustry.*;
@@ -10,11 +11,12 @@ import mindustry.maps.filters.*;
 import mindustry.type.*;
 import mindustry.ui.*;
 import mindustry.ui.dialogs.*;
+import mindustryX.features.ui.*;
 
 import static mindustry.Vars.*;
 
 public class MapInfoDialog extends BaseDialog{
-    private WaveInfoDialog waveInfo  = new WaveInfoDialog();
+    private ArcWaveInfoDialog waveInfo  = new ArcWaveInfoDialog();
     private MapGenerateDialog generate = new MapGenerateDialog(false);
     private CustomRulesDialog ruleInfo = new CustomRulesDialog();
     private MapObjectivesDialog objectives = new MapObjectivesDialog();
@@ -33,12 +35,12 @@ public class MapInfoDialog extends BaseDialog{
         cont.clear();
 
         ObjectMap<String, String> tags = editor.tags;
-        
+
         cont.pane(t -> {
             t.add("@editor.mapname").padRight(8).left();
             t.defaults().padTop(15);
 
-            TextField name = t.field(tags.get("name", ""), text -> {
+            TextField name = t.field(state.isPlaying() ? state.map.name() : tags.get("name", ""), text -> {
                 tags.put("name", text);
             }).size(400, 55f).maxTextLength(50).get();
             name.setMessageText("@unknown");
@@ -46,14 +48,76 @@ public class MapInfoDialog extends BaseDialog{
             t.row();
             t.add("@editor.description").padRight(8).left();
 
-            TextArea description = t.area(tags.get("description", ""), Styles.areaField, text -> {
+            TextArea description = t.area(state.isPlaying() ? state.map.description() : tags.get("description", ""), Styles.areaField, text -> {
                 tags.put("description", text);
             }).size(400f, 140f).maxTextLength(1000).get();
 
+            t.row();
+            t.add("[acid]地图模式标签").padRight(8).left();
+
+            TextField modeName = t.field(state.isPlaying() ? state.rules.modeName : tags.get("modeName", ""), Styles.areaField, text -> {
+                tags.put("modeName", text);
+            }).size(400f, 55f).maxTextLength(1000).get();
+
+            t.row();
+            t.add("[cyan]服务器特殊标签").padRight(8).left();
+            t.button("编辑...", () -> {
+                BaseDialog dialog = new BaseDialog("地图标签");
+
+                dialog.cont.pane(td -> {
+                    td.add("[cyan]微泽系服务器标签编辑器 \n[white]BY [violet]Lucky Clover"
+                            + "\n\n[white]用于国内新版微泽系插件标签。"
+                            + "\n[orange]如果您发现标签无效，可能是您所在的服务器插件版本过低。请联系服主更新插件"
+                            + "\n所有标签与主服同步"
+                            + "\n\n[red]需要退出地图界面后重新打开才会更新"
+                            + "\n\n[white]如果有bug欢迎提出"
+                    );
+                    td.row();
+                    td.row();
+
+                    td.add("PVP保护时间(s)").left();
+                    td.field(arcReadStringLabel("@pvpProtect"), pama -> {
+                        arcAddStringLabel(pama, "@pvpProtect");
+                    }).maxTextLength(5).left();
+                    td.row();
+                    td.add("禁用队伍(如1,2,3...)").left();
+                    td.field(arcReadStringLabel("@banTeam"), pama -> {
+                        arcAddStringLabel(pama, "@banTeam");
+                    }).maxTextLength(5).left();
+                    td.row();
+                    td.add("插件选择").left();
+                    td.field(arcReadStringLabel("@mapScript"), pama -> {
+                        arcAddStringLabel(pama, "@mapScript");
+                    }).maxTextLength(6).left();
+                    td.row();
+                    td.check("空域管制 [acid]敌方核心保护区内禁止空军", arcreadBoolLable("[@limitAir]"), islimit -> {
+                        arcAddBoolLable(islimit, "[@limitAir]");
+                    }).left();
+                    td.row();
+                    td.check("塔防模式 [acid]怪物仅会在出生点地板移动，不会攻击", arcreadBoolLable("[@towerDefend]"), islimit -> {
+                        arcAddBoolLable(islimit, "[@towerDefend]");
+                    }).left();
+                    td.row();
+                    td.check("敌人掉落 [acid]非塔防模式下，打怪掉落资源", arcreadBoolLable("[@TDDrop]"), islimit -> {
+                        arcAddBoolLable(islimit, "[@TDDrop]");
+                    }).left();
+                    td.row();
+                    td.check("水漫金山 [acid]蓝队核心会释放洪水淹没你的核心", arcreadBoolLable("[@floodV2]"), islimit -> {
+                        arcAddBoolLable(islimit, "[@flood]");
+                    }).left();
+                }).left();
+                dialog.row();
+                dialog.addCloseButton();
+                dialog.margin(16f);
+
+                dialog.show();
+            }).left().width(200f);
+
+
             t.row();
             t.add("@editor.author").padRight(8).left();
 
-            TextField author = t.field(tags.get("author", ""), text -> {
+            TextField author = t.field(state.isPlaying() ? state.map.author() : tags.get("author", ""), text -> {
                 tags.put("author", text);
             }).size(400, 55f).maxTextLength(50).get();
             author.setMessageText("@unknown");
@@ -117,9 +181,74 @@ public class MapInfoDialog extends BaseDialog{
 
             name.change();
             description.change();
+            modeName.change();
             author.change();
 
             t.margin(16f);
         });
+
+    }
+
+    private String arcReadStringLabel(String labelName) {
+        ObjectMap<String, String> tags = editor.tags;
+        String des = tags.get("description", "");
+        try {
+            int strLength = des.length();
+            int stopindex = 0;
+            for (int i = 0; i < strLength; i++) {
+                if (des.substring(i, i + 2 + labelName.length()).equals("[" + labelName + "=")) {
+                    stopindex = i;
+                    break;
+                }
+            }
+            for (int i = stopindex; i < strLength; i++) {
+                if (des.charAt(i) == ']') {
+                    return des.substring(stopindex + 2 + labelName.length(), i);
+                }
+            }
+        } catch (Exception e) {
+        }
+        return "<未设定参数>";
+    }
+
+    private void arcAddStringLabel(String parameter, String labelName) {
+        ObjectMap<String, String> tags = editor.tags;
+        String des = tags.get("description", "");
+        if (des.contains(labelName)) {
+            try {
+                int strLength = des.length();
+                int stopindex = 0;
+                for (int i = 0; i < strLength; i++) {
+                    if (des.substring(i, i + 2 + labelName.length()).equals("[" + labelName + "=")) {
+                        stopindex = i;
+                        break;
+                    }
+                }
+                for (int i = stopindex; i < strLength; i++) {
+                    if (des.charAt(i) == ']') {
+                        des = des.substring(0, stopindex + 2 + labelName.length()) + parameter + des.substring(i, strLength + 1);
+                        tags.put("description", des);
+                        break;
+                    }
+                }
+            } catch (Exception e) {
+            }
+        } else {
+            tags.put("description", des.concat("[" + labelName + "=" + parameter + "]"));
+        }
+    }
+
+    private boolean arcreadBoolLable(String labelname) {
+        return editor.tags.get("description", "").contains(labelname);
+    }
+
+    private void arcAddBoolLable(Boolean isadd, String labelname) {
+        ObjectMap<String, String> tags = editor.tags;
+        String des = tags.get("description", "");
+        if(des.contains(labelname) && !isadd){
+            tags.put("description", des.replace(labelname, ""));
+        }else if(!des.contains(labelname) && isadd){
+            tags.put("description", des + labelname);
+        }
     }
 }
diff --git a/core/src/mindustry/entities/comp/BuildingComp.java b/core/src/mindustry/entities/comp/BuildingComp.java
index 92d3c35100dd2833ec9bd1b94f9c14e05f041dda..9b999e9cf6a02711e6b25e55764b18a04fefacbb 100644
--- a/core/src/mindustry/entities/comp/BuildingComp.java
+++ b/core/src/mindustry/entities/comp/BuildingComp.java
@@ -41,6 +41,7 @@ import mindustry.world.blocks.power.*;
 import mindustry.world.consumers.*;
 import mindustry.world.meta.*;
 import mindustry.world.modules.*;
+import mindustryX.features.*;
 
 import java.util.*;
 
@@ -77,6 +78,7 @@ abstract class BuildingComp implements Posc, Teamc, Healthc, Buildingc, Timerc,
 
     transient boolean enabled = true;
     transient @Nullable Building lastDisabler;
+    transient @Nullable Building lastLogicController;
 
     @Nullable PowerModule power;
     @Nullable ItemModule items;
@@ -1425,7 +1427,8 @@ abstract class BuildingComp implements Posc, Teamc, Healthc, Buildingc, Timerc,
         //derelict team icon currently doesn't display
         return team == Team.derelict ?
             block.localizedName + "\n" + Core.bundle.get("block.derelict") :
-            block.localizedName + (team == player.team() || team.emoji.isEmpty() ? "" : " " + team.emoji);
+                "[#" + team.color + "]" + (Core.settings.getBool("colorizedContent") && block.localizedName.length() > 11 ? block.localizedName.substring(11) : block.localizedName) + (team == player.team() || team.emoji.isEmpty() ? "" : " " + team.emoji
+                + (team.id > 5 ? "[" + team.id + "]" : ""));
     }
 
     public TextureRegion getDisplayIcon(){
@@ -1449,7 +1452,7 @@ abstract class BuildingComp implements Posc, Teamc, Healthc, Buildingc, Timerc,
         table.row();
 
         //only display everything else if the team is the same
-        if(team == player.team()){
+        if(team == player.team() || RenderExt.showOtherInfo){
             table.table(bars -> {
                 bars.defaults().growX().height(18f).pad(4);
 
@@ -1550,6 +1553,15 @@ abstract class BuildingComp implements Posc, Teamc, Healthc, Buildingc, Timerc,
             table.add(result).growX();
             table.row();
         }
+        if (lastLogicController != null) {
+            table.add(lastLogicController.block.emoji() + " [lightgray](" + lastLogicController.tileX() + ", " + lastLogicController.tileY() + ")").growX().left().row();
+        }
+        if (Time.time < healSuppressionTime){
+            table.add("\uF89B[red]\uE815").update(label -> {
+                if (healSuppressionTime > 0) label.setText("\uF89B[red]\uE815 [white]~ " + UI.formatTime(healSuppressionTime - Time.time));
+                else label.visible = false;
+            }).row();
+        }
     }
 
      /** Called when this block is tapped to build a UI on the table.
@@ -1565,7 +1577,7 @@ abstract class BuildingComp implements Posc, Teamc, Healthc, Buildingc, Timerc,
 
     /** Returns whether a hand cursor should be shown over this block. */
     public Cursor getCursor(){
-        return block.configurable && interactable(player.team()) ? SystemCursor.hand : SystemCursor.arrow;
+        return block.configurable && (RenderExt.showOtherInfo || interactable(player.team())) ? SystemCursor.hand : SystemCursor.arrow;
     }
 
     /**
diff --git a/core/src/mindustry/entities/comp/PlayerComp.java b/core/src/mindustry/entities/comp/PlayerComp.java
index 6646df00e2c060899ec80ea5bde1e1fa444654a9..19c6566a3b96ef3c286a8ef78eb35f73abfb32dc 100644
--- a/core/src/mindustry/entities/comp/PlayerComp.java
+++ b/core/src/mindustry/entities/comp/PlayerComp.java
@@ -21,6 +21,8 @@ import mindustry.net.Administration.*;
 import mindustry.net.*;
 import mindustry.net.Packets.*;
 import mindustry.ui.*;
+import mindustry.world.blocks.defense.turrets.BaseTurret;
+import mindustry.world.blocks.production.GenericCrafter;
 import mindustry.world.blocks.storage.*;
 import mindustry.world.blocks.storage.CoreBlock.*;
 import mindustryX.events.*;
@@ -298,7 +300,7 @@ abstract class PlayerComp implements UnitController, Entityc, Syncc, Timerc, Dra
         font.getData().setScale(0.25f / Scl.scl(1f));
         layout.setText(font, name);
 
-        if(!isLocal()){
+        if(!isLocal() || Core.settings.getBool("arcSelfName")){
             Draw.color(0f, 0f, 0f, 0.3f);
             Fill.rect(unit.x, unit.y + nameHeight - layout.height / 2, layout.width + 2, layout.height + 3);
             Draw.color();
@@ -363,6 +365,24 @@ abstract class PlayerComp implements UnitController, Entityc, Syncc, Timerc, Dra
         }
     }
 
+    public void buildDestroyedBlocks(){
+        if(!unit.canBuild()) return;
+        int count = 0;
+        for(Teams.BlockPlan plan : player.team().data().plans){
+            if(within(plan.x * tilesize, plan.y * tilesize, buildingRange)){
+                unit.addBuild(new BuildPlan(plan.x, plan.y, plan.rotation, content.block(plan.block), plan.config));
+                if(++count >= 255) break;
+            }
+        }
+    }
+
+    public void dropItems(){
+        if(state.rules.mode() == Gamemode.pvp || player.unit() == null || player.unit().stack.amount <= 0) return;
+        indexer.eachBlock(player.team(), player.x, player.y, itemTransferRange,
+        build -> build.acceptStack(player.unit().item(), player.unit().stack.amount, player.unit()) > 0 && (
+        build.block instanceof BaseTurret || build.block instanceof GenericCrafter),
+        build -> Call.transferInventory(player, build));
+    }
     void sendUnformatted(String unformatted){
         sendUnformatted(null, unformatted);
     }
diff --git a/core/src/mindustry/entities/comp/ShieldComp.java b/core/src/mindustry/entities/comp/ShieldComp.java
index c290fa6251edaaa4d2854fc6f06be8cdb6050dda..132785b228124519812c049ef93fd2e5adaeb641 100644
--- a/core/src/mindustry/entities/comp/ShieldComp.java
+++ b/core/src/mindustry/entities/comp/ShieldComp.java
@@ -1,5 +1,6 @@
 package mindustry.entities.comp;
 
+import arc.math.WindowedMean;
 import arc.util.*;
 import mindustry.*;
 import mindustry.annotations.Annotations.*;
@@ -22,6 +23,8 @@ abstract class ShieldComp implements Healthc, Posc{
     transient float armor;
     /** Shield opacity. */
     transient float shieldAlpha = 0f;
+    transient float lastHealth = 0f, lastShield = 0f;
+    transient WindowedMean healthBalance = new WindowedMean(120);
 
     @Replace
     @Override
@@ -70,5 +73,8 @@ abstract class ShieldComp implements Healthc, Posc{
     public void update(){
         shieldAlpha -= Time.delta / 15f;
         if(shieldAlpha < 0) shieldAlpha = 0f;
+        healthBalance.add(((health - lastHealth) + (shield - lastShield)) / Time.delta);
+        lastHealth = health;
+        lastShield = shield;
     }
 }
diff --git a/core/src/mindustry/entities/comp/StatusComp.java b/core/src/mindustry/entities/comp/StatusComp.java
index 4d3dd11dd07972d4c6dcada51ece6382586fb986..6ca8767b9e4c96cc3223f398360a3d85d955c132 100644
--- a/core/src/mindustry/entities/comp/StatusComp.java
+++ b/core/src/mindustry/entities/comp/StatusComp.java
@@ -240,4 +240,16 @@ abstract class StatusComp implements Posc, Flyingc{
     boolean hasEffect(StatusEffect effect){
         return applied.get(effect.id);
     }
+    void addEntry(StatusEffect effect, float duration) {
+        if (effect.reactive) apply(effect);
+        else {
+            StatusEntry entry = Pools.obtain(StatusEntry.class, StatusEntry::new);
+            entry.set(effect, duration);
+            statuses.add(entry);
+            effect.applied(self(), duration, false);
+        }
+    }
+    Seq<StatusEntry> statuses(){
+        return statuses;
+    }
 }
diff --git a/core/src/mindustry/game/Schematic.java b/core/src/mindustry/game/Schematic.java
index dde5886f6020aa1c372ac3346e81aab0c7fdedf7..4b5c81d32cda84f44ea177cf176f13484c0c7eea 100644
--- a/core/src/mindustry/game/Schematic.java
+++ b/core/src/mindustry/game/Schematic.java
@@ -8,7 +8,15 @@ import mindustry.mod.Mods.*;
 import mindustry.type.*;
 import mindustry.world.*;
 import mindustry.world.blocks.power.*;
+import mindustry.world.blocks.production.Fracker;
+import mindustry.world.blocks.production.GenericCrafter;
+import mindustry.world.blocks.production.Separator;
 import mindustry.world.blocks.storage.*;
+import mindustry.world.consumers.ConsumeItems;
+import mindustry.world.consumers.ConsumeLiquid;
+import mindustry.world.consumers.ConsumeLiquids;
+
+import java.util.concurrent.atomic.AtomicBoolean;
 
 import static mindustry.Vars.*;
 
@@ -23,6 +31,9 @@ public class Schematic implements Publishable, Comparable<Schematic>{
     /** Associated mod. If null, no mod is associated with this schematic. */
     public @Nullable LoadedMod mod;
 
+    public ObjectFloatMap<Item> items;
+    public ObjectFloatMap<Liquid> liquids;
+
     public Schematic(Seq<Stile> tiles, StringMap tags, int width, int height){
         this.tiles = tiles;
         this.tags = tags;
@@ -30,6 +41,10 @@ public class Schematic implements Publishable, Comparable<Schematic>{
         this.height = height;
     }
 
+    public boolean containsBlock(Block block){
+        return tiles.find(tile -> tile.block == block) != null;
+    }
+
     public float powerProduction(){
         return tiles.sumf(s -> s.block instanceof PowerGenerator p ? p.getDisplayedPowerProduction() : 0f);
     }
@@ -38,6 +53,143 @@ public class Schematic implements Publishable, Comparable<Schematic>{
         return tiles.sumf(s -> s.block.consPower != null ? s.block.consPower.usage : 0f);
     }
 
+    public void calProduction() {
+        items = new ObjectFloatMap<>(content.items().copy().size << 1);
+        liquids = new ObjectFloatMap<>(content.liquids().copy().size << 1);
+        tiles.each(t -> {
+            if(t.block== null)
+                return;
+
+            if (t.block instanceof GenericCrafter gc) {
+                for(var c:gc.consumeBuilder){
+                    if(c.optional) continue;
+                    else if(c instanceof ConsumeItems consumeItems){
+                        for (ItemStack stack : consumeItems.items) {
+                            Item item = stack.item;
+                            items.put(item, items.get(item, 0) - stack.amount * 60f / gc.craftTime);
+                        }
+                    }
+                    else if(c instanceof ConsumeLiquid consumeLiquid){
+                        Liquid liquid = consumeLiquid.liquid;
+                        liquids.put(liquid, liquids.get(liquid, 0) - consumeLiquid.amount * 60f);
+                    }
+                    else if(c instanceof ConsumeLiquids consumeLiquids){
+                        for (LiquidStack stack : consumeLiquids.liquids) {
+                            Liquid liquid = stack.liquid;
+                            liquids.put(liquid, liquids.get(liquid, 0) - stack.amount * 60f);
+                        }
+                    }
+                }
+                if(gc.outputsItems()){
+                    for (ItemStack stack : gc.outputItems) {
+                        Item item = stack.item;
+                        items.put(item, items.get(item, 0) + stack.amount * 60f / gc.craftTime);
+                    }
+                }/*
+                if(gc.outputLiquid != null){
+                    liquids.put(gc.outputLiquid.liquid, liquids.get(gc.outputLiquid.liquid, 0) + gc.outputLiquid.amount * 60f);
+                }*/
+                if(gc.outputLiquids !=null) {
+                    for (LiquidStack stack : gc.outputLiquids) {
+                        Liquid liquid = stack.liquid;
+                        liquids.put(liquid, liquids.get(liquid, 0) + stack.amount * 60f);
+                    }
+                }
+            }
+            else if (t.block instanceof Separator s) {
+                for(var c:s.consumeBuilder){
+                    if(c.optional) continue;
+                    else if(c instanceof ConsumeItems consumeItems){
+                        for (ItemStack stack : consumeItems.items) {
+                            Item item = stack.item;
+                            items.put(item, items.get(item, 0) - stack.amount * 60f / s.craftTime);
+                        }
+                    }
+                    else if (c instanceof ConsumeLiquid consumeLiquid) {
+                        Liquid liquid = consumeLiquid.liquid;
+                        liquids.put(liquid, liquids.get(liquid, 0) - consumeLiquid.amount * 60f);
+                    }
+                }
+            }
+            else if (t.block instanceof Fracker f) {
+                for(var c:f.consumeBuilder) {
+                    if (c.optional) continue;
+                    else if (c instanceof ConsumeItems consumeItems) {
+                        for (ItemStack stack : consumeItems.items) {
+                            Item item = stack.item;
+                            items.put(item, items.get(item, 0) - stack.amount * f.itemUseTime / 60f);
+                        }
+                    }
+                }
+            }
+            else if (t.block instanceof PowerGenerator) {
+                if (t.block instanceof  ConsumeGenerator cg) {
+                    for(var c:cg.consumeBuilder){
+                        if(c.optional) continue;
+                        else if(c instanceof ConsumeItems consumeItems){
+                            for (ItemStack stack : consumeItems.items) {
+                                Item item = stack.item;
+                                items.put(item, items.get(item, 0) - stack.amount * 60f / cg.itemDuration);
+                            }
+                        }
+                        else if(c instanceof ConsumeLiquid consumeLiquid){
+                            Liquid liquid = consumeLiquid.liquid;
+                            liquids.put(liquid, liquids.get(liquid, 0) - consumeLiquid.amount * 60f);
+                        }
+                        else if(c instanceof ConsumeLiquids consumeLiquids){
+                            for (LiquidStack stack : consumeLiquids.liquids) {
+                                Liquid liquid = stack.liquid;
+                                liquids.put(liquid, liquids.get(liquid, 0) - stack.amount * 60f);
+                            }
+                        }
+                    }
+                }
+                else if (t.block instanceof NuclearReactor nr) {
+                    for(var c:nr.consumeBuilder){
+                        if(c.optional) continue;
+                        else if(c instanceof ConsumeItems consumeItems){
+                            for (ItemStack stack : consumeItems.items) {
+                                Item item = stack.item;
+                                items.put(item, items.get(item, 0) - stack.amount * 60f / nr.itemDuration);
+                            }
+                        }
+                        else if(c instanceof ConsumeLiquid consumeLiquid){
+                            Liquid liquid = consumeLiquid.liquid;
+                            liquids.put(liquid, liquids.get(liquid, 0) - consumeLiquid.amount * 60f);
+                        }
+                        else if(c instanceof ConsumeLiquids consumeLiquids){
+                            for (LiquidStack stack : consumeLiquids.liquids) {
+                                Liquid liquid = stack.liquid;
+                                liquids.put(liquid, liquids.get(liquid, 0) - stack.amount * 60f);
+                            }
+                        }
+                    }
+                }
+                else if (t.block instanceof ImpactReactor ir) {
+                    for(var c:ir.consumeBuilder){
+                        if(c.optional) continue;
+                        else if(c instanceof ConsumeItems consumeItems){
+                            for (ItemStack stack : consumeItems.items) {
+                                Item item = stack.item;
+                                items.put(item, items.get(item, 0) - stack.amount * 60f / ir.itemDuration);
+                            }
+                        }
+                        else if(c instanceof ConsumeLiquid consumeLiquid){
+                            Liquid liquid = consumeLiquid.liquid;
+                            liquids.put(liquid, liquids.get(liquid, 0) - consumeLiquid.amount * 60f);
+                        }
+                        else if(c instanceof ConsumeLiquids consumeLiquids){
+                            for (LiquidStack stack : consumeLiquids.liquids) {
+                                Liquid liquid = stack.liquid;
+                                liquids.put(liquid, liquids.get(liquid, 0) - stack.amount * 60f);
+                            }
+                        }
+                    }
+                }
+            }
+        });
+    }
+
     public ItemSeq requirements(){
         ItemSeq requirements = new ItemSeq();
 
@@ -142,6 +294,12 @@ public class Schematic implements Publishable, Comparable<Schematic>{
             block = Blocks.air;
         }
 
+        public Stile(Block block, int x, int y){
+            this.block = block;
+            this.x = (short)x;
+            this.y = (short)y;
+        }
+
         public Stile set(Stile other){
             block = other.block;
             x = other.x;
diff --git a/core/src/mindustry/game/Universe.java b/core/src/mindustry/game/Universe.java
index 4aa77d8be7d4876022746b93046e0e8587b9052b..849a46f6bae96b5a65e4874b2621acfcc7e4ded9 100644
--- a/core/src/mindustry/game/Universe.java
+++ b/core/src/mindustry/game/Universe.java
@@ -20,7 +20,7 @@ public class Universe{
     private int netSeconds;
     private float secondCounter;
     private int turn;
-    private float turnCounter;
+    public static float turnCounter;
 
     private @Nullable Schematic lastLoadout;
     private ItemSeq lastLaunchResources = new ItemSeq();
diff --git a/core/src/mindustry/graphics/BlockRenderer.java b/core/src/mindustry/graphics/BlockRenderer.java
index ea5060298da5e478b234e8d0575ab2ceedb5b6e6..e59bff905f7398b0eb3c780c0cda5a3035a75bf2 100644
--- a/core/src/mindustry/graphics/BlockRenderer.java
+++ b/core/src/mindustry/graphics/BlockRenderer.java
@@ -444,13 +444,18 @@ public class BlockRenderer{
                         Draw.z(Layer.block);
                     }
 
-                    if(build.team != pteam){
-                        if(build.block.drawTeamOverlay){
-                            build.drawTeam();
-                            Draw.z(Layer.block);
+                    if(build.team != pteam && build.block.drawTeamOverlay){
+                        Draw.z(Layer.block + 0.01f);
+                        build.drawTeam();
+                    }
+                    if(build.team == player.team() || RenderExt.showOtherInfo){
+                        if(renderer.drawStatus && block.hasConsumers){
+                            build.drawStatus();
+                        }
+                        if(RenderExt.drawBlockDisabled && !build.enabled()){
+                            Draw.z(Layer.power + 1);
+                            build.drawDisabled();
                         }
-                    }else if(renderer.drawStatus && block.hasConsumers){
-                        build.drawStatus();
                     }
                 }
                 Draw.reset();
diff --git a/core/src/mindustry/graphics/Drawf.java b/core/src/mindustry/graphics/Drawf.java
index db7db61dd56a71310f66aabbd9dc4a6d1a23dfd4..47fbc966aa01b76b3bd58d9eeb25a06f1c0e081f 100644
--- a/core/src/mindustry/graphics/Drawf.java
+++ b/core/src/mindustry/graphics/Drawf.java
@@ -148,6 +148,13 @@ public class Drawf{
         Drawf.line(Pal.accent, start.getX() + Tmp.v1.x, start.getY() + Tmp.v1.y, dest.getX() + Tmp.v2.x, dest.getY() + Tmp.v2.y);
     }
 
+    public static void limitLineColor(Position start, Position dest, float len1, float len2,Color color){
+        Tmp.v1.set(dest).sub(start).setLength(len1);
+        Tmp.v2.set(Tmp.v1).scl(-1f).setLength(len2);
+
+        Drawf.line(color, start.getX() + Tmp.v1.x, start.getY() + Tmp.v1.y, dest.getX() + Tmp.v2.x, dest.getY() + Tmp.v2.y);
+    }
+
     public static void dashLineDst(Color color, float x, float y, float x2, float y2){
         dashLine(color, x, y, x2, y2, (int)(Mathf.dst(x, y, x2, y2) / tilesize * 1.6f));
     }
@@ -220,6 +227,32 @@ public class Drawf{
         Draw.reset();
     }
 
+    public static void target2(float x, float y, float rad, float alpha, Color color){
+        // target but no border
+        Lines.stroke(1f);
+        Draw.color(color, alpha);
+        Lines.poly(x, y, 4, rad, Time.time * 1.5f);
+        Lines.spikes(x, y, 3f/7f * rad, 6f/7f * rad, 4, Time.time * 1.5f);
+        Draw.reset();
+    }
+
+    public static void targetc(float x, float y, float rad, float alpha, Color color){
+        // target but no border
+        Lines.stroke(1f);
+        Draw.color(color, alpha);
+        Lines.circle(x, y, rad);
+        Lines.spikes(x, y, 3f/7f * rad, 6f/7f * rad, 4, Time.time * 1.5f);
+        Draw.reset();
+    }
+
+    public static void targetd(float x, float y, float rad, float alpha, Color color){
+        // target but no border
+        Lines.stroke(1f);
+        Draw.color(color, alpha);
+        Lines.spikes(x, y, 3f/7f * rad, 6f/7f * rad, 4, Time.time * 1.5f);
+        Draw.reset();
+    }
+
     /** Sets Draw.z to the text layer, and returns the previous layer. */
     public static float text(){
         float z = Draw.z();
@@ -390,6 +423,27 @@ public class Drawf{
         Draw.color();
     }
 
+    public static void simpleArrow(float x, float y, float x2, float y2, float length, float radius){
+        float angle = Angles.angle(x, y, x2, y2);
+        Tmp.v1.set(x2, y2).sub(x, y).limit(length);
+        float vx = Tmp.v1.x + x, vy = Tmp.v1.y + y;
+        Fill.poly(vx, vy, 3, radius, angle);
+    }
+
+    public static void simpleArrow(float x, float y, float x2, float y2, float length, float radius, Color color){
+        simpleArrow(x, y, x2, y2, length, radius, color,1f);
+    }
+
+    public static void simpleArrow(float x, float y, float x2, float y2, float length, float radius, Color color,float alpha){
+        float angle = Angles.angle(x, y, x2, y2);
+        Tmp.v1.set(x2, y2).sub(x, y).limit(length);
+        float vx = Tmp.v1.x + x, vy = Tmp.v1.y + y;
+
+        Draw.color(color,alpha);
+        Fill.poly(vx, vy, 3, radius, angle);
+        Draw.color();
+    }
+
     public static void laser(TextureRegion line, TextureRegion edge, float x, float y, float x2, float y2){
         laser(line, edge, edge, x, y, x2, y2, 1f);
     }
diff --git a/core/src/mindustry/graphics/OverlayRenderer.java b/core/src/mindustry/graphics/OverlayRenderer.java
index fe8d7dc18df91b5f8484e87f0d37ab8dce06b54f..5a245c5b2e1a960ba79122ac7f84c15274086112 100644
--- a/core/src/mindustry/graphics/OverlayRenderer.java
+++ b/core/src/mindustry/graphics/OverlayRenderer.java
@@ -15,8 +15,8 @@ import mindustry.game.*;
 import mindustry.game.Teams.*;
 import mindustry.gen.*;
 import mindustry.input.*;
-import mindustry.world.*;
 import mindustry.world.blocks.storage.CoreBlock.*;
+import mindustryX.features.*;
 
 import static mindustry.Vars.*;
 
@@ -179,39 +179,83 @@ public class OverlayRenderer{
                     //it must be clear that there is a core here.
                     if(/*core.wasVisible && */Core.camera.bounds(Tmp.r1).overlaps(Tmp.r2.setCentered(core.x, core.y, state.rules.enemyCoreBuildRadius * 2f))){
                         Draw.color(Color.darkGray);
+                        Draw.alpha(0.7f);
                         Lines.circle(core.x, core.y - 2, state.rules.enemyCoreBuildRadius);
                         Draw.color(Pal.accent, core.team.color, 0.5f + Mathf.absin(Time.time, 10f, 0.5f));
+                        Draw.alpha(0.7f);
                         Lines.circle(core.x, core.y, state.rules.enemyCoreBuildRadius);
                     }
                 });
-            }
-        }
+                player.team().cores().each(core ->{
+                    if(state.rules.pvp && Core.camera.bounds(Tmp.r1).overlaps(Tmp.r2.setCentered(core.x, core.y, state.rules.enemyCoreBuildRadius * 2f))){
 
-        Lines.stroke(2f);
-        Draw.color(Color.gray, Color.lightGray, Mathf.absin(Time.time, 8f, 1f));
+                        Draw.color(Color.darkGray);
+                        Draw.alpha(0.4f);
+                        Lines.circle(core.x, core.y - 2, state.rules.enemyCoreBuildRadius);
+                        Draw.color(Pal.accent, core.team.color, 0.5f + Mathf.absin(Time.time, 10f, 0.5f));
+                        Draw.alpha(0.4f);
+                        Lines.circle(core.x, core.y, state.rules.enemyCoreBuildRadius);
+                    }
 
+                });
+            }
+        }
+        /*
         if(state.hasSpawns()){
-            for(Tile tile : spawner.getSpawns()){
-                if(tile.within(player.x, player.y, state.rules.dropZoneRadius + spawnerMargin)){
-                    Draw.alpha(Mathf.clamp(1f - (player.dst(tile) - state.rules.dropZoneRadius) / spawnerMargin));
+            Lines.stroke(2f);
+            Draw.color(Color.gray, Color.lightGray, Mathf.absin(Time.time, 8f, 1f));
+
+            if (Core.settings.getBool("alwaysshowdropzone")) {
+                Draw.alpha(0.8f);
+                for(Tile tile : spawner.getSpawns()) {
                     Lines.dashCircle(tile.worldx(), tile.worldy(), state.rules.dropZoneRadius);
                 }
             }
-        }
+            else {
+                for(Tile tile : spawner.getSpawns()) {
+                    if (tile.within(player.x, player.y, state.rules.dropZoneRadius + spawnerMargin)) {
+                        Draw.alpha(Mathf.clamp(1f - (player.dst(tile) - state.rules.dropZoneRadius) / spawnerMargin));
+                        Lines.dashCircle(tile.worldx(), tile.worldy(), state.rules.dropZoneRadius);
+                    }
+                }
+            }
+            if (Core.settings.getBool("showFlyerSpawn") && spawner.countSpawns() < 20) {
+                for(Tile tile : spawner.getSpawns()) {
+                    float angle = Angles.angle(world.width() / 2f, world.height() / 2f, tile.x, tile.y);
+                    float trns = Math.max(world.width(), world.height()) * Mathf.sqrt2 * tilesize;
+                    float spawnX = Mathf.clamp(world.width() * tilesize / 2f + Angles.trnsx(angle, trns), 0, world.width() * tilesize);
+                    float spawnY = Mathf.clamp(world.height() * tilesize / 2f + Angles.trnsy(angle, trns), 0, world.height() * tilesize);
+                    if (Core.settings.getBool("showFlyerSpawnLine")) {
+                        Draw.color(Color.red, 0.5f);
+                        Lines.line(tile.worldx(), tile.worldy(), spawnX, spawnY);
+                    }
+                    Draw.color(Color.gray, Color.lightGray, Mathf.absin(Time.time, 8f, 1f));
+                    Draw.alpha(0.8f);
+                    Lines.dashCircle(spawnX, spawnY, 5f * tilesize);
 
-        Draw.reset();
+                    Draw.color();
+                    Draw.alpha(0.5f);
+                    Draw.rect(UnitTypes.zenith.fullIcon, spawnX, spawnY);
+                }
+            }
+            Draw.reset();
+        }
+        */
+        ArcWaveSpawner.drawSpawner();
 
         //draw selected block
         if(input.block == null && !Core.scene.hasMouse()){
             Vec2 vec = Core.input.mouseWorld(input.getMouseX(), input.getMouseY());
             Building build = world.buildWorld(vec.x, vec.y);
 
-            if(build != null && build.team == player.team()){
+            //if(build != null && build.team == player.team()){
+            if(build != null){
                 build.drawSelect();
                 if(!build.enabled && build.block.drawDisabled){
                    build.drawDisabled();
                 }
-
+            }
+            if(build != null && build.team == player.team()){
                 if(Core.input.keyDown(Binding.rotateplaced) && build.block.rotate && build.block.quickRotate && build.interactable(player.team())){
                     control.input.drawArrow(build.block, build.tileX(), build.tileY(), build.rotation, true);
                     Draw.color(Pal.accent, 0.3f + Mathf.absin(4f, 0.2f));
@@ -223,12 +267,22 @@ public class OverlayRenderer{
 
         input.drawOverSelect();
 
+        //单位射程
+        if(ui.hudfrag.blockfrag.hover() instanceof Unit unit){
+            Draw.reset();
+            Draw.color(unit.team.color);
+            Lines.dashCircle(unit.x, unit.y, unit.type.range);
+        }
+
         if(ui.hudfrag.blockfrag.hover() instanceof Unit unit && unit.controller() instanceof LogicAI ai && ai.controller != null && ai.controller.isValid()){
             var build = ai.controller;
             Drawf.square(build.x, build.y, build.block.size * tilesize/2f + 2f);
             if(!unit.within(build, unit.hitSize * 2f)){
                 Drawf.arrow(unit.x, unit.y, build.x, build.y, unit.hitSize *2f, 4f);
             }
+			Draw.color(Pal.accent);
+            Lines.line(unit.x, unit.y, build.x, build.y);
+            Draw.color();
         }
 
         //draw selection overlay when dropping item
@@ -257,6 +311,12 @@ public class OverlayRenderer{
                 }
             }
         }
+
+        ArcRadar.drawScanner();
+        ArcScanMode.draw();
+        if(player.unit() instanceof BlockUnitc unitc){
+            unitc.tile().drawSelect();
+        }
     }
 
     public void checkApplySelection(Unit u){
diff --git a/core/src/mindustry/input/Binding.java b/core/src/mindustry/input/Binding.java
index fcbcc2483e5d7dbc71ce769840cdbbd61c3e8095..6ed26ed4a5f078fe36495fd219c2d2e7f03054f5 100644
--- a/core/src/mindustry/input/Binding.java
+++ b/core/src/mindustry/input/Binding.java
@@ -99,6 +99,12 @@ public enum Binding implements KeyBind{
     chat_mode(KeyCode.tab),
     console(KeyCode.f8),
 
+    superUnitEffect(KeyCode.o,"ARC"),
+    showRTSAi(KeyCode.l),
+    arcDetail(KeyCode.unset),
+    arcScanMode(KeyCode.unset),
+    oreAdsorption(KeyCode.unset),
+
     //MDTX
     toggle_unit(KeyCode.unset, "mindustryX"),
     point(KeyCode.j),
diff --git a/core/src/mindustry/input/DesktopInput.java b/core/src/mindustry/input/DesktopInput.java
index 48d6d9c6b7c365b75e60431957cec7d695681ce3..abc2b8f68565f4e283bbf8b1c40e311595d42c7c 100644
--- a/core/src/mindustry/input/DesktopInput.java
+++ b/core/src/mindustry/input/DesktopInput.java
@@ -14,17 +14,25 @@ import arc.scene.ui.layout.*;
 import arc.struct.*;
 import arc.util.*;
 import mindustry.*;
+import mindustry.content.Items;
+import mindustry.content.UnitTypes;
 import mindustry.core.*;
+import mindustry.entities.Predict;
+import mindustry.entities.Units;
 import mindustry.entities.units.*;
 import mindustry.game.EventType.*;
 import mindustry.game.*;
 import mindustry.gen.*;
 import mindustry.graphics.*;
+import mindustry.type.UnitType;
 import mindustry.ui.*;
 import mindustry.world.*;
+import mindustry.world.blocks.ControlBlock;
+import mindustryX.features.*;
 
 import static arc.Core.camera;
 import static arc.Core.*;
+import static mindustry.Vars.net;
 import static mindustry.Vars.*;
 import static mindustry.input.PlaceMode.*;
 
@@ -56,6 +64,9 @@ public class DesktopInput extends InputHandler{
     /** Time of most recent control group selection */
     public long lastCtrlGroupSelectMillis;
 
+    /** Current thing being shot at. */
+    public @Nullable Teamc target;
+
     boolean showHint(){
         return ui.hudfrag.shown && Core.settings.getBool("hints") && selectPlans.isEmpty() && !player.dead() &&
             (!isBuilding && !Core.settings.getBool("buildautopause") || player.unit().isBuilding() || !player.dead() && !player.unit().spawnedByCore());
@@ -102,6 +113,10 @@ public class DesktopInput extends InputHandler{
                 b.table(a -> {
                     a.button("@schematic.add", Icon.save, this::showSchematicSave).colspan(2).size(250f, 50f).disabled(f -> lastSchematic == null || lastSchematic.file != null);
                 });
+                b.row();
+                b.table(a -> {
+                    a.button("@schematic.preview", Icon.info, this::showSchematicPreview).colspan(2).size(250f, 50f).disabled(f -> lastSchematic == null || lastSchematic.file != null);
+                });
             }).margin(6f);
         });
     }
@@ -233,7 +248,8 @@ public class DesktopInput extends InputHandler{
         }
 
         if((Math.abs(Core.input.axis(Binding.move_x)) > 0 || Math.abs(Core.input.axis(Binding.move_y)) > 0 || input.keyDown(Binding.mouse_move)) && (!scene.hasField())){
-            panning = false;
+            if(!Core.settings.getBool("viewMode")) panning = false;
+            follow = null;
         }
 
         if(!locked){
@@ -408,7 +424,8 @@ public class DesktopInput extends InputHandler{
             }
         }
 
-        if(player.dead() || locked){
+        //if(player.dead() || locked){
+        if(locked){
             cursorType = SystemCursor.arrow;
             if(!Core.scene.hasMouse()){
                 Core.graphics.cursor(cursorType);
@@ -778,6 +795,14 @@ public class DesktopInput extends InputHandler{
                 Core.settings.put("lasersopacity", 0);
             }
         }
+        if (input.keyDown(Binding.oreAdsorption) && player.unit().tileOn() != null) {
+            player.unit().tileOn().circle(Mathf.ceil(player.unit().type.mineRange / 8f), tile -> {
+                Tile ptile = player.unit().mineTile;
+                if ((ptile == null || player.dst(ptile) > player.dst(tile) || ptile.drop() == Items.sand) && canMine(tile) && tile.drop() != Items.sand) {
+                    player.unit().mineTile = tile;
+                }
+            });
+        }
     }
 
     @Override
@@ -852,7 +877,7 @@ public class DesktopInput extends InputHandler{
     }
 
     protected void updateMovement(Unit unit){
-        boolean omni = unit.type.omniMovement;
+        UnitType type = unit.type;
 
         float speed = unit.speed();
         float xa = Core.input.axis(Binding.move_x);
@@ -864,21 +889,63 @@ public class DesktopInput extends InputHandler{
             movement.add(input.mouseWorld().sub(player).scl(1f / 25f * speed)).limit(speed);
         }
 
-        float mouseAngle = Angles.mouseAngle(unit.x, unit.y);
-        boolean aimCursor = omni && player.shooting && unit.type.hasWeapons() && unit.type.faceTarget && !boosted;
+        boolean busy = unit.mining() || unit.activelyBuilding();
+
+        if (Core.settings.getBool("playerNeedShooting")){
+            busy = false;
+        }
+
+        boolean manualShoot = Core.input.keyDown(Binding.select) && shouldShoot && !busy && (type.hasWeapons() || UnitTypes.block.equals(type)) && !boosted;
+
+        Vec2 aimPos = Core.input.mouseWorld();
+
+        float lookAtAngle = Angles.mouseAngle(unit.x, unit.y);
+
+        if(target != null) {
+            boolean validHealTarget = type.canHeal && target instanceof Building b && b.isValid() && target.team() == unit.team && b.damaged() && target.within(unit, type.range);
+            if ((Units.invalidateTarget(target, unit, type.range) && !validHealTarget) || state.isEditor()) {
+                target = null;
+            }
+        }
+
+        if (!manualShoot && Core.settings.getBool("autotarget") && !busy) {
+            if (target == null) {
+                float range = unit.hasWeapons() ? unit.range() : 0f;
+                player.shooting = false;
+                if(!(player.unit() instanceof BlockUnitUnit u && u.tile() instanceof ControlBlock c && !c.shouldAutoTarget())){
+                    target = Units.closestTarget(unit.team, unit.x, unit.y, range, u -> u.checkTarget(type.targetAir, type.targetGround), u -> type.targetGround);
 
-        if(aimCursor){
-            unit.lookAt(mouseAngle);
+                    if(type.canHeal && target == null){
+                        target = Geometry.findClosest(unit.x, unit.y, indexer.getDamaged(unit.team));
+                        if(target != null && !unit.within(target, range)){
+                            target = null;
+                        }
+                    }
+                }
+            }
+            else {
+                Vec2 intercept = Predict.intercept(unit, target, unit.hasWeapons() ? type.weapons.first().bullet.speed : 0f);
+
+                player.shooting = !boosted;
+
+                aimPos = intercept;
+                lookAtAngle = unit.angleTo(intercept);
+            }
+        }else{
+            target = null;
+        }
+        if(type.omniMovement && type.faceTarget && unit.isShooting) {
+            unit.lookAt(lookAtAngle);
         }else{
             unit.lookAt(unit.prefRotation());
         }
 
         unit.movePref(movement);
 
-        unit.aim(Core.input.mouseWorld());
+        unit.aim(aimPos);
         unit.controlWeapons(true, player.shooting && !boosted);
 
-        player.boosting = Core.input.keyDown(Binding.boost);
+        player.boosting = Core.input.keyDown(Binding.boost) || Core.settings.getBool("forceBoost");
         player.mouseX = unit.aimX();
         player.mouseY = unit.aimY();
 
diff --git a/core/src/mindustry/input/InputHandler.java b/core/src/mindustry/input/InputHandler.java
index 9be58ec46ccab9a86d84f75e05e200c04ae405a2..4cd7f39d6cd882f36086c5c317147ec2c0831c30 100644
--- a/core/src/mindustry/input/InputHandler.java
+++ b/core/src/mindustry/input/InputHandler.java
@@ -36,11 +36,13 @@ import mindustry.world.*;
 import mindustry.world.blocks.ConstructBlock.*;
 import mindustry.world.blocks.*;
 import mindustry.world.blocks.distribution.*;
+import mindustry.world.blocks.logic.*;
 import mindustry.world.blocks.payloads.*;
 import mindustry.world.blocks.storage.*;
 import mindustry.world.blocks.storage.CoreBlock.*;
 import mindustry.world.meta.*;
 import mindustryX.features.*;
+import mindustryX.features.func.*;
 
 import java.util.*;
 
@@ -58,6 +60,7 @@ public abstract class InputHandler implements InputProcessor, GestureListener{
     final static int maxLength = 100;
     final static Rect r1 = new Rect(), r2 = new Rect();
     final static Seq<Unit> tmpUnits = new Seq<>(false);
+    public static Player follow;
     final static Binding[] controlGroupBindings = {
     Binding.block_select_01,
     Binding.block_select_02,
@@ -108,6 +111,7 @@ public abstract class InputHandler implements InputProcessor, GestureListener{
     /** Groups of units saved to different hotkeys */
     public IntSeq[] controlGroups = new IntSeq[controlGroupBindings.length];
 
+    public Rect lastSelection = new Rect();
     private Seq<BuildPlan> plansOut = new Seq<>(BuildPlan.class);
     private QuadTree<BuildPlan> playerPlanTree = new QuadTree<>(new Rect());
 
@@ -629,7 +633,7 @@ public abstract class InputHandler implements InputProcessor, GestureListener{
                 player.con.send(packet, true);
             }
 
-            throw new ValidateException(player, "Player cannot configure a tile.");
+            if(headless) throw new ValidateException(player, "Player cannot configure a tile.");
         }
         build.configured(player == null || player.dead() ? null : player.unit(), value);
         Events.fire(new ConfigEvent(build, player, value));
@@ -653,9 +657,8 @@ public abstract class InputHandler implements InputProcessor, GestureListener{
             throw new ValidateException(player, "Player cannot control a building.");
         }
 
-        if(player.team() == build.team && build.canControlSelect(player.unit())){
+        if((player.team() == build.team || (build instanceof CoreBuild && state.rules.editor)) && build.canControlSelect(player.unit())){
             var before = player.unit();
-
             build.onControlSelect(player.unit());
 
             if(!before.dead && before.spawnedByCore && !before.isPlayer()){
@@ -854,6 +857,10 @@ public abstract class InputHandler implements InputProcessor, GestureListener{
                 }
             }
         }
+
+        if(follow != null && !follow.dead()){
+            Core.camera.position.lerpDelta(follow, 0.08f);
+        }
     }
 
     public void checkUnit(){
@@ -1007,6 +1014,8 @@ public abstract class InputHandler implements InputProcessor, GestureListener{
                     attack = selectedEnemyUnit(target.x, target.y);
                 }
 
+                if(input.keyDown(KeyCode.altLeft)) attack = null;
+
                 int[] ids = new int[selectedUnits.size];
                 for(int i = 0; i < ids.length; i++){
                     ids[i] = selectedUnits.get(i).id;
@@ -1202,6 +1211,11 @@ public abstract class InputHandler implements InputProcessor, GestureListener{
         });
     }
 
+    protected void showSchematicPreview(){
+        if(lastSchematic == null) return;
+        ui.schematics.showInfo(lastSchematic);
+    }
+
     public void rotatePlans(Seq<BuildPlan> plans, int direction){
         int ox = schemOriginX(), oy = schemOriginY();
 
@@ -1235,6 +1249,19 @@ public abstract class InputHandler implements InputProcessor, GestureListener{
             plan.x = World.toTile(wx - plan.block.offset) + ox;
             plan.y = World.toTile(wy - plan.block.offset) + oy;
             plan.rotation = plan.block.planRotation(Mathf.mod(plan.rotation + direction, 4));
+
+            if(Core.settings.getBool("rotateCanvas") && plan.block instanceof CanvasBlock cb){
+                CanvasBlock.CanvasBuild temp = cb.new CanvasBuild();
+                Pixmap pix = cb.makePixmap((byte[])plan.config), pix2 = new Pixmap(cb.canvasSize, cb.canvasSize);
+                pix.each((px, py) -> pix2.setRaw(
+                direction >= 0 ? py : cb.canvasSize - py - 1,
+                direction >= 0 ? cb.canvasSize - px - 1 : px,
+                pix.getRaw(px, py)));
+                plan.config = temp.packPixmap(pix2);
+                temp.remove();
+                pix.dispose();
+                pix2.dispose();
+            }
         });
     }
 
@@ -1266,6 +1293,14 @@ public abstract class InputHandler implements InputProcessor, GestureListener{
 
             //flip rotation
             plan.block.flipRotation(plan, x);
+
+            if(Core.settings.getBool("rotateCanvas") && plan.block instanceof CanvasBlock cb){
+                CanvasBlock.CanvasBuild temp = cb.new CanvasBuild();
+                Pixmap pix = cb.makePixmap((byte[])plan.config);
+                plan.config = temp.packPixmap(x ? pix.flipX() : pix.flipY());
+                temp.remove();
+                pix.dispose();
+            }
         });
     }
 
@@ -1390,12 +1425,17 @@ public abstract class InputHandler implements InputProcessor, GestureListener{
     protected void drawSelection(int x1, int y1, int x2, int y2, int maxLength, Color col1, Color col2){
         NormalizeDrawResult result = Placement.normalizeDrawArea(Blocks.air, x1, y1, x2, y2, false, maxLength, 1f);
 
+        String arcSelectionSize = Math.abs(x2 - x1) + 1 + "×" + (Math.abs(y1 - y2) + 1);
+        FuncX.drawText(Tmp.v1.set((x1 + x2) / 2f, Math.max(y1, y2) + 1).scl(tilesize), arcSelectionSize, 2f, Pal.accent, Align.bottom);
         Lines.stroke(2f);
 
         Draw.color(col1);
         Lines.rect(result.x, result.y - 1, result.x2 - result.x, result.y2 - result.y);
         Draw.color(col2);
         Lines.rect(result.x, result.y, result.x2 - result.x, result.y2 - result.y);
+
+        lastSelection.set(x1, y1, x2 - x1, y2 - y1);
+        lastSelection.normalize();
     }
 
     protected void flushSelectPlans(Seq<BuildPlan> plans){
@@ -1581,7 +1621,7 @@ public abstract class InputHandler implements InputProcessor, GestureListener{
         if(build.block.commandable && commandMode){
             //TODO handled in tap.
             consumed = true;
-        }else if(build.block.configurable && build.interactable(player.team())){ //check if tapped block is configurable
+        }else if(build.block.configurable && (build.interactable(player.team()) || RenderExt.showOtherInfo)){ //check if tapped block is configurable
             consumed = true;
             if((!config.isShown() && build.shouldShowConfigure(player)) //if the config fragment is hidden, show
             //alternatively, the current selected block can 'agree' to switch config tiles
@@ -1610,7 +1650,7 @@ public abstract class InputHandler implements InputProcessor, GestureListener{
         //consume tap event if necessary
         if(build.interactable(player.team()) && build.block.consumesTap){
             consumed = true;
-        }else if(build.interactable(player.team()) && build.block.synthetic() && (!consumed || build.block.allowConfigInventory)){
+        }else if(build.interactable(player.team()) && build.block.synthetic() && (!consumed || build.block.allowConfigInventory || settings.getBool("forceConfigInventory"))){
             if(build.block.hasItems && build.items.total() > 0){
                 inv.showFor(build);
                 consumed = true;
@@ -1755,7 +1795,7 @@ public abstract class InputHandler implements InputProcessor, GestureListener{
 
     public @Nullable Building selectedControlBuild(){
         Building build = world.buildWorld(Core.input.mouseWorld().x, Core.input.mouseWorld().y);
-        if(build != null && !player.dead() && build.canControlSelect(player.unit()) && build.team == player.team()){
+        if(build != null && !player.dead() && build.canControlSelect(player.unit()) && (build.team == player.team() || (build instanceof CoreBuild && state.rules.editor))){
             return build;
         }
         return null;
@@ -1841,6 +1881,9 @@ public abstract class InputHandler implements InputProcessor, GestureListener{
     }
 
     public boolean canShoot(){
+        if(Core.settings.getBool("playerNeedShooting")){
+            return block == null && !onConfigurable() && !isDroppingItem() && !commandMode;
+        }
         return block == null && !onConfigurable() && !isDroppingItem() && !player.unit().activelyBuilding() &&
             !(player.unit() instanceof Mechc && player.unit().isFlying()) && !player.unit().mining() && !commandMode;
     }
diff --git a/core/src/mindustry/input/MobileInput.java b/core/src/mindustry/input/MobileInput.java
index 2d0fc1bec1fb644a44e4b38e2cdab671e44ac9af..6f16bb8b0a07d4ced31710eec57c15d206947d8b 100644
--- a/core/src/mindustry/input/MobileInput.java
+++ b/core/src/mindustry/input/MobileInput.java
@@ -328,7 +328,7 @@ public class MobileInput extends InputHandler implements GestureListener{
                     //why the heck doesn't setOrigin work for scaling
                     img.setTranslation(img.getWidth(), 0f);
                 });
-
+                b.button(Icon.info, style, this::showSchematicPreview).disabled(f -> lastSchematic == null || lastSchematic.file != null);
             }).margin(4f);
         });
     }
@@ -1021,18 +1021,22 @@ public class MobileInput extends InputHandler implements GestureListener{
             payloadTarget = null;
         }
 
-        movement.set(targetPos).sub(player).limit(speed);
-        movement.setAngle(Mathf.slerp(movement.angle(), unit.vel.angle(), 0.05f));
+        if(!Core.settings.getBool("viewMode")){
+            movement.set(targetPos).sub(player).limit(speed);
+            movement.setAngle(Mathf.slerp(movement.angle(), unit.vel.angle(), 0.05f));
 
-        if(player.within(targetPos, attractDst)){
+            if(player.within(targetPos, attractDst)){
+                movement.setZero();
+                unit.vel.approachDelta(Vec2.ZERO, unit.speed() * type.accel / 2f);
+            }
+        }else{
             movement.setZero();
-            unit.vel.approachDelta(Vec2.ZERO, unit.speed() * type.accel / 2f);
         }
 
         unit.hitbox(rect);
         rect.grow(4f);
 
-        player.boosting = collisions.overlapsTile(rect, EntityCollisions::solid) || !unit.within(targetPos, 85f);
+        player.boosting = collisions.overlapsTile(rect, EntityCollisions::solid) || !unit.within(targetPos, 85f) || Core.settings.getBool("forceBoost");
 
         unit.movePref(movement);
 
diff --git a/core/src/mindustry/type/UnitType.java b/core/src/mindustry/type/UnitType.java
index e6c38c601c937c3810d3ef44db97ed9547baf176..a29f972b13258b6640464cfa5a387c1c2b3adeee 100644
--- a/core/src/mindustry/type/UnitType.java
+++ b/core/src/mindustry/type/UnitType.java
@@ -17,6 +17,7 @@ import mindustry.ai.*;
 import mindustry.ai.Pathfinder.*;
 import mindustry.ai.types.*;
 import mindustry.annotations.Annotations.*;
+import mindustryX.features.ArcUnits;
 import mindustry.content.*;
 import mindustry.core.*;
 import mindustry.ctype.*;
@@ -38,6 +39,7 @@ import mindustry.world.blocks.units.*;
 import mindustry.world.consumers.*;
 import mindustry.world.meta.*;
 import mindustryX.features.*;
+import mindustryX.features.ui.*;
 
 import static arc.graphics.g2d.Draw.*;
 import static mindustry.Vars.*;
@@ -45,6 +47,8 @@ import static mindustry.Vars.*;
 public class UnitType extends UnlockableContent implements Senseable{
     public static final float shadowTX = -12, shadowTY = -13;
     private static final Vec2 legOffset = new Vec2();
+    public static float unitTrans = 1f;//current unitTrans when draw
+    private Table unitStatus = new Table();
 
     /** Environmental flags that are *all* required for this unit to function. 0 = any environment */
     public int envRequired = 0;
@@ -515,23 +519,103 @@ public class UnitType extends UnlockableContent implements Senseable{
 
     public void landed(Unit unit){}
 
+    private void displayStatusEffect(Unit unit,Table table){
+        if (unit.statuses().isEmpty()) return;
+        table.row().table(t -> {
+            for(StatusEntry entry : unit.statuses()){
+                if(t.getChildren().size % 5 == 0) t.row();
+                t.stack(
+                new Table(o -> {
+                    o.left();
+                    o.add(new Image(entry.effect.uiIcon)).size(iconMed).scaling(Scaling.fit);
+                }),
+                new Table(tt -> {
+                    tt.left().bottom();
+                    tt.add(entry.effect.permanent || entry.time > Time.toHours * 10f ? "Inf" : UI.formatTime(entry.time)).style(Styles.outlineLabel);
+                    tt.pack();
+                })).padLeft(8f);
+            }
+        });
+    }
+
+    private void updateStatusTable(Unit unit){
+        unitStatus.clear();
+        displayStatusEffect(unit,unitStatus);
+
+        Table statusText = getStatustext(unit.healthMultiplier(), unit.damageMultiplier(), unit.reloadMultiplier(), unit.speedMultiplier());
+        if(statusText != null){
+            unitStatus.row();
+            unitStatus.add(statusText).growX().wrap().left();
+        }
+    }
+
+    public static Table getStatustext(float healthMultiplier, float damageMultiplier, float reloadMultiplier, float speedMultiplier){
+        Seq<String> statusText = new Seq<>();
+        if(healthMultiplier != 1f){
+            statusText.add(" [acid]血量[white]: " + FormatDefault.format(healthMultiplier));
+        }
+        if(damageMultiplier != 1f){
+            statusText.add(" [red]伤害[white]: " + FormatDefault.format(damageMultiplier));
+        }
+        if(reloadMultiplier != 1f){
+            statusText.add(" [violet]攻速[white]: " + FormatDefault.format(reloadMultiplier));
+        }
+        if(speedMultiplier != 1f){
+            statusText.add(" [cyan]移速[white]: " + FormatDefault.format(speedMultiplier));
+        }
+        if (statusText.isEmpty()) return null;
+        Table table = new Table();
+        for (int i = 0;i < statusText.size;i++) {
+            if (i % 2 == 0) table.add(">>");
+            table.add(statusText.get(i)).left();
+            if (i % 2 == 1) table.row();
+        }
+        return table;
+    }
+
     public void display(Unit unit, Table table){
         table.table(t -> {
             t.left();
             t.add(new Image(uiIcon)).size(iconMed).scaling(Scaling.fit);
-            t.labelWrap(unit.isPlayer() ? unit.getPlayer().coloredName() + "\n[lightgray]" + localizedName : localizedName).left().width(190f).padLeft(5);
+            if(unit.team.id < 6){
+                if (unit.isPlayer()) {
+                    t.labelWrap(unit.getPlayer().coloredName() + "\n[#" + unit.team.color + "]" + localizedName).left().width(190f).padLeft(5);
+                } else {
+                    t.labelWrap("[#" + unit.team.color + "]" + localizedName).left().width(190f).padLeft(5);
+                }
+            }else{
+                if (unit.isPlayer()) {
+                    t.labelWrap(unit.getPlayer().coloredName() + "\n[#" + unit.team.color + "]" + localizedName + "[" + unit.team.id + "]").left().width(190f).padLeft(5);
+                } else {
+                    t.labelWrap("[#" + unit.team.color + "]" + localizedName + "[" + unit.team.id + "]").left().width(190f).padLeft(5);
+                }
+            }
         }).growX().left();
         table.row();
 
         table.table(bars -> {
             bars.defaults().growX().height(20f).pad(4);
 
-            //TODO overlay shields
-            bars.add(new Bar("stat.health", Pal.health, unit::healthf).blink(Color.white));
+            bars.add(new Bar(() -> {
+                updateStatusTable(unit);
+                StringBuilder str = new StringBuilder();
+                if(unit.shield() > 0){
+                    str.append(FormatDefault.format(unit.health)).append("[gray]+[white]").append(FormatDefault.format(unit.shield));
+                }else{
+                    str.append("\uE813 ").append(new Format(4).percent(unit.health, unit.maxHealth));
+                }
+                if (!Mathf.equal(unit.healthBalance.rawMean(), 0f, 0.1f)) {
+                    str.append(unit.healthBalance.rawMean() < 0 ? "[scarlet]" : "[acid]+");
+                    float number = unit.healthBalance.rawMean() * Time.toSeconds;
+                    str.append(FormatDefault.format(number));
+                    str.append("/s[]");
+                }
+                return str.toString();
+            }, () -> Pal.health, unit::healthf).blink(Color.white));
             bars.row();
 
             if(state.rules.unitAmmo){
-                bars.add(new Bar(ammoType.icon() + " " + Core.bundle.get("stat.ammo"), ammoType.barColor(), () -> unit.ammo / ammoCapacity));
+                bars.add(new Bar(() -> ammoType.icon() + " " + Core.bundle.format("bar.ammoDetail", unit.ammo, ammoCapacity), () -> ammoType.barColor(), () -> unit.ammo / ammoCapacity));
                 bars.row();
             }
 
@@ -539,8 +623,11 @@ public class UnitType extends UnlockableContent implements Senseable{
                 ability.displayBars(unit, bars);
             }
 
-            if(payloadCapacity > 0 && unit instanceof Payloadc payload){
-                bars.add(new Bar("stat.payloadcapacity", Pal.items, () -> payload.payloadUsed() / unit.type().payloadCapacity));
+            if(unit instanceof Payloadc payload){
+                bars.add(new Bar(() -> Strings.format("装载：@/@ @",
+                Strings.autoFixed(payload.payloadUsed() / tilesize / tilesize, 4),
+                Strings.autoFixed(payloadCapacity / tilesize / tilesize, 4),
+                StatUnit.blocksSquared.localized()), () -> Pal.items, () -> payload.payloadUsed() / unit.type().payloadCapacity));
                 bars.row();
 
                 var count = new float[]{-1};
@@ -550,18 +637,21 @@ public class UnitType extends UnlockableContent implements Senseable{
                         count[0] = payload.payloadUsed();
                     }
                 }).growX().left().height(0f).pad(0f);
+                bars.row();
             }
         }).growX();
+        table.row();
+        table.table(t-> unitStatus = t).growX();
 
         if(unit.controller() instanceof LogicAI ai){
             table.row();
-            table.add(Blocks.microProcessor.emoji() + " " + Core.bundle.get("units.processorcontrol")).growX().wrap().left();
-            if(ai.controller != null && (Core.settings.getBool("mouseposition") || Core.settings.getBool("position"))){
-                table.row();
-                table.add("[lightgray](" + ai.controller.tileX() + ", " + ai.controller.tileY() + ")").growX().wrap().left();
-            }
+            table.table(tt->{
+                tt.add(Blocks.microProcessor.emoji() + " " + Core.bundle.get("units.processorcontrol")).growX().left();
+                if(ai.controller != null && (Core.settings.getBool("mouseposition") || Core.settings.getBool("position"))){
+                    tt.add("[lightgray](" + ai.controller.tileX() + ", " + ai.controller.tileY() + ")").growX().right();
+                }
+            }).growX().wrap().left();
             table.row();
-            table.label(() -> Iconc.settings + " " + (long)unit.flag + "").color(Color.lightGray).growX().wrap().left();
             if(net.active() && ai.controller != null && ai.controller.lastAccessed != null){
                 table.row();
                 table.add(Core.bundle.format("lastaccessed", ai.controller.lastAccessed)).growX().wrap().left();
@@ -572,6 +662,11 @@ public class UnitType extends UnlockableContent implements Senseable{
         }
 
         table.row();
+        table.table(t -> {
+            t.add(Iconc.settings + " " + (long)unit.flag + "").color(Color.lightGray).growX();
+            t.add(Fonts.getUnicodeStr(unit.type().name) + unit.team.data().countType(unit.type()) + "/" + Units.getStringCap(unit.team)).color(Color.lightGray).growX();
+        }).growX();
+        table.row();
     }
 
     /** @return whether this block supports a specific environment. */
@@ -1241,6 +1336,9 @@ public class UnitType extends UnlockableContent implements Senseable{
         Mechc mech = unit instanceof Mechc ? (Mechc)unit : null;
         float z = isPayload ? Draw.z() : unit.elevation > 0.5f ? (lowAltitude ? Layer.flyingUnitLow : Layer.flyingUnit) : groundLayer + Mathf.clamp(hitSize / 4000f, 0, 0.01f);
 
+        unitTrans = ArcUnits.drawARCUnits(unit);
+        if(unitTrans == 0) return;
+
         if(unit.controller().isBeingControlled(player.unit())){
             drawControl(unit);
         }
@@ -1380,7 +1478,7 @@ public class UnitType extends UnlockableContent implements Senseable{
     }
 
     public void drawShield(Unit unit){
-        float alpha = unit.shieldAlpha();
+        float alpha = unit.shieldAlpha() * unitTrans;
         float radius = unit.hitSize() * 1.3f;
         Fill.light(unit.x, unit.y, Lines.circleVertices(radius), radius,
             Color.clear,
@@ -1392,6 +1490,7 @@ public class UnitType extends UnlockableContent implements Senseable{
         Draw.z(unit.isFlying() ? Layer.flyingUnitLow : Layer.groundUnit - 2);
 
         Draw.color(Pal.accent, Color.white, Mathf.absin(4f, 0.3f));
+        Draw.alpha(unitTrans);
         Lines.poly(unit.x, unit.y, 4, unit.hitSize + 1.5f);
 
         Draw.reset();
@@ -1405,7 +1504,7 @@ public class UnitType extends UnlockableContent implements Senseable{
         float dest = floor.canShadow ? 1f : 0f;
         //yes, this updates state in draw()... which isn't a problem, because I don't want it to be obvious anyway
         unit.shadowAlpha = unit.shadowAlpha < 0 ? dest : Mathf.approachDelta(unit.shadowAlpha, dest, 0.11f);
-        Draw.color(Pal.shadow, Pal.shadow.a * unit.shadowAlpha);
+        Draw.color(Pal.shadow, Pal.shadow.a * unit.shadowAlpha * unitTrans);
 
         Draw.rect(shadowRegion, unit.x + shadowTX * e, unit.y + shadowTY * e, unit.rotation - 90);
         Draw.color();
@@ -1420,7 +1519,7 @@ public class UnitType extends UnlockableContent implements Senseable{
     }
 
     public void drawSoftShadow(float x, float y, float rotation, float alpha){
-        Draw.color(0, 0, 0, 0.4f * alpha);
+        Draw.color(0, 0, 0, 0.4f * alpha * unitTrans);
         float rad = 1.6f;
         float size = Math.max(region.width, region.height) * region.scl();
         Draw.rect(softShadowRegion, x, y, size * rad * Draw.xscl, size * rad * Draw.yscl, rotation - 90);
@@ -1443,18 +1542,21 @@ public class UnitType extends UnlockableContent implements Senseable{
             Draw.mixcol();
 
             size = ((3f + sin) * unit.itemTime + 0.5f) * 2;
-            Draw.color(Pal.accent);
+            Draw.color(Pal.accent, unitTrans);
             Draw.rect(itemCircleRegion,
             unit.x + Angles.trnsx(unit.rotation + 180f, itemOffsetY),
             unit.y + Angles.trnsy(unit.rotation + 180f, itemOffsetY),
             size, size);
 
-            if(unit.isLocal() && !renderer.pixelate){
+            if(ArcUnits.unitItemCarried || (unit.isLocal() && !renderer.pixelate)){
+                float z = Draw.z();
+                Draw.z(z + .01f); // Remove this if you enjoy 1000 texture swaps
                 Fonts.outline.draw(unit.stack.amount + "",
                 unit.x + Angles.trnsx(unit.rotation + 180f, itemOffsetY),
                 unit.y + Angles.trnsy(unit.rotation + 180f, itemOffsetY) - 3,
                 Pal.accent, 0.25f * unit.itemTime / Scl.scl(1f), false, Align.center
                 );
+                Draw.z(z);
             }
 
             Draw.reset();
@@ -1537,7 +1639,7 @@ public class UnitType extends UnlockableContent implements Senseable{
 
     public Color cellColor(Unit unit){
         float f = Mathf.clamp(unit.healthf());
-        return Tmp.c1.set(Color.black).lerp(unit.team.color, f + Mathf.absin(Time.time, Math.max(f * 5f, 1f), 1f - f));
+        return Tmp.c1.set(Color.black).lerp(unit.team.color, f + Mathf.absin(Time.time, Math.max(f * 5f, 1f), 1f - f)).a(unitTrans);
     }
 
     public void drawLight(Unit unit){
@@ -1578,7 +1680,7 @@ public class UnitType extends UnlockableContent implements Senseable{
 
         if(footRegion.found()){
             for(Leg leg : legs){
-                Drawf.shadow(leg.base.x, leg.base.y, ssize, invDrown);
+                Drawf.shadow(leg.base.x, leg.base.y, ssize, invDrown * unitTrans);
             }
         }
 
@@ -1596,7 +1698,7 @@ public class UnitType extends UnlockableContent implements Senseable{
             if(footRegion.found() && leg.moving && shadowElevation > 0){
                 float scl = shadowElevation * invDrown;
                 float elev = Mathf.slope(1f - leg.stage) * scl;
-                Draw.color(Pal.shadow);
+                Draw.color(Pal.shadow, Pal.shadow.a * unitTrans);
                 Draw.rect(footRegion, leg.base.x + shadowTX * elev, leg.base.y + shadowTY * elev, position.angleTo(leg.base));
                 Draw.color();
             }
@@ -1675,8 +1777,9 @@ public class UnitType extends UnlockableContent implements Senseable{
 
         Floor floor = unit.isFlying() ? Blocks.air.asFloor() : unit.floorOn();
 
+        Draw.alpha(unitTrans);
         if(floor.isLiquid){
-            Draw.color(Color.white, floor.mapColor, 0.5f);
+            Draw.color(Color.white, floor.mapColor, 0.5f * unitTrans);
         }
 
         for(int i : Mathf.signs){
@@ -1698,6 +1801,8 @@ public class UnitType extends UnlockableContent implements Senseable{
             Draw.color(Color.white);
         }
 
+        Draw.alpha(unitTrans); //
+
         Draw.rect(baseRegion, unit, mech.baseRotation() - 90);
 
         Draw.mixcol();
@@ -1705,12 +1810,12 @@ public class UnitType extends UnlockableContent implements Senseable{
 
     public void applyOutlineColor(Unit unit){
         if(unit.drownTime > 0 && unit.lastDrownFloor != null){
-            Draw.color(Color.white, Tmp.c1.set(unit.lastDrownFloor.mapColor).mul(0.8f), unit.drownTime * 0.9f);
+            Draw.color(Color.white, Tmp.c1.set(unit.lastDrownFloor.mapColor).mul(0.8f), unit.drownTime * 0.9f * unitTrans);
         }
     }
 
     public void applyColor(Unit unit){
-        Draw.color();
+        Draw.color(Color.white, unitTrans);
         if(healFlash){
             Tmp.c1.set(Color.white).lerp(healColor, Mathf.clamp(unit.healTime - unit.hitTime));
         }
@@ -1725,6 +1830,13 @@ public class UnitType extends UnlockableContent implements Senseable{
         }
     }
 
+    public String typeColor() {
+        if (naval) return "[cyan]";
+        else if (allowLegStep) return "[magenta]";
+        else if (flying) return "[acid]";
+        else if (hovering) return "[sky]";
+        else return "[stat]";
+    }
     //endregion
 
     public static class UnitEngine implements Cloneable{
@@ -1763,13 +1875,13 @@ public class UnitType extends UnlockableContent implements Senseable{
             );
             Draw.z(z);*/
 
-            Draw.color(color);
+            Draw.color(color, unitTrans);
             Fill.circle(
             unit.x + ex,
             unit.y + ey,
             (radius + Mathf.absin(Time.time, 2f, radius / 4f)) * scale
             );
-            Draw.color(type.engineColorInner);
+            Draw.color(type.engineColorInner, unitTrans);
             Fill.circle(
             unit.x + ex - Angles.trnsx(rot + rotation, 1f),
             unit.y + ey - Angles.trnsy(rot + rotation, 1f),
diff --git a/core/src/mindustry/type/Weapon.java b/core/src/mindustry/type/Weapon.java
index f9ec8feac6e944e76b5e2309da9b78e9d1269348..54aecfe829705b2f0f39743f476fbc8dcf408d93 100644
--- a/core/src/mindustry/type/Weapon.java
+++ b/core/src/mindustry/type/Weapon.java
@@ -24,6 +24,7 @@ import mindustry.graphics.*;
 import mindustry.world.meta.*;
 import mindustryX.features.*;
 
+import static arc.math.Mathf.doubleRadDeg;
 import static mindustry.Vars.*;
 
 public class Weapon implements Cloneable{
@@ -227,10 +228,11 @@ public class Weapon implements Cloneable{
         wy = unit.y + Angles.trnsy(rotation, x, y) + Angles.trnsy(weaponRotation, 0, -realRecoil);
 
         if(shadow > 0){
-            Drawf.shadow(wx, wy, shadow);
+            Drawf.shadow(wx, wy, shadow, UnitType.unitTrans);
         }
 
         if(top){
+            Draw.alpha(UnitType.unitTrans);
             drawOutline(unit, mount);
         }
 
@@ -256,13 +258,13 @@ public class Weapon implements Cloneable{
         if(region.found()) Draw.rect(region, wx, wy, weaponRotation);
 
         if(cellRegion.found()){
-            Draw.color(unit.type.cellColor(unit));
+            Draw.color(unit.type.cellColor(unit), UnitType.unitTrans);
             Draw.rect(cellRegion, wx, wy, weaponRotation);
             Draw.color();
         }
 
         if(heatRegion.found() && mount.heat > 0){
-            Draw.color(heatColor, mount.heat);
+            Draw.color(heatColor, mount.heat * UnitType.unitTrans);
             Draw.blend(Blending.additive);
             Draw.rect(heatRegion, wx, wy, weaponRotation);
             Draw.blend();
@@ -285,6 +287,23 @@ public class Weapon implements Cloneable{
 
         Draw.xscl = 1f;
 
+        if (mount.shoot && ArcUnits.unitWeaponTargetLine){
+            if(mount.aimX !=0 && mount.aimY != 0  && Mathf.len(mount.aimX - wx, mount.aimY - wy) <= 1200f){
+                Draw.z(z + 1f);
+                Lines.stroke(1f);
+                if (unit.controller() == player) {
+                    Draw.color(RenderExt.playerEffectColor);
+                } else {
+                    Draw.color(unit.team.color);
+                }
+                Draw.alpha(0.8f);
+                Lines.line(wx, wy, mount.aimX, mount.aimY);
+                if(!(unit.controller() instanceof Player) || Core.settings.getInt("unitTargetType") == 0)
+                    Lines.spikes(mount.aimX, mount.aimY, 4f, 4f, 4, (float)(Math.atan((mount.aimX - wx) / (mount.aimY - wy) * doubleRadDeg)) + 45f);
+                Draw.reset();
+            }
+        }
+
         Draw.z(z);
     }
 
diff --git a/core/src/mindustry/ui/Fonts.java b/core/src/mindustry/ui/Fonts.java
index 916b2ba5102ef670704e64a1f058c477c992d6dc..749c2180b6682361b568ca6d171675bc0552a22c 100644
--- a/core/src/mindustry/ui/Fonts.java
+++ b/core/src/mindustry/ui/Fonts.java
@@ -30,7 +30,7 @@ public class Fonts{
     private static final ObjectSet<String> unscaled = ObjectSet.with("iconLarge");
     private static ObjectIntMap<String> unicodeIcons = new ObjectIntMap<>();
     private static IntMap<String> unicodeToName = new IntMap<>();
-    private static ObjectMap<String, String> stringIcons = new ObjectMap<>();
+    public static ObjectMap<String, String> stringIcons = new ObjectMap<>();
     private static ObjectMap<String, TextureRegion> largeIcons = new ObjectMap<>();
 
     public static Font def, outline, icon, iconLarge, tech, logic;
diff --git a/core/src/mindustry/ui/dialogs/ContentInfoDialog.java b/core/src/mindustry/ui/dialogs/ContentInfoDialog.java
index 8defe26a2482e54d24d9b12e4a9ae453e13348f3..bd97f9cc7c1c491b1cb7eee0c19a32041b225674 100644
--- a/core/src/mindustry/ui/dialogs/ContentInfoDialog.java
+++ b/core/src/mindustry/ui/dialogs/ContentInfoDialog.java
@@ -8,8 +8,10 @@ import arc.util.*;
 import mindustry.ctype.*;
 import mindustry.gen.*;
 import mindustry.graphics.*;
+import mindustry.ui.Styles;
 import mindustry.input.*;
 import mindustry.world.meta.*;
+import mindustryX.features.ui.*;
 
 import static arc.Core.*;
 import static mindustry.Vars.*;
@@ -38,8 +40,9 @@ public class ContentInfoDialog extends BaseDialog{
         content.checkStats();
 
         table.table(title1 -> {
-            title1.image(content.uiIcon).size(iconXLarge).scaling(Scaling.fit);
-            title1.add("[accent]" + content.localizedName + (settings.getBool("console") ? "\n[gray]" + content.name : "")).padLeft(5);
+            title1.image(content.uiIcon).size(iconXLarge).scaling(Scaling.fit).get().clicked(() -> Core.app.setClipboardText(content.emoji()));
+            int logicId = content.getLogicId();
+            title1.add("[accent]" + content.localizedName + "\n[gray]" + content.name + (logicId != -1 ? " <#" + logicId +">": "")).padLeft(5);
         });
 
         table.row();
@@ -89,12 +92,30 @@ public class ContentInfoDialog extends BaseDialog{
         }
 
         if(content.details != null){
-            table.add("[gray]" + (content.unlocked() || !content.hideDetails ? content.details : Iconc.lock + " " + Core.bundle.get("unlock.incampaign"))).pad(6).padTop(20).width(400f).wrap().fillX();
+            //table.add("[gray]" + (content.unlocked() || !content.hideDetails ? content.details : Iconc.lock + " " + Core.bundle.get("unlock.incampaign"))).pad(6).padTop(20).width(400f).wrap().fillX();
+            table.add("[gray]" + content.details ).pad(6).padTop(20).width(400f).wrap().fillX();
             table.row();
         }
 
         content.displayExtra(table);
 
+        table.table(t -> {
+            t.row();
+            t.table(tt->{
+                tt.button(content.emoji(), Styles.cleart, () -> Core.app.setClipboardText(content.emoji())).width(60f).tooltip(content.emoji());
+                tt.button(Icon.info, Styles.clearNonei, () -> Core.app.setClipboardText(content.name)).width(50f).tooltip(content.name);
+                tt.button(Icon.book, Styles.clearNonei, () -> Core.app.setClipboardText(content.description)).width(50f).tooltip(content.description);
+            });
+
+            t.row();
+            t.table(tt -> {
+                tt.add("♐");
+                tt.button("简", Styles.cleart, () -> ArcMessageDialog.shareContent(content, false)).width(50f);
+                tt.button("详", Styles.cleart, () -> ArcMessageDialog.shareContent(content, true)).width(50f);
+            }).visible(() -> Core.settings.getBool("arcShareWaveInfo"));
+
+        }).fillX().padLeft(10);
+
         ScrollPane pane = new ScrollPane(table);
         cont.add(pane);
 
diff --git a/core/src/mindustry/ui/dialogs/CustomRulesDialog.java b/core/src/mindustry/ui/dialogs/CustomRulesDialog.java
index 247625c2486445bf2c9c57e9710e3d7bdf65b594..a4e5ab1c90870e2f926822385c47259532bf5433 100644
--- a/core/src/mindustry/ui/dialogs/CustomRulesDialog.java
+++ b/core/src/mindustry/ui/dialogs/CustomRulesDialog.java
@@ -3,6 +3,7 @@ package mindustry.ui.dialogs;
 import arc.*;
 import arc.func.*;
 import arc.graphics.*;
+import arc.math.geom.*;
 import arc.scene.style.*;
 import arc.scene.ui.*;
 import arc.scene.ui.ImageButton.*;
@@ -16,11 +17,13 @@ import mindustry.game.*;
 import mindustry.game.Rules.*;
 import mindustry.gen.*;
 import mindustry.graphics.*;
+import mindustry.graphics.g3d.*;
 import mindustry.io.*;
 import mindustry.type.*;
 import mindustry.type.Weather.*;
 import mindustry.ui.*;
 import mindustry.world.*;
+import mindustryX.features.*;
 
 import static arc.util.Time.*;
 import static mindustry.Vars.*;
@@ -38,6 +41,7 @@ public class CustomRulesDialog extends BaseDialog{
     public String currentName = "";
     public String ruleSearch = "";
     public Seq<Runnable> additionalSetup; // for modding to easily add new rules
+    private Seq<Team> teams;
 
     public CustomRulesDialog(){
         this(false);
@@ -57,6 +61,7 @@ public class CustomRulesDialog extends BaseDialog{
         additionalSetup = new Seq<>();
         categories = new Seq<>();
         categoryNames = new Seq<>();
+        teams = Seq.with(Team.baseTeams);
 
         buttons.button("@edit", Icon.pencil, () -> {
             BaseDialog dialog = new BaseDialog("@waves.edit");
@@ -220,13 +225,11 @@ public class CustomRulesDialog extends BaseDialog{
         check("@rules.wavesending", b -> rules.waveSending = b, () -> rules.waveSending, () -> rules.waves);
         check("@rules.wavetimer", b -> rules.waveTimer = b, () -> rules.waveTimer, () -> rules.waves);
         check("@rules.waitForWaveToEnd", b -> rules.waitEnemies = b, () -> rules.waitEnemies, () -> rules.waves && rules.waveTimer);
+        number("@rules.winWave", b -> rules.winWave = (int)b, () -> (int)rules.winWave);
         check("@rules.airUseSpawns", b -> rules.airUseSpawns = b, () -> rules.airUseSpawns, () -> rules.waves);
         numberi("@rules.wavelimit", f -> rules.winWave = f, () -> rules.winWave, () -> rules.waves, 0, Integer.MAX_VALUE);
         number("@rules.wavespacing", false, f -> rules.waveSpacing = f * 60f, () -> rules.waveSpacing / 60f, () -> rules.waves && rules.waveTimer, 1, Float.MAX_VALUE);
-        //this is experimental, because it's not clear that 0 makes it default.
-        if(experimental){
-            number("@rules.initialwavespacing", false, f -> rules.initialWaveSpacing = f * 60f, () -> rules.initialWaveSpacing / 60f, () -> rules.waves && rules.waveTimer, 0, Float.MAX_VALUE);
-        }
+        number("@rules.initialwavespacing", false, f -> rules.initialWaveSpacing = f * 60f, () -> rules.initialWaveSpacing / 60f, () -> rules.waves && rules.waveTimer, 0, Float.MAX_VALUE);
         number("@rules.dropzoneradius", false, f -> rules.dropZoneRadius = f * tilesize, () -> rules.dropZoneRadius / tilesize, () -> rules.waves);
 
         category("resourcesbuilding");
@@ -237,7 +240,7 @@ public class CustomRulesDialog extends BaseDialog{
         check("@rules.reactorexplosions", b -> rules.reactorExplosions = b, () -> rules.reactorExplosions);
         check("@rules.schematic", b -> rules.schematicsAllowed = b, () -> rules.schematicsAllowed);
         check("@rules.coreincinerates", b -> rules.coreIncinerates = b, () -> rules.coreIncinerates);
-        check("@rules.cleanupdeadteams", b -> rules.cleanupDeadTeams = b, () -> rules.cleanupDeadTeams, () -> rules.pvp);
+        check("@rules.cleanupdeadteams", b -> rules.cleanupDeadTeams = b, () -> rules.cleanupDeadTeams);
         check("@rules.disableworldprocessors", b -> rules.disableWorldProcessors = b, () -> rules.disableWorldProcessors);
         number("@rules.buildcostmultiplier", false, f -> rules.buildCostMultiplier = f, () -> rules.buildCostMultiplier, () -> !rules.infiniteResources);
         number("@rules.buildspeedmultiplier", f -> rules.buildSpeedMultiplier = f, () -> rules.buildSpeedMultiplier, 0.001f, 50f);
@@ -257,6 +260,9 @@ public class CustomRulesDialog extends BaseDialog{
         if(Core.bundle.get("bannedblocks").toLowerCase().contains(ruleSearch)){
             current.button("@bannedblocks", () -> showBanned("@bannedblocks", ContentType.block, rules.bannedBlocks, Block::canBeBuilt)).left().width(300f).row();
         }
+        if(Core.bundle.get("revealedblocks").toLowerCase().contains(ruleSearch)){
+            current.button("@revealedblocks", () -> showBanned("@revealedblocks", ContentType.block, rules.revealedBlocks, b -> b.showUnlock() && (!b.isVanilla() || b.hasEmoji()))).left().width(300f).row();
+        }
         check("@rules.hidebannedblocks", b -> rules.hideBannedBlocks = b, () -> rules.hideBannedBlocks);
         check("@bannedblocks.whitelist", b -> rules.blockWhitelist = b, () -> rules.blockWhitelist);
 
@@ -289,6 +295,7 @@ public class CustomRulesDialog extends BaseDialog{
         check("@rules.explosions", b -> rules.damageExplosions = b, () -> rules.damageExplosions);
         check("@rules.fire", b -> rules.fire = b, () -> rules.fire);
         check("@rules.fog", b -> rules.fog = b, () -> rules.fog);
+        check("@rules.staticFog", b -> rules.staticFog = b, () -> rules.staticFog);
         check("@rules.lighting", b -> rules.lighting = b, () -> rules.lighting);
 
         if(experimental){
@@ -312,11 +319,47 @@ public class CustomRulesDialog extends BaseDialog{
                 b.add("@rules.ambientlight");
             }, () -> ui.picker.show(rules.ambientLight, rules.ambientLight::set)).left().width(250f).row();
         }
+        if(Core.bundle.get("rules.staticColor").toLowerCase().contains(ruleSearch)){
+            current.button(b -> {
+                b.left();
+                b.table(Tex.pane, in -> {
+                    in.stack(new Image(Tex.alphaBg), new Image(Tex.whiteui){{
+                        update(() -> setColor(rules.staticColor));
+                    }}).grow();
+                }).margin(4).size(50f).padRight(10);
+                b.add("@rules.staticColor");
+            }, () -> ui.picker.show(rules.staticColor, rules.staticColor::set)).left().width(250f).row();
+        }
+        if(Core.bundle.get("rules.dynamicColor").toLowerCase().contains(ruleSearch)){
+            current.button(b -> {
+                b.left();
+                b.table(Tex.pane, in -> {
+                    in.stack(new Image(Tex.alphaBg), new Image(Tex.whiteui){{
+                        update(() -> setColor(rules.dynamicColor));
+                    }}).grow();
+                }).margin(4).size(50f).padRight(10);
+                b.add("@rules.dynamicColor");
+            }, () -> ui.picker.show(rules.dynamicColor, rules.dynamicColor::set)).left().width(250f).row();
+        }
 
         if(Core.bundle.get("rules.weather").toLowerCase().contains(ruleSearch)){
             current.button("@rules.weather", this::weatherDialog).width(250f).left().row();
         }
 
+        category("arcExperimental");
+        check("@rules.logicUnitBuild", b -> rules.logicUnitBuild = b, () -> rules.logicUnitBuild);
+        check("@rules.coreDestroyClear",b->rules.coreDestroyClear = b,()->rules.coreDestroyClear);
+        check("@rules.unitPayloadUpdate",b->rules.unitPayloadUpdate = b,()->rules.unitPayloadUpdate);
+        check("@rules.showSpawns",b->rules.showSpawns = b,()->rules.showSpawns);
+        check("允许控制单位", b -> rules.possessionAllowed = b, () -> rules.possessionAllowed);
+        check("禁用重建", b -> rules.ghostBlocks = b, () -> !rules.ghostBlocks);
+
+        check("@rules.limitarea", b -> rules.limitMapArea = b, () -> rules.limitMapArea);
+        numberi("x", x -> state.rules.limitX = x, () -> state.rules.limitX, () -> state.rules.limitMapArea, 0, 10000);
+        numberi("y", y -> state.rules.limitY = y, () -> state.rules.limitY, () -> state.rules.limitMapArea, 0, 10000);
+        numberi("w", w -> state.rules.limitWidth = w, () -> state.rules.limitWidth, () -> state.rules.limitMapArea, 0, 10000);
+        numberi("h", h -> state.rules.limitHeight = h, () -> state.rules.limitHeight, () -> state.rules.limitMapArea, 0, 10000);
+        check("@rules.disableOutsideArea",b -> rules.disableOutsideArea = b, () -> rules.disableOutsideArea);
 
         category("planet");
         if(Core.bundle.get("rules.title.planet").toLowerCase().contains(ruleSearch)){
@@ -327,10 +370,10 @@ public class CustomRulesDialog extends BaseDialog{
 
                 t.defaults().size(140f, 50f);
 
-                for(Planet planet : content.planets().select(p -> p.accessible && p.visible && p.isLandable())){
-                    t.button(planet.localizedName, style, () -> {
-                        planet.applyRules(rules);
-                    }).group(group).checked(b -> rules.planet == planet);
+            for(Planet planet : content.planets()){
+                t.button(planet.localizedName, style, () -> {
+                    planet.applyRules(rules);
+                }).group(group).checked(b -> rules.planet == planet);
 
                     if(t.getChildren().size % 3 == 0){
                         t.row();
@@ -350,10 +393,29 @@ public class CustomRulesDialog extends BaseDialog{
         if(showRuleEditRule){
             check("@rules.allowedit", b -> rules.allowEditRules = b, () -> rules.allowEditRules);
         }
+        current.button("所有队伍开启无限火力", () -> {
+            for(Team team : Team.all){
+                team.rules().cheat = true;
+            }
+            setup();
+        }).width(256f).height(32f).row();
+        current.button("所有队伍关闭无限火力", () -> {
+            for(Team team : Team.all){
+                team.rules().cheat = false;
+            }
+            setup();
+        }).width(256f).height(32f).row();
+
         team("@rules.playerteam", t -> rules.defaultTeam = t, () -> rules.defaultTeam);
         team("@rules.enemyteam", t -> rules.waveTeam = t, () -> rules.waveTeam);
 
-        for(Team team : Team.baseTeams){
+        current.button("更多队伍设置", Styles.flatBordert, () -> UIExt.teamSelect.select(team -> teams.contains(team), team -> {
+            if(teams.contains(team)) teams.remove(team);
+            else teams.add(team);
+            setup();
+        })).marginLeft(14f).fillX().height(55f).row();
+
+        for(Team team : teams){
             boolean[] shown = {false};
             Table wasCurrent = current;
 
@@ -370,6 +432,10 @@ public class CustomRulesDialog extends BaseDialog{
                 current = c;
                 TeamRule teams = rules.teams.get(team);
 
+                check("@rules.cheat", b -> teams.cheat = b, () -> teams.cheat);
+                check("@rules.infiniteAmmo",b -> teams.infiniteAmmo = b, () -> teams.infiniteAmmo);
+                check("@rules.aiCoreSpawn", b -> teams.aiCoreSpawn = b, () -> teams.aiCoreSpawn);
+
                 number("@rules.blockhealthmultiplier", f -> teams.blockHealthMultiplier = f, () -> teams.blockHealthMultiplier);
                 number("@rules.blockdamagemultiplier", f -> teams.blockDamageMultiplier = f, () -> teams.blockDamageMultiplier);
 
@@ -401,6 +467,32 @@ public class CustomRulesDialog extends BaseDialog{
             }, () -> shown[0]).left().growX().row();
         }
 
+        check("自定义背景[lightgray](需要设置空地板)", t -> {
+            rules.planetBackground = t ? new PlanetParams(){{planet = Planets.sun;zoom=1f;camPos = new Vec3(1.2388899f, 1.6047299f, 2.4758825f);}} : null;
+            setup();
+        }, () -> rules.planetBackground != null);
+        if (rules.planetBackground != null){
+            current.table(Tex.button, t -> {
+                t.margin(10f);
+                var group = new ButtonGroup<>();
+                var style = Styles.flatTogglet;
+
+                t.defaults().size(140f, 50f);
+
+                for(Planet planet : content.planets()){
+                    t.button(planet.localizedName, style, () -> rules.planetBackground.planet = planet).group(group).checked(b -> rules.planetBackground.planet == planet);
+                    if(t.getChildren().size % 3 == 0){
+                        t.row();
+                    }
+                }
+            }).left().fill(false).expand(false, false).row();
+            number("放缩", f -> rules.planetBackground.zoom = f, () -> rules.planetBackground.zoom, 0.0001f, 999);
+            number("位置x", f -> rules.planetBackground.camPos.x = f, () -> rules.planetBackground.camPos.x);
+            number("位置y", f -> rules.planetBackground.camPos.y = f, () -> rules.planetBackground.camPos.y);
+            number("位置z", f -> rules.planetBackground.camPos.z = f, () -> rules.planetBackground.camPos.z);
+        }
+
+
         additionalSetup.each(Runnable::run);
 
         for(var i = 0; i < categories.size; i++){
@@ -435,6 +527,7 @@ public class CustomRulesDialog extends BaseDialog{
                     cons.get(team);
                 }).pad(1f).checked(b -> prov.get() == team).size(60f).tooltip(team.coloredName()).with(i -> i.getStyle().imageUpColor = team.color);
             }
+            t.button(Icon.add, Styles.squareTogglei, 38f, () -> UIExt.teamSelect.pickOne(cons, prov.get())).pad(1f).checked(b -> !Seq.with(Team.baseTeams).contains(prov.get())).size(60f).tooltip("[acid]更多队伍选择");
         }).padTop(0).row();
     }
 
@@ -467,7 +560,7 @@ public class CustomRulesDialog extends BaseDialog{
             t.field((prov.get()) + "", s -> cons.get(Strings.parseInt(s)))
                 .update(a -> a.setDisabled(!condition.get()))
                 .padRight(100f)
-                .valid(f -> Strings.parseInt(f) >= min && Strings.parseInt(f) <= max).width(120f).left();
+                .valid(f -> Strings.parseInt(f) >= -999999 && Strings.parseInt(f) <= 999999999).width(120f).left();
         }).padTop(0).row();
     }
 
@@ -480,7 +573,8 @@ public class CustomRulesDialog extends BaseDialog{
             t.field((integer ? (int)prov.get() : prov.get()) + "", s -> cons.get(Strings.parseFloat(s)))
             .padRight(100f)
             .update(a -> a.setDisabled(!condition.get()))
-            .valid(f -> Strings.canParsePositiveFloat(f) && Strings.parseFloat(f) >= min && Strings.parseFloat(f) <= max).width(120f).left();
+            //.valid(f -> Strings.canParsePositiveFloat(f) && Strings.parseFloat(f) >= min && Strings.parseFloat(f) <= max).width(120f).left();
+            .valid(f ->  Strings.canParsePositiveFloat(f)).width(120f).left();
         }).padTop(0);
         current.row();
     }
diff --git a/core/src/mindustry/ui/dialogs/DatabaseDialog.java b/core/src/mindustry/ui/dialogs/DatabaseDialog.java
index efc8530fbdb5837cb14d4a0e80de8e8ffbdac588..07567778b10e34f9f3a4b6705444746118bc437c 100644
--- a/core/src/mindustry/ui/dialogs/DatabaseDialog.java
+++ b/core/src/mindustry/ui/dialogs/DatabaseDialog.java
@@ -20,8 +20,8 @@ import mindustry.ui.*;
 import mindustry.world.*;
 import mindustryX.features.*;
 
-import static arc.Core.*;
 import static mindustry.Vars.*;
+import static mindustryX.features.ArcOld.colorizeContent;
 
 public class DatabaseDialog extends BaseDialog{
     private TextField search;
@@ -58,6 +58,7 @@ public class DatabaseDialog extends BaseDialog{
         }).fillX().padBottom(4).row();
 
         cont.pane(all).scrollX(false);
+        colorizeContent();
     }
 
     void checkTabList(){
@@ -150,7 +151,7 @@ public class DatabaseDialog extends BaseDialog{
                                 ui.content.show(unlock);
                             }
                         });
-                        image.addListener(new Tooltip(t -> t.background(Tex.button).add(unlock.localizedName + (settings.getBool("console") ? "\n[gray]" + unlock.name : ""))));
+                        image.addListener(new Tooltip(t -> t.background(Tex.button).add(unlock.localizedName + "\n[gray]" + unlock.name + (logicVars.lookupLogicId(unlock) != -1 ? " <#" + logicVars.lookupLogicId(unlock) +">": ""))));
                     }
 
                     if((++count) % cols == 0){
diff --git a/core/src/mindustry/ui/dialogs/PausedDialog.java b/core/src/mindustry/ui/dialogs/PausedDialog.java
index 677b3d53ed8c1614e0b802d6712e5d4b219e7bea..cec75cca43ea5852d2427ae6b6ba230d9c8fb71e 100644
--- a/core/src/mindustry/ui/dialogs/PausedDialog.java
+++ b/core/src/mindustry/ui/dialogs/PausedDialog.java
@@ -62,7 +62,7 @@ public class PausedDialog extends BaseDialog{
             cont.button("@back", Icon.left, this::hide).name("back");
             cont.button("@settings", Icon.settings, ui.settings::show).name("settings");
 
-            if(!state.isCampaign() && !state.isEditor()){
+            if(Core.settings.getBool("save_more_map") || (!state.isCampaign() && !state.isEditor())){
                 cont.row();
                 cont.button("@savegame", Icon.save, save::show);
                 cont.button("@loadgame", Icon.upload, load::show).disabled(b -> net.active());
@@ -89,6 +89,10 @@ public class PausedDialog extends BaseDialog{
 
             cont.row();
 
+            cont.button("@joingame", Icon.host, () -> {
+                this.hide();
+                ui.join.show();
+            });
             cont.button("@quit", Icon.exit, this::showQuitConfirm).colspan(2).width(dw + 10f).update(s -> s.setText(control.saves.getCurrent() != null && control.saves.getCurrent().isAutosave() ? "@save.quit" : "@quit"));
 
         }else{
@@ -121,6 +125,12 @@ public class PausedDialog extends BaseDialog{
                 s.setText(control.saves.getCurrent() != null && control.saves.getCurrent().isAutosave() ? "@save.quit" : "@quit");
                 s.getLabelCell().growX().wrap();
             });
+
+            if(mobile){
+                cont.row();
+                int columns = cont.getColumns();
+                cont.button("@database", Icon.book, ui.database::show).colspan(columns).size(Float.NEGATIVE_INFINITY, 60).fillX();
+            }
         }
     }
 
diff --git a/core/src/mindustry/ui/dialogs/PlanetDialog.java b/core/src/mindustry/ui/dialogs/PlanetDialog.java
index 6ef9bb6397a1f91c554e658aea179e312678649b..4d73111b10a23a711154365ee44a56c4a16a65e8 100644
--- a/core/src/mindustry/ui/dialogs/PlanetDialog.java
+++ b/core/src/mindustry/ui/dialogs/PlanetDialog.java
@@ -36,6 +36,8 @@ import mindustry.type.*;
 import mindustry.ui.*;
 import mindustry.world.blocks.storage.*;
 import mindustry.world.blocks.storage.CoreBlock.*;
+import mindustryX.features.*;
+import mindustryX.features.func.*;
 
 import static arc.Core.*;
 import static mindustry.Vars.*;
@@ -68,9 +70,13 @@ public class PlanetDialog extends BaseDialog implements PlanetInterfaceRenderer{
 
     private Texture[] planetTextures;
 
+    private boolean alwaysShowName = false;
+
+    private int viewInt = 60;
+
     public PlanetDialog(){
         super("", Styles.fullDialog);
-        
+
         state.renderer = this;
         state.drawUi = true;
 
@@ -284,6 +290,13 @@ public class PlanetDialog extends BaseDialog implements PlanetInterfaceRenderer{
             buttons.add().growX();
             buttons.add(sectorTop).minWidth(230f);
             buttons.add().growX();
+            buttons.button("显示周期", Icon.settings, () -> {
+                if(viewInt == 1) viewInt = 60;
+                else if(viewInt == 60) viewInt = 120;
+                else viewInt = 1;
+                UIExt.announce("调整资源输入|输出显示周期为 [orange]" + viewInterval(viewInt));
+            }).size(100f, 54f).pad(2).bottom();
+            buttons.button("区块名称", Icon.bookOpen, () -> alwaysShowName = !alwaysShowName).size(100f, 54f).pad(2).bottom();
             addTech();
         }
     }
@@ -520,6 +533,11 @@ public class PlanetDialog extends BaseDialog implements PlanetInterfaceRenderer{
                         Draw.rect(icon, 0, 0, iw, iw * icon.height / icon.width);
                     });
                 }
+                planets.drawPlane(sec, () -> {
+                    if((canSelect(sec) || sec.hasBase()) && alwaysShowName){
+                        FuncX.drawText(Vec2.ZERO, (sec.preset != null ? "" : "[gray]") + sec.name(), Scl.scl(2));
+                    }
+                });
             }
         }
 
@@ -661,7 +679,7 @@ public class PlanetDialog extends BaseDialog implements PlanetInterfaceRenderer{
 
             //sector notifications & search
             c.top().right();
-            c.defaults().width(290f);
+            c.defaults().width(350f);
 
             c.button(bundle.get("sectorlist") +
             (attacked == 0 ? "" : "\n[red]⚠[lightgray] " + bundle.format("sectorlist.attacked", "[red]" + attacked + "[]")),
@@ -705,7 +723,7 @@ public class PlanetDialog extends BaseDialog implements PlanetInterfaceRenderer{
 
             readd[0] = () -> {
                 con.clearChildren();
-                for(Sector sec : all){
+                for(Sector sec : all.copy().sort(sector -> sector.info.production.size)){
                     if(sec.hasBase() && (searchText.isEmpty() || sec.name().toLowerCase().contains(searchText.toLowerCase()))){
                         con.button(t -> {
                             t.marginRight(10f);
@@ -724,6 +742,19 @@ public class PlanetDialog extends BaseDialog implements PlanetInterfaceRenderer{
                                 String ic = sec.iconChar() == null ? "" : sec.iconChar() + " ";
 
                                 head.add(ic + sec.name()).growX().wrap();
+
+                                if(!mobile && !sec.info.export.isEmpty() && sec.info.destination != null && sec.info.destination.hasBase()){
+                                    String des = sec.info.destination.iconChar();
+                                    String text = Iconc.rightOpen + " " + (des == null || des.isEmpty() ? "" : des + " ") + sec.info.destination.name();
+                                    head.button(text, Styles.cleart, () -> {
+                                        ui.planet.showSelect(sec, other -> {
+                                            if(other.planet == sec.planet){
+                                                sec.info.destination = other;
+                                            }
+                                        });
+                                    }).minWidth(150f).right().padRight(10f);
+                                }
+
                             }).growX().row();
 
                             if(sec.isAttacked()){
@@ -762,7 +793,7 @@ public class PlanetDialog extends BaseDialog implements PlanetInterfaceRenderer{
             buffer.end();
 
             Draw.color(color);
-            Draw.rect(Draw.wrap(buffer.getTexture()), width/2f, height/2f, width, -height);
+            Draw.rect(Draw.wrap(buffer.getTexture()), width / 2f, height / 2f, width, -height);
             Draw.color();
         }
     }
@@ -866,14 +897,15 @@ public class PlanetDialog extends BaseDialog implements PlanetInterfaceRenderer{
         Table t = new Table().left();
 
         int i = 0;
+        int rowSet = settings.getInt("itemSelectionWidth");
         for(var item : content.items()){
             var stat = stats.get(item);
             if(stat == null) continue;
-            int total = (int)(stat.mean * 60 * scl);
-            if(total > 1){
+            int total = (int)(stat.mean * viewInt * scl);
+            if(total != 0){
                 t.image(item.uiIcon).padRight(3);
-                t.add(UI.formatAmount(total) + " " + Core.bundle.get("unit.perminute")).color(Color.lightGray).padRight(3);
-                if(++i % 3 == 0){
+                t.add(UI.formatAmount(total)).color(Color.lightGray).padRight(3);
+                if(++i % rowSet == 0){
                     t.row();
                 }
             }
@@ -881,7 +913,11 @@ public class PlanetDialog extends BaseDialog implements PlanetInterfaceRenderer{
 
         if(t.getChildren().any()){
             c.defaults().left();
-            c.add(name).row();
+            c.table(label -> {
+                label.add(name).color(Pal.accent);
+                label.add("(" + viewInterval(viewInt) + ")").color(Pal.accent);
+            }).center().row();
+            c.image().color(Pal.accent).fillX().row();
             builder.get(c);
             c.add(t).padLeft(10f).row();
         }
@@ -908,7 +944,8 @@ public class PlanetDialog extends BaseDialog implements PlanetInterfaceRenderer{
             }
 
             if(sector.save != null && sector.info.resources.any()){
-                c.add("@sectors.resources").left().row();
+                c.add("@sectors.resources").color(Pal.accent).center().row();
+                c.image().color(Pal.accent).fillX().row();
                 c.table(t -> {
                     for(UnlockableContent uc : sector.info.resources){
                         if(uc == null) continue;
@@ -943,7 +980,8 @@ public class PlanetDialog extends BaseDialog implements PlanetInterfaceRenderer{
             //stored resources
             if(sector.hasBase() && items.total > 0){
 
-                c.add("@sectors.stored").left().row();
+                c.add("@sectors.stored").color(Pal.accent).center().row();
+                c.image().color(Pal.accent).fillX().row();
                 c.table(t -> {
                     t.left();
 
@@ -953,7 +991,7 @@ public class PlanetDialog extends BaseDialog implements PlanetInterfaceRenderer{
                         for(ItemStack stack : items){
                             res.image(stack.item.uiIcon).padRight(3);
                             res.add(UI.formatAmount(Math.max(stack.amount, 0))).color(Color.lightGray);
-                            if(++i % 4 == 0){
+                            if(++i % settings.getInt("itemSelectionWidth") == 0){
                                 res.row();
                             }
                         }
@@ -1205,6 +1243,7 @@ public class PlanetDialog extends BaseDialog implements PlanetInterfaceRenderer{
 
                     return;
                 }
+                if(attacked != sector && settings.getBool("forceIgnoreAttack")) ui.showInfo("[red]警告：你的一个区块正在遭受攻击。[white]\n但你使用了学术端的作弊功能来强行切换区块，这可能导致未知问题！");
             }
         }
 
@@ -1287,6 +1326,13 @@ public class PlanetDialog extends BaseDialog implements PlanetInterfaceRenderer{
         if(shouldHide) hide();
     }
 
+    private String viewInterval(int viewInt){
+        if(viewInt == 60) return "每分";
+        else if(viewInt == 120) return "每周期";
+        else if(viewInt == 1) return "每秒";
+        else return "每" + viewInt + "秒";
+    }
+
     public enum Mode{
         /** Look around for existing sectors. Can only deploy. */
         look,
diff --git a/core/src/mindustry/ui/dialogs/SchematicsDialog.java b/core/src/mindustry/ui/dialogs/SchematicsDialog.java
index 5095be6c1d92f1049829b96a34efabb9854f0e55..a2b042e22e9e31d0882ffb4949393d38e46a2f89 100644
--- a/core/src/mindustry/ui/dialogs/SchematicsDialog.java
+++ b/core/src/mindustry/ui/dialogs/SchematicsDialog.java
@@ -15,6 +15,12 @@ import arc.scene.ui.layout.*;
 import arc.scene.utils.*;
 import arc.struct.*;
 import arc.util.*;
+import mindustryX.features.PicToMindustry;
+import mindustry.core.*;
+import mindustryX.features.ui.ArcMessageDialog;
+import mindustry.content.Blocks;
+import mindustry.content.Planets;
+import mindustry.content.UnitTypes;
 import mindustry.ctype.*;
 import mindustry.game.*;
 import mindustry.gen.*;
@@ -22,10 +28,15 @@ import mindustry.graphics.*;
 import mindustry.input.*;
 import mindustry.type.*;
 import mindustry.ui.*;
+import mindustry.world.Block;
+import mindustry.world.blocks.production.GenericCrafter;
+import mindustry.world.meta.StatUnit;
+import mindustryX.features.*;
 
 import java.util.regex.*;
 
 import static mindustry.Vars.*;
+import static mindustry.content.Items.*;
 
 public class SchematicsDialog extends BaseDialog{
     private static final float tagh = 42f;
@@ -37,9 +48,26 @@ public class SchematicsDialog extends BaseDialog{
     private Pattern ignoreSymbols = Pattern.compile("[`~!@#$%^&*()\\-_=+{}|;:'\",<.>/?]");
     private Seq<String> tags, selectedTags = new Seq<>();
     private boolean checkedTags;
+    private String blueprintlink = "https://docs.qq.com/sheet/DVHNoS3lIcm1NbFFS";
+
+    private String surpuloTags = UnitTypes.gamma.emoji(), erekirTags = UnitTypes.emanate.emoji();
+    private  Seq<String> planetTags = new Seq<String>().add(surpuloTags,erekirTags);
+
+    private boolean clipbroad = true;
+    private boolean fromShare = false;
 
     public SchematicsDialog(){
         super("@schematics");
+        Events.on(EventType.WorldLoadEvent.class, event -> {
+            selectedTags.remove(erekirTags);
+            selectedTags.remove(surpuloTags);
+            if(state.rules.planet == Planets.serpulo){
+                selectedTags.add(surpuloTags);
+            }else if(state.rules.planet == Planets.erekir){
+                selectedTags.add(erekirTags);
+            }
+        });
+
         Core.assets.load("sprites/schematic-background.png", Texture.class).loaded = t -> t.setWrap(TextureWrap.repeat);
 
         tags = Core.settings.getJson("schematic-tags", Seq.class, String.class, Seq::new);
@@ -47,6 +75,14 @@ public class SchematicsDialog extends BaseDialog{
         shouldPause = true;
         addCloseButton();
         buttons.button("@schematic.import", Icon.download, this::showImport);
+        if (mobile) buttons.row();
+        buttons.button("[cyan]蓝图档案馆", Icon.link, () -> {
+            if(!Core.app.openURI(blueprintlink)){
+                ui.showErrorMessage("@linkfail");
+                Core.app.setClipboardText(blueprintlink);
+            }
+        });
+        buttons.button("[violet]转换器[white] " + Blocks.canvas.emoji() + Blocks.logicDisplay.emoji() + Blocks.sorter.emoji(), Icon.image, PicToMindustry::show);
         makeButtonOverlay();
         shown(this::setup);
         onResize(this::setup);
@@ -103,6 +139,34 @@ public class SchematicsDialog extends BaseDialog{
             in.button(Icon.pencilSmall, this::showAllTags).size(tagh).pad(2).tooltip("@schematic.edittags");
         }).height(tagh).fillX();
 
+        cont.row().table(in -> {
+            in.left();
+            in.add("科技树：").padRight(4);
+            for(var tag : planetTags){
+                in.button(tag, Styles.togglet, () -> {
+                    if(selectedTags.contains(tag)){
+                        selectedTags.remove(tag);
+                    }else{
+                        selectedTags.add(tag);
+                    }
+                    rebuildPane.run();
+                }).checked(selectedTags.contains(tag)).with(c -> c.getLabel().setWrap(false));
+            }
+            in.button(Icon.refreshSmall, this::syncPlanetTags).size(tagh).pad(2).tooltip("刷新分类");
+
+            in.add("辅助筛选：").padLeft(20f).padRight(4);
+            in.button(copper.emoji(), Styles.togglet, () -> {
+                Core.settings.put("arcSchematicCanBuild", !Core.settings.getBool("arcSchematicCanBuild"));
+                rebuildPane.run();
+            }).size(tagh).pad(2).tooltip("可建造(核心有此类资源+地图未禁用)").checked(t -> Core.settings.getBool("arcSchematicCanBuild"));
+            in.add("蓝图包含：").padLeft(20f).padRight(4);
+            in.button(control.input.block == null ? "[red]\uE815" : control.input.block.emoji(), Styles.togglet, () -> {
+                if(control.input.block == null) return;
+                Core.settings.put("autoSelSchematic", !Core.settings.getBool("autoSelSchematic"));
+                rebuildPane.run();
+            }).size(tagh).pad(2).tooltip("蓝图需包含此建筑").checked(t -> control.input.block != null && Core.settings.getBool("autoSelSchematic"));
+        }).height(tagh).fillX();
+
         cont.row();
 
         cont.pane(t -> {
@@ -133,6 +197,9 @@ public class SchematicsDialog extends BaseDialog{
                     if(selectedTags.any() && !s.labels.containsAll(selectedTags)) continue;
                     //make sure search fits
                     if(!search.isEmpty() && !ignoreSymbols.matcher(s.name().toLowerCase()).replaceAll("").contains(searchString)) continue;
+
+                    if(Core.settings.getBool("autoSelSchematic") && control.input.block != null && !s.containsBlock(control.input.block)) continue;
+                    if(Core.settings.getBool("arcSchematicCanBuild") && !arcSchematicCanBuild(s)) continue;
                     if(firstSchematic == null) firstSchematic = s;
 
                     Button[] sel = {null};
@@ -205,6 +272,11 @@ public class SchematicsDialog extends BaseDialog{
 
             rebuildPane.run();
         }).grow().scrollX(false);
+
+        if(Core.settings.getBool("autoSelSchematic") && control.input.block!=null){
+            String text = "[orange]蓝图筛选模式[white]:蓝图必须包含 "+control.input.block.emoji();
+            UIExt.announce(text, 5f);
+        }
     }
 
     public void showInfo(Schematic schematic){
@@ -275,15 +347,48 @@ public class SchematicsDialog extends BaseDialog{
                     t.row();
                     dialog.hide();
                 }
-                t.button("@schematic.copy", Icon.copy, style, () -> {
+                t.button("@schematic.exportfile", Icon.export, style, () -> {
                     dialog.hide();
-                    ui.showInfoFade("@copied");
-                    Core.app.setClipboardText(schematics.writeBase64(s));
+                    platform.export(s.name(), schematicExtension, file -> Schematics.write(s, file));
                 }).marginLeft(12f);
                 t.row();
-                t.button("@schematic.exportfile", Icon.export, style, () -> {
+                t.button("[cyan]剪贴板[white]/[gray]消息框", Icon.copy, style, () -> {
+                    clipbroad = !clipbroad;
+                }).marginLeft(12f).update(button -> button.setText(clipbroad? "[cyan]剪贴板[white]/[gray]消息框" : "[gray]剪贴板[white]/[cyan]消息框"));
+                t.row();
+
+                t.button("蓝图代码", Icon.copy, style, () -> {
+                    dialog.hide();
+                    arcSendBlueprintMsg(schematics.writeBase64(s));
+                }).marginLeft(12f);
+                t.row();
+                t.button("记录蓝图[cyan][简]", Icon.export, style, () -> {
+                    dialog.hide();
+                    arcSendBlueprintMsg(arcSchematicsInfo(s,false));
+                }).marginLeft(12f);
+                t.row();
+                t.button("记录蓝图[cyan][详]", Icon.export, style, () -> {
+                    dialog.hide();
+                    arcSendBlueprintMsg(arcSchematicsInfo(s,true));
+                }).marginLeft(12f);
+                t.row();
+                t.button("分享蓝图", Icon.export, style, () -> {
+                    try {
+                        Http.HttpRequest req = Http.post("https://pastebin.com/api/api_post.php", "api_dev_key=sdBDjI5mWBnHl9vBEDMNiYQ3IZe0LFEk&api_option=paste&api_paste_expire_date=10M&api_paste_code=" + schematics.writeBase64(s));
+                        req.submit(r -> {
+                            String code = r.getResultAsString();
+                            if (clipbroad) arcSendClipBroadMsg(s, code);
+                            //添加颜色字符，保持ARC兼容性
+                            else ArcMessageDialog.share("[blue]<Schem>[]", " " + code.substring(code.lastIndexOf('/') + 1));
+                        });
+                        req.error(e -> Core.app.post(() -> {
+                            ui.showException("分享失败", e);
+                            if(clipbroad) arcSendClipBroadMsg(s, "x");
+                        }));
+                    } catch (Exception e) {
+                        ui.showException("分享失败", e);
+                    }
                     dialog.hide();
-                    platform.export(s.name(), schematicExtension, file -> Schematics.write(s, file));
                 }).marginLeft(12f);
             });
         });
@@ -292,6 +397,85 @@ public class SchematicsDialog extends BaseDialog{
         dialog.show();
     }
 
+    private void arcSendBlueprintMsg(String msg){
+        if(clipbroad){
+            Core.app.setClipboardText(msg);
+            UIExt.announce("已保存至剪贴板");
+        }else{
+            UIExt.sendChatMessage(msg);
+            UIExt.announce("已发送到聊天框");
+        }
+    }
+
+    private void arcSendClipBroadMsg(Schematic schem, String msg){
+        StringBuilder s = new StringBuilder();
+        s.append("这是一条来自 MDTX-").append(Version.mdtXBuild).append("的分享记录\n");
+        s.append("分享者：").append(player.name).append("\n");
+        s.append("蓝图代码链接：").append(msg).append("\n");
+        s.append("蓝图名：").append(schem.name()).append("\n");
+        s.append("蓝图造价：");
+        ItemSeq arr = schem.requirements();
+        for(ItemStack stack : arr){
+            s.append(stack.item.localizedName).append(stack.amount).append("|");
+        }
+        s.append("\n").append("电力：");
+        float cons = schem.powerConsumption() * 60, prod = schem.powerProduction() * 60;
+        if(!Mathf.zero(prod)){
+            s.append("+").append(Strings.autoFixed(prod, 2));
+            if(!Mathf.zero(cons)){
+                s.append("|");
+            }
+        }
+        if(!Mathf.zero(cons)){
+            s.append("-").append(Strings.autoFixed(cons, 2));
+        }
+        if (schematics.writeBase64(schem).length() > 3500) s.append("\n").append("蓝图代码过长，请点击链接查看");
+        else s.append("\n").append("蓝图代码：\n").append(schematics.writeBase64(schem));
+        Core.app.setClipboardText(Strings.stripColors(s.toString()));
+        UIExt.announce("已保存至剪贴板");
+    }
+
+    public void readShare(String base64, @Nullable Player sender) {
+        Core.app.post(() -> {
+            try {
+                Schematic s = Schematics.readBase64(base64);
+                s.removeSteamID();
+                s.tags.put("name", sender == null ? "来自服务器的蓝图" : "来自" + sender.plainName() + "的蓝图");
+                fromShare = true;
+                SchematicsDialog.this.showInfo(s);
+            } catch(Throwable e) {
+                ui.showException(e);
+            }
+        });
+    }
+
+    private String arcSchematicsInfo(Schematic schem, boolean description){
+        StringBuilder builder = new StringBuilder("标记了蓝图[" + schem.name() + "]。");
+        builder.append("属性：").append(schem.width).append("x").append(schem.height).append("，").append(schem.tiles.size).append("个建筑。");
+        if(description){
+            builder.append("耗材：");
+            ItemSeq arr = schem.requirements();
+            for(ItemStack s : arr){
+                builder.append(s.item.emoji()).append(s.amount).append("|");
+            }
+
+            builder.append("。电力：");
+            cont.row();
+            float cons = schem.powerConsumption() * 60, prod = schem.powerProduction() * 60;
+            if(!Mathf.zero(prod)){
+                builder.append("+").append(Strings.autoFixed(prod, 2));
+                if(!Mathf.zero(cons)){
+                    builder.append("|");
+                }
+            }
+            if(!Mathf.zero(cons)){
+                builder.append("-").append(Strings.autoFixed(cons, 2));
+            }
+        }
+        return builder.toString();
+    }
+
+
     public void showEdit(Schematic s){
         new BaseDialog("@schematic.edit"){{
             setFillParent(true);
@@ -572,6 +756,11 @@ public class SchematicsDialog extends BaseDialog{
                     t.button("@schematic.texttag", Icon.add, () -> showNewTag(res -> rebuild[0].run())).wrapLabel(false).get().getLabelCell().padLeft(5);
                     t.button("@schematic.icontag", Icon.add, () -> showNewIconTag(res -> rebuild[0].run())).wrapLabel(false).get().getLabelCell().padLeft(5);
                 });
+                p.row();
+                p.table(t ->{
+                    t.left().defaults().fillX().height(tagh).pad(2);
+                    t.button("自动标签", Icon.add, () -> arcAutoTags(res -> rebuild[0].run())).wrapLabel(false).get().getLabelCell().padLeft(5);
+                });
 
             };
 
@@ -580,6 +769,135 @@ public class SchematicsDialog extends BaseDialog{
         dialog.show();
     }
 
+    void arcAutoTags(Cons<String> cons){
+        new Dialog(){{
+            closeOnBack();
+            setFillParent(true);
+
+            cont.pane(t -> {
+                resized(true, () -> {
+                    t.clearChildren();
+                    t.marginRight(19f);
+                    t.defaults().size(48f);
+
+                    int cols = (int)Math.min(20, Core.graphics.getWidth() / Scl.scl(52f));
+
+                    for(ContentType ctype : defaultContentIcons){
+                        t.row();
+                        t.image().colspan(cols).growX().width(Float.NEGATIVE_INFINITY).height(3f).color(Pal.accent);
+                        t.row();
+
+                        int i = 0;
+                        for(UnlockableContent u : content.getBy(ctype).<UnlockableContent>as()){
+                            if(!u.isHidden() && u.unlockedNow() && u.hasEmoji() && !tags.contains(u.emoji())){
+                                t.button(new TextureRegionDrawable(u.uiIcon), Styles.flati, iconMed, () -> {
+                                    String out = u.emoji() + "";
+
+                                    tags.add(out);
+                                    tagsChanged();
+
+                                    if(u instanceof Block block){
+                                        for(Schematic s : schematics.all()){
+                                            s.tiles.each(sBlock -> {
+                                                if(sBlock.block == block){
+                                                    addTag(s,out);
+                                                    cons.get(out);
+                                                    hide();
+                                                }
+                                            });
+                                        }
+                                    }
+                                    else if(u instanceof Item item){
+                                        Seq<Block> blocklist = new Seq<>();
+                                        for (Block factory : content.blocks()) {
+                                            if(factory instanceof GenericCrafter crafter){
+                                                if(crafter.outputItems == null) continue;
+                                                for(ItemStack stack:crafter.outputItems){
+                                                if (stack.item == item) blocklist.add(factory);
+                                                }
+                                            }
+                                        }
+                                        for(Schematic s : schematics.all()){
+                                            s.tiles.each(sBlock -> {
+                                                if(blocklist.contains(sBlock.block)){
+                                                    addTag(s,out);
+                                                    cons.get(out);
+                                                    hide();
+                                                }
+                                            });
+                                        }
+                                    }
+                                    else if(u instanceof Liquid liquid){
+                                        Seq<Block> blocklist = new Seq<>();
+                                        for (Block factory : content.blocks()) {
+                                            if(factory instanceof GenericCrafter crafter){
+                                                if(crafter.outputLiquids==null) continue;
+                                                for(LiquidStack stack: crafter.outputLiquids){
+                                                    if (stack.liquid == liquid) blocklist.add(factory);
+                                                }
+                                            }
+                                        }
+                                        for(Schematic s : schematics.all()){
+                                            s.tiles.each(sBlock -> {
+                                                if(blocklist.contains(sBlock.block)){
+                                                    addTag(s,out);
+                                                    cons.get(out);
+                                                    hide();
+                                                }
+                                            });
+                                        }
+                                    }
+
+
+                                    cons.get(out);
+
+                                    hide();
+                                });
+
+                                if(++i % cols == 0) t.row();
+                            }
+                        }
+                    }
+                });
+            });
+            buttons.button("@back", Icon.left, this::hide).size(210f, 64f);
+        }}.show();
+    }
+
+    void syncPlanetTags(){
+        UIExt.announce("标签自动分类中...请稍后");
+        for(Schematic s : schematics.all()){
+            Boolean surpulo = true;
+            Boolean erekir = true;
+            for (Item item:erekirOnlyItems){
+                if(s.requirements().has(item)) {
+                    surpulo = false;
+                    break;
+                }
+            }
+            for(Item item : serpuloItems.copy().removeAll(erekirItems::contains)){
+                if(s.requirements().has(item)) {
+                    erekir = false;
+                    break;
+                }
+            }
+
+            if(surpulo && !s.labels.contains(surpuloTags)) addTag(s,surpuloTags);
+            if(erekir && !s.labels.contains(erekirTags)) addTag(s,erekirTags);
+        }
+        UIExt.announce("标签分类完成");
+    }
+
+    boolean arcSchematicCanBuild(Schematic s){
+        for (ItemStack item : s.requirements()){
+            if (!ui.hudfrag.coreItems.hadItem(item.item)) return false;
+        }
+        for (Block block: state.rules.bannedBlocks){
+            if (s.containsBlock(block)) return false;
+        }
+        return true;
+    }
+
     void buildTags(Schematic schem, Table t){
         buildTags(schem, t, true);
     }
@@ -793,13 +1111,44 @@ public class SchematicsDialog extends BaseDialog{
                     }
                 });
             }
+            cont.row();
 
+            schem.calProduction();
+            cont.table(r -> {
+                int i = 0;
+                for(Item item : schem.items.keys()){
+                    r.image(item.uiIcon).left().size(iconMed);
+                    r.label(
+                            () -> (schem.items.get(item, 0) > 0 ? "+" : "") + Strings.autoFixed(schem.items.get(item, 0), 2) + StatUnit.perSecond.localized()
+                    ).padLeft(2).left().padRight(5).color(Color.lightGray);
+                    if(++i % 4 == 0){
+                        r.row();
+                    }
+                }
+                for (Liquid liquid : schem.liquids.keys()) {
+                    r.image(liquid.uiIcon).left().size(iconMed);
+                    r.label(
+                            () -> (schem.liquids.get(liquid, 0) > 0 ? "+" : "") + Strings.autoFixed(schem.liquids.get(liquid, 0), 2) + StatUnit.perSecond.localized()
+                    ).padLeft(2).left().padRight(5).color(Color.lightGray);
+                    if(++i % 4 == 0){
+                        r.row();
+                    }
+                }
+            });
             buttons.clearChildren();
             buttons.defaults().size(Core.graphics.isPortrait() ? 150f : 210f, 64f);
             buttons.button("@back", Icon.left, this::hide);
             buttons.button("@editor.export", Icon.upload, () -> showExport(schem));
             buttons.button("@edit", Icon.edit, () -> showEdit(schem));
-
+            if (fromShare) {
+                fromShare = false;
+                buttons.button("@save", Icon.save, () -> {
+                    schematics.add(schem);
+                    setup();
+                    ui.showInfoFade("@schematic.saved");
+                    checkTags(schem);
+                });
+            }
             show();
         }
     }
diff --git a/core/src/mindustry/ui/fragments/ChatFragment.java b/core/src/mindustry/ui/fragments/ChatFragment.java
index 89b9a23ce2bb850df5c7ae99a5f964753a807662..03bbbbfca69229893fc097479f4078843ea0c56d 100644
--- a/core/src/mindustry/ui/fragments/ChatFragment.java
+++ b/core/src/mindustry/ui/fragments/ChatFragment.java
@@ -163,7 +163,10 @@ public class ChatFragment extends Table{
         Draw.alpha(shadowColor.a * opacity);
 
         float theight = offsety + spacing + getMarginBottom() + scene.marginBottom;
-        for(int i = scrollPos; i < messages.size && i < messagesShown + scrollPos && (i < fadetime || shown); i++){
+        int messageCount = 0;
+        for(int i = scrollPos; i < messages.size && messageCount < messagesShown && (i < fadetime || shown); i++){
+            if(!chatValidType(messages.get(i))) continue;
+            messageCount += 1;
 
             layout.setText(font, messages.get(i), Color.white, textWidth, Align.bottomLeft, true);
             theight += layout.height + textspacing;
@@ -194,6 +197,17 @@ public class ChatFragment extends Table{
         }
     }
 
+    private boolean chatValidType(String msg){
+        int chatType = settings.getInt("chatValidType");
+        if(chatType == 0 && (msg.contains("[acid][公屏][white]") || msg.contains("[逻辑~"))) return false;
+        else if(chatType == 1 &&
+        (msg.contains("加入了服务器") || msg.contains("离开了服务器") || msg.contains("小贴士") || msg.contains("自动存档完成") ||
+        msg.contains("登录成功") || msg.contains("经验+") || msg.contains("[ARC")
+        || (msg.contains("[acid][公屏][white]")) || msg.contains("[逻辑~"))) return false;
+        else if(chatType == 2 && !(msg.contains("[acid][公屏][white]") || msg.contains("[逻辑~"))) return false;
+        return true;
+    }
+
     private void sendMessage(){
         String message = chatfield.getText().trim();
         clearChatInput();
@@ -216,6 +230,8 @@ public class ChatFragment extends Table{
             if(mobile){
                 TextInput input = new TextInput();
                 input.maxLength = maxTextLength;
+                //MDTX mobile chatField support (from ARC)
+                input.text = chatfield.getText() + " ";
                 input.accepted = text -> {
                     chatfield.setText(text);
                     sendMessage();
@@ -245,7 +261,12 @@ public class ChatFragment extends Table{
     }
 
     public void updateChat(){
-        chatfield.setText(mode.normalizedPrefix() + history.get(historyPos));
+        //MDTX: better prefix handle (from ARC)
+        if(history.get(historyPos).contains(mode.normalizedPrefix())){
+            chatfield.setText(history.get(historyPos));
+        }else{
+            chatfield.setText(mode.normalizedPrefix() + history.get(historyPos));
+        }
         updateCursor();
     }
 
diff --git a/core/src/mindustry/ui/fragments/ConsoleFragment.java b/core/src/mindustry/ui/fragments/ConsoleFragment.java
index e74e6a12e3da57eb58598eb4e679a7990c109def..013255ce5aa828d538814fa25dc64c6a56bf9136 100644
--- a/core/src/mindustry/ui/fragments/ConsoleFragment.java
+++ b/core/src/mindustry/ui/fragments/ConsoleFragment.java
@@ -12,9 +12,11 @@ import arc.scene.ui.TextField.*;
 import arc.scene.ui.layout.*;
 import arc.struct.*;
 import arc.util.*;
+import mindustryX.features.ui.ArcMessageDialog;
 import mindustry.game.EventType.*;
 import mindustry.input.*;
 import mindustry.ui.*;
+import mindustryX.features.ui.ArcMessageDialog.*;
 
 import static arc.Core.*;
 import static mindustry.Vars.*;
@@ -163,6 +165,7 @@ public class ConsoleFragment extends Table{
         clearChatInput();
 
         if(message.replace(" ", "").isEmpty()) return;
+        ArcMessageDialog.addMsg(new Msg(Type.console,message));
 
         //special case for 'clear' command
         if(message.equals("clear")){
diff --git a/core/src/mindustry/ui/fragments/HudFragment.java b/core/src/mindustry/ui/fragments/HudFragment.java
index 6a9359568e73967b34be82618ec7a95583e5cf6e..729c0540440f9e5f632a5173b90740eb6163ae85 100644
--- a/core/src/mindustry/ui/fragments/HudFragment.java
+++ b/core/src/mindustry/ui/fragments/HudFragment.java
@@ -14,6 +14,7 @@ import arc.scene.ui.ImageButton.*;
 import arc.scene.ui.layout.*;
 import arc.struct.*;
 import arc.util.*;
+import mindustry.*;
 import mindustry.annotations.Annotations.*;
 import mindustry.content.*;
 import mindustry.core.GameState.*;
@@ -27,6 +28,7 @@ import mindustry.input.*;
 import mindustry.net.Packets.*;
 import mindustry.type.*;
 import mindustry.ui.*;
+import mindustry.world.blocks.defense.turrets.*;
 import mindustry.world.blocks.storage.*;
 import mindustry.world.blocks.storage.CoreBlock.*;
 import mindustryX.features.*;
@@ -34,6 +36,7 @@ import mindustryX.features.ui.*;
 
 import static mindustry.Vars.*;
 import static mindustry.gen.Tex.*;
+import static mindustry.ui.Styles.*;
 
 public class HudFragment{
     private static final float dsize = 65f, pauseHeight = 36f;
@@ -45,6 +48,8 @@ public class HudFragment{
     public NewCoreItemsDisplay coreItems = new NewCoreItemsDisplay();
     private final AuxiliaryTools auxiliaryTools = new AuxiliaryTools();
 
+    private boolean hideObjectives = true;
+
     private String hudText = "";
     private boolean showHudText;
 
@@ -52,6 +57,8 @@ public class HudFragment{
     private Table lastUnlockLayout;
     private long lastToast;
 
+    private final Table arcStatus = new Table();
+
     public void build(Group parent){
 
         //warn about guardian/boss waves
@@ -91,6 +98,11 @@ public class HudFragment{
             showToast(Icon.warning, Core.bundle.format("sector.attacked", e.sector.name()));
         });
 
+        Events.on(WorldLoadEvent.class,e->{
+            hideObjectives = false;
+            rebuildArcStatus();
+        });
+
         //paused table
         parent.fill(t -> {
             t.name = "paused";
@@ -115,13 +127,16 @@ public class HudFragment{
             t.add(new Minimap()).name("minimap");
             t.row();
             //position
-            t.label(() ->
-                (Core.settings.getBool("position") ? player.tileX() + "," + player.tileY() + "\n" : "") +
-                (Core.settings.getBool("mouseposition") ? "[lightgray]" + World.toTile(Core.input.mouseWorldX()) + "," + World.toTile(Core.input.mouseWorldY()) : ""))
-            .visible(() -> Core.settings.getBool("position") || Core.settings.getBool("mouseposition"))
-            .touchable(Touchable.disabled)
-            .style(Styles.outlineLabel)
-            .name("position");
+            t.table(tt-> {
+                tt.label(() -> player.unit().type.emoji() +
+                                (Core.settings.getBool("position") ? player.tileX() + "," + player.tileY() + "\n" : "") +
+                                (Core.settings.getBool("mouseposition") ? "[lightgray]" + "♐" + World.toTile(Core.input.mouseWorldX()) + "," + World.toTile(Core.input.mouseWorldY()) : ""))
+                        .visible(() -> Core.settings.getBool("position") || Core.settings.getBool("mouseposition"))
+                        .touchable(Touchable.disabled)
+                        .style(Styles.outlineLabel)
+                        .name("position");
+                tt.button("♐",cleart, MarkerType::lockOnLastMark).size(30,30).tooltip("锁定上个标记点");
+            }).style(Styles.outlineLabel);
             if(Core.settings.getInt("AuxiliaryTable") == 3){
                 t.row().add(auxiliaryTools);
             }
@@ -214,12 +229,16 @@ public class HudFragment{
             Table wavesMain, editorMain;
 
             cont.stack(wavesMain = new Table(), editorMain = new Table()).height(wavesMain.getPrefHeight())
-            .name("waves/editor");
+            .name("waves/editor").top().left();
 
             wavesMain.visible(() -> shown && !state.isEditor());
             wavesMain.top().left().name = "waves";
 
             wavesMain.table(s -> {
+                if(Core.settings.getBool("arcSpecificTable")){
+                    s.add(makeStatusTableArc()).grow().name("status");
+                    return;
+                }
                 //wave info button with text
                 s.add(makeStatusTable()).grow().name("status");
 
@@ -240,7 +259,13 @@ public class HudFragment{
                         logic.skipWave();
                     }
                 }).growY().fillX().right().width(40f).disabled(b -> !canSkipWave()).name("skip").get().toBack();
-            }).width(dsize * 5 + 4f).name("statustable");
+                // Power bar display
+                if (Core.settings.getBool("powerStatistic")){
+                    s.row();
+                    s.add(ArcPowerInfo.getBars()).growX().colspan(s.getColumns());
+                }
+
+            }).width(dsize * 5 + 4f).name("statustable").left();
 
             wavesMain.row();
 
@@ -252,6 +277,7 @@ public class HudFragment{
 
             editorMain.name = "editor";
             editorMain.table(Tex.buttonEdge4, t -> {
+                t.visible(() -> UIExt.advanceToolTable != null && UIExt.advanceToolTable.parent.visible);
                 //t.margin(0f);
                 t.name = "teams";
                 t.add("@editor.teams").growX().left();
@@ -270,6 +296,7 @@ public class HudFragment{
                             teams.row();
                         }
                     }
+                    teams.button("更多", () -> UIExt.teamSelect.pickOne(team -> Call.setPlayerTeamEditor(player, team), player.team())).center().row();
                 }).left();
             }).width(dsize * 5 + 4f);
             editorMain.visible(() -> shown && state.isEditor());
@@ -290,6 +317,8 @@ public class HudFragment{
                 IntFormat mem = new IntFormat("memory");
                 IntFormat memnative = new IntFormat("memory2");
 
+                info.add("MDTX~"+ Version.mdtXBuild).color(Pal.accent).left();
+                info.row();
                 info.label(() -> fps.get(Core.graphics.getFramesPerSecond())).left().style(Styles.outlineLabel).name("fps");
                 info.row();
                 info.label(() -> Strings.format("LG/DW/UI(ms) @/@/@", Time.nanosToMillis(DebugUtil.logicTime), Time.nanosToMillis(DebugUtil.rendererTime), Time.nanosToMillis(DebugUtil.uiTime)))
@@ -298,6 +327,10 @@ public class HudFragment{
                 info.label(() -> Strings.format("D/V/T/F @/@/@/@",
                 DebugUtil.lastDrawRequests, DebugUtil.lastVertices, DebugUtil.lastSwitchTexture, DebugUtil.lastFlushCount)).left().style(Styles.outlineLabel).name("draw");
                 info.row();
+                if (!android){
+                    info.label(() -> "缩放: " + String.format("%.2f", renderer.getScale())).left().style(Styles.outlineLabel);
+                    info.row();
+                }
 
                 if(android){
                     info.label(() -> memnative.get((int)(Core.app.getJavaHeap() / 1024 / 1024), (int)(Core.app.getNativeHeap() / 1024 / 1024))).left().style(Styles.outlineLabel).name("memory2");
@@ -377,7 +410,7 @@ public class HudFragment{
                 }
                 return max == 0f ? 0f : val / max;
             }).blink(Color.white).outline(new Color(0, 0, 0, 0.6f), 7f)).grow())
-            .fillX().width(320f).height(60f).name("boss").visible(() -> state.rules.waves && state.boss() != null && !(mobile && Core.graphics.isPortrait())).padTop(7).row();
+            .fillX().width(320f).height(60f).name("boss").visible(() -> Core.settings.getBool("override_boss_shown") && state.rules.waves && state.boss() != null && !(mobile && Core.graphics.isPortrait())).padTop(7).row();
 
             t.table(Styles.black3, p -> p.margin(4).label(() -> hudText).style(Styles.outlineLabel)).touchable(Touchable.disabled).with(p -> p.visible(() -> {
                 p.color.a = Mathf.lerpDelta(p.color.a, Mathf.num(showHudText), 0.2f);
@@ -908,6 +941,142 @@ public class HudFragment{
         return table;
     }
 
+
+    private Table makeStatusTableArc(){
+        Table table = new Table(buttonEdge4);
+
+        table.name = "waves";
+
+        table.marginTop(0).marginBottom(4).marginLeft(4);
+
+        table.table(t -> {
+            t.margin(0);
+            t.clicked(() -> {
+                if(!player.dead() && mobile){
+                    Call.unitClear(player);
+                    control.input.recentRespawnTimer = 1f;
+                    control.input.controlledType = null;
+                }
+            });
+            t.image(() -> player.icon()).size(iconMed);
+            t.row();
+            t.add(new Bar(
+            () -> {
+                if(player.unit().shield > 0){
+                    return UI.formatAmount((long)player.unit().health) + "[gray]+[white]" + UI.formatAmount((long)player.unit().shield);
+                }else{
+                    return UI.formatAmount((long)player.unit().health);
+                }
+            },
+            () -> Pal.health,
+            () -> Math.min(player.unit().health / player.unit().maxHealth, 1))).height(18).growX();
+            t.row();
+            t.add(new Bar(
+            () -> {
+                if(player.unit() instanceof BlockUnitUnit u && u.tile().buildOn() instanceof ItemTurret.ItemTurretBuild it)
+                    return ((float)it.totalAmmo > 0 ? ((ItemTurret.ItemEntry)it.ammo.peek()).item.emoji() + it.totalAmmo + "/" + ((ItemTurret)it.block).maxAmmo : "");
+                if(state.rules.unitAmmo)
+                    return player.unit().type.ammoType.icon() + (int)player.unit().ammo + "/" + player.unit().type.ammoCapacity;
+                else return player.unit().type.ammoType.icon();
+            },
+            () -> player.unit().type.ammoType.barColor(),
+            () -> player.unit().ammof())).height(18).growX();
+            t.row();
+
+        }).size(110, 80).padRight(4);
+
+        rebuildArcStatus();
+        table.add(arcStatus).growX().pad(4f);
+
+        // Power bar display
+        if(Core.settings.getBool("powerStatistic")){
+            table.row();
+            table.add(ArcPowerInfo.getBars()).growX().colspan(table.getColumns());
+        }
+        return table;
+    }
+
+    private void rebuildArcStatus() {
+        arcStatus.clear();
+
+        boolean showSkipWave = canSkipWave();
+        arcStatus.update(() -> {
+            if (showSkipWave !=  canSkipWave()) rebuildArcStatus();
+        });
+
+        arcStatus.clicked(() -> {
+            hideObjectives = !hideObjectives;
+            rebuildArcStatus();
+        });
+
+        if (!getStatusText().isEmpty()) {
+            arcStatus.labelWrap(() -> hideObjectives && getStatusText().length() > 20 ? getStatusText().substring(0, 20) : getStatusText()).width(showSkipWave ? 150f : 190f);
+        } else {
+            arcStatus.table(tt->{
+                tt.update(() -> {
+                    if (!getStatusText().isEmpty()) rebuildArcStatus();
+                });
+                tt.add(new Bar(
+                        this::calWaveShower,
+                        () -> Color.valueOf("ccffcc"),
+                        () -> {
+                            if (CalWinWave() >= 1 && CalWinWave() >= state.wave)
+                                return state.wave / (float) CalWinWave();
+                            else return 1f;
+                        })).height(18).growX().row();
+                tt.add(new Bar(
+                        () -> FormatDefault.duration((float)((state.rules.waveTimer ? state.wavetime : state.tick) / 60)),
+                        () -> Color.valueOf("F5DEB3"),
+                        () -> state.wavetime / state.rules.waveSpacing)).height(18).growX().row();
+                tt.add(new Bar(
+                        () -> {
+                            if (Vars.spawner.countSpawns() <= 1 || state.rules.mode() == Gamemode.pvp) {
+                                return "[orange]" + state.enemies + "[gray](+" + calWaveEnemy(state.wave - 1) + ")";
+                            } else if (calWaveEnemy(state.wave - 1) > 0) {
+                                return "[orange]" + state.enemies + "[gray](+" + calWaveEnemy(state.wave - 1) + "×" + Vars.spawner.countSpawns() + ")";
+                            } else {
+                                return "[orange]" + state.enemies + "[gray](+0)";
+                            }
+                        },
+                        () -> Color.valueOf("F4A460"),
+                        () -> state.enemies / ((float) calWaveEnemy(state.wave - 2) * Vars.spawner.countSpawns()))).height(18).growX();
+            }).width(showSkipWave? 150f : 190f);
+        }
+
+        if (canSkipWave()) {
+            arcStatus.button(Icon.play, clearNonei, 30f, () -> {
+                if (net.client() && player.admin) {
+                    Call.adminRequest(player, AdminAction.wave, null);
+                } else {
+                    logic.skipWave();
+                }
+            }).growY().fillX().right().width(40f);
+        }
+    }
+
+    public String getStatusText() {
+        StringBuilder objBuilder = new StringBuilder();
+
+        if (state.rules.objectives.any()) {
+            boolean first = true;
+            for (var obj : state.rules.objectives) {
+                if (!obj.qualified()) continue;
+
+                String text = obj.text();
+                if (text != null) {
+                    if (!first) objBuilder.append('\n');
+                    objBuilder.append(text);
+
+                    first = false;
+                }
+            }
+        }
+        if (objBuilder.length() == 0 && state.rules.mission != null)
+            objBuilder.append(state.rules.mission);
+
+        return objBuilder.toString();
+    }
+
     private void addInfoTable(Table table){
         table.name = "infotable";
         table.left();
@@ -952,7 +1121,45 @@ public class HudFragment{
     }
 
     private boolean canSkipWave(){
-        return state.rules.waves && state.rules.waveSending && ((net.server() || player.admin) || !net.active()) && state.enemies == 0 && !spawner.isSpawning();
+        return Core.settings.getBool("overrideSkipWave") || state.rules.waves && state.rules.waveSending && ((net.server() || player.admin) || !net.active()) && state.enemies == 0 && !spawner.isSpawning();
+    }
+
+    private String calWaveShower(){
+        if(!state.rules.waves){
+            if(state.rules.attackMode){
+                int sum = Math.max(state.teams.present.sum(t -> t.team != player.team() ? t.cores.size : 0), 1);
+                return "敌人核心：[orange]" + sum;
+            }
+
+            if(state.isCampaign()){
+                return "[lightgray]" + Core.bundle.get("sector.curcapture");
+            }
+            return "";
+        }
+
+        if(CalWinWave() > 1 && CalWinWave() >= state.wave){
+            return "[orange]" + state.wave + "[white]/[yellow]" + CalWinWave();
+        }else{
+            return "波次：[orange]" + state.wave;
+        }
+    }
+
+    private int calWaveEnemy(int wave){
+        int waveEnemy = 0;
+        for(SpawnGroup group : state.rules.spawns){
+            waveEnemy += group.getSpawned(Math.max(0, wave));
+        }
+        return waveEnemy;
+    }
+
+    private int CalWinWave(){
+        if (state.rules.winWave >= 1) return state.rules.winWave;
+        int maxwave = 0;
+        for(SpawnGroup group : state.rules.spawns){
+            maxwave = Math.max(maxwave ,group.end);
+        }
+        if (maxwave > 10000) return 0;
+        return maxwave + 1;
     }
 
 }
diff --git a/core/src/mindustry/ui/fragments/MenuFragment.java b/core/src/mindustry/ui/fragments/MenuFragment.java
index 25d953a861fbcddea24225be733445e953e717ef..85a5ca45ad3c3741633b646bff8d8ba90b9542a2 100644
--- a/core/src/mindustry/ui/fragments/MenuFragment.java
+++ b/core/src/mindustry/ui/fragments/MenuFragment.java
@@ -1,6 +1,7 @@
 package mindustry.ui.fragments;
 
 import arc.*;
+import arc.files.*;
 import arc.graphics.*;
 import arc.graphics.g2d.*;
 import arc.math.*;
@@ -33,6 +34,14 @@ public class MenuFragment{
 
     MenuFloatLabel floatLabel;
 
+    Fi arcBackground;
+    String arcBackgroundPath = Core.settings.getString("arcBackgroundPath");
+    Seq<Fi> arcBGList;
+
+    Image img = new Image();
+
+    int arcBackgroundIndex = 0;
+
     public void build(Group parent){
         renderer = new MenuRenderer();
 
@@ -44,7 +53,18 @@ public class MenuFragment{
         parent.addChild(floatLabel = new MenuFloatLabel());
         parent = group;
 
-        parent.fill((x, y, w, h) -> renderer.render());
+        if(arcBackgroundPath != null && Core.files.absolute(arcBackgroundPath).exists() && Core.files.absolute(arcBackgroundPath).list().length >= 1){
+            arcBackgroundIndex = (int)(Math.random() * Core.files.absolute(arcBackgroundPath).list().length);
+            nextBackGroundImg();
+            if(arcBGList.size == 0){
+                parent.fill((x, y, w, h) -> renderer.render());
+            }else{
+                group.addChild(img);
+                img.setFillParent(true);
+            }
+        }else{
+            parent.fill((x, y, w, h) -> renderer.render());
+        }
 
         parent.fill(c -> {
             c.pane(Styles.noBarPane, cont -> {
@@ -91,6 +111,11 @@ public class MenuFragment{
             }));
         }
 
+        parent.fill(c -> c.bottom().left().table(t -> {
+            t.background(Tex.buttonEdge3);
+            t.button("\uE83D", Styles.cleart, this::nextBackGroundImg).width(50f);
+        }).visible(() -> Core.settings.getString("arcBackgroundPath", "").length() != 0).left().width(100));
+
         String versionText = ((Version.build == -1) ? "[#fc8140aa]" : "[#ffffffba]") + Version.combined();
         parent.fill((x, y, w, h) -> {
             TextureRegion logo = Core.atlas.find("logo");
@@ -116,6 +141,22 @@ public class MenuFragment{
         }).touchable = Touchable.disabled;
     }
 
+    private void nextBackGroundImg(){
+        arcBGList = Core.files.absolute(arcBackgroundPath).findAll(f -> !f.isDirectory() && (f.extEquals("png") || f.extEquals("jpg") || f.extEquals("jpeg")));
+        if(arcBGList.size == 0) return;
+        arcBackgroundPath = Core.settings.getString("arcBackgroundPath");
+        arcBackgroundIndex += 1;
+        arcBackgroundIndex = arcBackgroundIndex % arcBGList.size;
+        new Thread(() -> {
+            try{
+                arcBackground = arcBGList.get(arcBackgroundIndex);
+                Core.app.post(() -> img.setDrawable(new TextureRegion(new Texture(arcBackground))));
+            }catch(Exception e){
+                Core.app.post(() -> ui.showException("背景图片无效:" + arcBGList.get(arcBackgroundIndex).path(), e));
+            }
+        }).start();
+    }
+
     private void buildMobile(){
         container.clear();
         container.name = "buttons";
@@ -133,7 +174,7 @@ public class MenuFragment{
             tools = new MobileButton(Icon.settings, "@settings", ui.settings::show),
             mods = new MobileButton(Icon.book, "@mods", ui.mods::show),
             exit = new MobileButton(Icon.exit, "@quit", () -> Core.app.exit()),
-            about = new MobileButton(Icon.info, "@about.button", ui.about::show);
+            database = new MobileButton(Icon.book, "@database", ui.database::show);
 
         Seq<MobileButton> customs = customButtons.map(b -> new MobileButton(b.icon, b.text, b.runnable == null ? () -> {} : b.runnable));
 
@@ -152,11 +193,12 @@ public class MenuFragment{
             container.add(editor);
             container.add(tools);
             container.add(mods);
+            container.add(database);
             // add even custom buttons (before the exit button)
             for(int i = 0; i < customs.size; i += 2){
                 container.add(customs.get(i));
             }
-            container.add(ios ? about : exit);
+            if(!ios) container.add(exit);
         }else{
             container.marginTop(0f);
             container.add(play);
@@ -174,7 +216,9 @@ public class MenuFragment{
                 container.add(customs.get(i));
                 if(i % 2 == 0) container.row();
             }
-            container.add(ios ? about : exit);
+            if(!ios) container.add(exit);
+            container.row();
+            container.add(database);
         }
     }
 
@@ -196,14 +240,15 @@ public class MenuFragment{
                     new MenuButton("@campaign", Icon.play, () -> checkPlay(ui.planet::show)),
                     new MenuButton("@joingame", Icon.add, () -> checkPlay(ui.join::show)),
                     new MenuButton("@customgame", Icon.terrain, () -> checkPlay(ui.custom::show)),
-                    new MenuButton("@loadgame", Icon.download, () -> checkPlay(ui.load::show))
-                ),
+                    new MenuButton("@loadgame", Icon.download, () -> checkPlay(ui.load::show)),
+                    new MenuButton("@editor", Icon.terrain, () -> checkPlay(ui.maps::show)),
+                     steam ? new MenuButton("@workshop", Icon.steam, platform::openWorkshop) : null
+            ),
                 new MenuButton("@database.button", Icon.menu,
                     new MenuButton("@schematics", Icon.paste, ui.schematics::show),
                     new MenuButton("@database", Icon.book, ui.database::show),
                     new MenuButton("@about.button", Icon.info, ui.about::show)
                 ),
-                new MenuButton("@editor", Icon.terrain, () -> checkPlay(ui.maps::show)), steam ? new MenuButton("@workshop", Icon.steam, platform::openWorkshop) : null,
                 new MenuButton("@mods", Icon.book, ui.mods::show),
                 new MenuButton("@settings", Icon.settings, ui.settings::show)
             );
diff --git a/core/src/mindustry/ui/fragments/PlacementFragment.java b/core/src/mindustry/ui/fragments/PlacementFragment.java
index f3e80f7394b03c141052c9f8f8b4f5373ff112f1..9d7c45082b63f5b9dacd042ddf239f4a597a020d 100644
--- a/core/src/mindustry/ui/fragments/PlacementFragment.java
+++ b/core/src/mindustry/ui/fragments/PlacementFragment.java
@@ -1,6 +1,7 @@
 package mindustry.ui.fragments;
 
 import arc.*;
+import arc.func.Boolf;
 import arc.graphics.*;
 import arc.input.*;
 import arc.math.geom.*;
@@ -12,6 +13,7 @@ import arc.scene.ui.layout.*;
 import arc.struct.*;
 import arc.util.*;
 import mindustry.ai.*;
+import mindustryX.features.ui.BlockSelectDialog;
 import mindustry.content.*;
 import mindustry.core.*;
 import mindustry.entities.*;
@@ -24,14 +26,14 @@ import mindustry.input.*;
 import mindustry.type.*;
 import mindustry.ui.*;
 import mindustry.world.*;
-import mindustry.world.blocks.*;
+import mindustry.world.blocks.ConstructBlock;
 import mindustry.world.blocks.ConstructBlock.*;
 import mindustryX.features.*;
 
 import static mindustry.Vars.*;
 
 public class PlacementFragment{
-    final int rowWidth = 4;
+    private int rowWidth, maxRow;
     private boolean lastAllUnlocked = LogicExt.allUnlocked;
 
     public Category currentCategory = Category.distribution;
@@ -39,10 +41,12 @@ public class PlacementFragment{
     Seq<Block> returnArray = new Seq<>(), returnArray2 = new Seq<>();
     Seq<Category> returnCatArray = new Seq<>();
     boolean[] categoryEmpty = new boolean[Category.all.length];
-    ObjectMap<Category,Block> selectedBlocks = new ObjectMap<>();
+    public ObjectMap<Category,Block> selectedBlocks = new ObjectMap<>();
     ObjectFloatMap<Category> scrollPositions = new ObjectFloatMap<>();
     @Nullable Block menuHoverBlock;
-    @Nullable Displayable hover;
+    @Nullable Displayable hover,hover2;
+    @Nullable Tile hoverTile;
+    @Nullable Object lastDisplayTile;
     @Nullable Building lastFlowBuild, nextFlowBuild;
     @Nullable Object lastDisplayState;
     @Nullable Team lastTeam;
@@ -110,7 +114,7 @@ public class PlacementFragment{
                 if(nextFlowBuild.liquids != null) nextFlowBuild.liquids.updateFlow();
             }
 
-            if(lastAllUnlocked != LogicExt.allUnlocked){
+            if(lastAllUnlocked != LogicExt.allUnlocked || rowWidth != Core.settings.getInt("itemSelectionWidth", 4) || maxRow != Core.settings.getInt("itemSelectionHeight", 4)){
                 rebuild();
             }
         });
@@ -271,6 +275,8 @@ public class PlacementFragment{
 
     public void build(Group parent){
         lastAllUnlocked = LogicExt.allUnlocked;
+        rowWidth = Core.settings.getInt("itemSelectionWidth", 4);
+        maxRow = Core.settings.getInt("itemSelectionHeight", 4);
         parent.fill(full -> {
             toggler = full;
             full.bottom().right().visible(() -> ui.hudfrag.shown);
@@ -347,19 +353,22 @@ public class PlacementFragment{
 
                         //find current hovered thing
                         Displayable hovered = hover;
+                        Displayable hovered2 = hover2;
+                        Displayable hoveredTile = hoverTile;
                         Block displayBlock = menuHoverBlock != null ? menuHoverBlock : control.input.block;
                         Object displayState = displayBlock != null ? displayBlock : hovered;
                         boolean isHovered = displayBlock == null; //use hovered thing if displayblock is null
 
                         //don't refresh unnecessarily
                         //refresh only when the hover state changes, or the displayed block changes
-                        if(wasHovered == isHovered && lastDisplayState == displayState && lastTeam == player.team()) return;
+                        if(wasHovered == isHovered && lastDisplayState == displayState && lastDisplayTile == hoveredTile) return;
 
                         topTable.clear();
                         topTable.top().left().margin(5);
 
                         lastDisplayState = displayState;
                         wasHovered = isHovered;
+                        lastDisplayTile = hoveredTile;
                         lastTeam = player.team();
 
                         //show details of selected block, with costs
@@ -428,6 +437,30 @@ public class PlacementFragment{
                         }else if(hovered != null){
                             //show hovered item, whatever that may be
                             hovered.display(topTable);
+                            if(hovered2 != hovered && hovered2 != null){
+                                topTable.row().image().color(Pal.gray).height(2).growX().pad(8).row();
+                                hovered2.display(topTable);
+                            }
+                        }
+
+                        //只要可行便绘制地板|建筑，移除了其他重复绘制
+                        if (Core.settings.getBool("hoveredTileInfo") && hoveredTile != null) {
+                            topTable.row().table(t -> {
+                                t.left();
+                                t.defaults().left();
+                                t.image(hoverTile.floor().uiIcon).size(iconSmall).padRight(4);
+                                t.add(hoverTile.floor().localizedName);
+                                if(hoverTile.block() != Blocks.air){
+                                    t.add(" | ");
+                                    t.image(hoverTile.block().uiIcon).size(iconSmall).padRight(4);
+                                    t.add(hoverTile.block().localizedName).color(hoverTile.team().color);
+                                }
+                                if(hoverTile.overlay() != Blocks.air){
+                                    t.add(" | ");
+                                    t.image(hoverTile.overlay().uiIcon).size(iconSmall).padRight(4);
+                                    t.add(hoverTile.overlay().localizedName);
+                                }
+                            }).padTop(8).left();
                         }
                     });
                 }).colspan(3).fillX().visible(this::hasInfoBox).touchable(Touchable.enabled).row();
@@ -479,6 +512,8 @@ public class PlacementFragment{
 
                         rebuildCommand = () -> {
                             u.clearChildren();
+
+                            boolean arcExtra = Core.settings.getBool("arcCommandTable");
                             var units = control.input.selectedUnits;
                             if(units.size > 0){
                                 int[] counts = new int[content.units().size];
@@ -549,7 +584,7 @@ public class PlacementFragment{
                                                 Call.setUnitCommand(player, units.mapInt(un -> un.id).toArray(), command);
                                             }).checked(i -> currentCommand[0] == command).size(50f).tooltip(command.localized(), true);
 
-                                            if(++scol % 6 == 0) coms.row();
+                                            if(++scol % (rowWidth + 2) == 0) coms.row();
                                         }
 
                                     }).fillX().padTop(4f).left();
@@ -568,13 +603,66 @@ public class PlacementFragment{
                                                 Call.setUnitStance(player, units.mapInt(un -> un.id).toArray(), stance);
                                             }).checked(i -> currentStance[0] == stance).size(50f).tooltip(stance.localized(), true);
 
-                                            if(++scol % 6 == 0) coms.row();
+                                            if(++scol % (rowWidth + 2) == 0) coms.row();
+                                        }
+                                    }).fillX().padTop(4f).left();
+                                }
+                                if(arcExtra && units.size > 0){
+                                    u.row();
+                                    u.table(sp -> {
+                                        float wound = (float) Core.settings.getInt("rtsWoundUnit") / 100f;
+                                        if (units.contains(unit -> unit.health >= unit.maxHealth * wound) && units.contains(unit -> unit.health < unit.maxHealth * wound)){
+                                            sp.table(spp->{
+                                                arcSelectUnits(spp,"[green]\uE813","高血量单位", unit -> unit.health >= unit.maxHealth * wound);
+                                                arcSelectUnits(spp,"[red]\uE80F","低血量单位", unit -> unit.health < unit.maxHealth * wound);
+                                            });
+                                        }
+
+                                        if (units.contains(unit -> unit.type.commands.length > 1) && units.contains(unit -> unit.type.commands.length <= 1)){
+                                            sp.table(spp->{
+                                                arcSelectUnits(spp,"\uE86E","进攻性单位", unit -> unit.type.commands.length <= 1);
+                                                arcSelectUnits(spp,"\uE86B","辅助性单位", unit -> unit.type.commands.length > 1);
+                                            });
+                                        }
+
+                                        boolean hasFlyer = units.contains(Flyingc::isFlying),
+                                        hasLand = units.contains(unit -> !unit.isFlying() && !unit.type.naval),
+                                        hasNaval = units.contains(unit -> unit.type.naval);
+                                        if((hasFlyer ? 1 : 0) + (hasLand ? 1 : 0) + (hasNaval ? 1 : 0) >= 2){
+                                            sp.table(spp -> {
+                                                if(hasFlyer) arcSelectUnits(spp, UnitTypes.flare.emoji(), "飞行单位", Flyingc::isFlying);
+                                                if(hasLand) arcSelectUnits(spp, UnitTypes.crawler.emoji(), "陆军单位", unit -> !unit.isFlying() && !unit.type.naval);
+                                                if(hasNaval) arcSelectUnits(spp, UnitTypes.retusa.emoji(), "海军单位", unit -> unit.type.naval);
+                                            });
                                         }
                                     }).fillX().padTop(4f).left();
                                 }
                             }else{
                                 u.add(Core.bundle.get("commandmode.nounits")).color(Color.lightGray).growX().center().labelAlign(Align.center).pad(6);
                             }
+                            if(arcExtra && mobile){
+                                u.row();
+                                u.table(sp->{
+                                    sp.button("\uE86D", Styles.cleart, () -> {
+                                        control.input.selectedUnits.clear();
+                                        control.input.commandBuildings.clear();
+                                        for(var unit : player.team().data().units){
+                                            if(unit.isCommandable()){
+                                                control.input.selectedUnits.add(unit);
+                                            }
+                                        }
+                                    }).size(40f);
+                                    sp.button(Blocks.additiveReconstructor.emoji(), Styles.cleart, () -> {
+                                        control.input.selectedUnits.clear();
+                                        control.input.commandBuildings.clear();
+                                        for(var build : player.team().data().buildings){
+                                            if(build.block.commandable){
+                                                control.input.commandBuildings.add(build);
+                                            }
+                                        }
+                                    }).size(40f);
+                                }).fillX().padTop(4f).left().row();
+                            }
                         };
 
                         u.update(() -> {
@@ -643,7 +731,7 @@ public class PlacementFragment{
                 {
                     blockCatTable.table(Tex.pane2, blocksSelect -> {
                         blocksSelect.margin(4).marginTop(0);
-                        blockPane = blocksSelect.pane(blocks -> blockTable = blocks).height(194f).update(pane -> {
+                        blockPane = blocksSelect.pane(blocks -> blockTable = blocks).height(maxRow * 46f + 10f).update(pane -> {
                             if(pane.hasScroll()){
                                 Element result = Core.scene.getHoverElement();
                                 if(result == null || !result.isDescendantOf(pane)){
@@ -677,6 +765,17 @@ public class PlacementFragment{
                         boolean needsAssign = categoryEmpty[currentCategory.ordinal()];
 
                         int f = 0;
+                        if (maxRow > 5){
+                            categories.button(Icon.zoom, Styles.clearTogglei, () -> {
+                                new BlockSelectDialog(block -> block.replaceable, block -> {
+                                    control.input.block = block;
+                                    currentCategory = block.category;
+                                    rebuildCategory.run();
+                                    }, block -> control.input.block == block).show();
+                            }).group(group);
+                            categories.image(Styles.black6);
+                            categories.row();
+                        }
                         for(Category cat : getCategories()){
                             if(f++ % 2 == 0) categories.row();
 
@@ -736,36 +835,47 @@ public class PlacementFragment{
 
     boolean hasInfoBox(){
         hover = hovered();
-        return control.input.block != null || menuHoverBlock != null || hover != null;
+        return control.input.block != null || menuHoverBlock != null || hover != null || hoverTile != null;
     }
 
     /** Returns the thing being hovered over. */
     @Nullable
     Displayable hovered(){
-        Vec2 v = topTable.stageToLocalCoordinates(Core.input.mouse());
-
-        //if the mouse intersects the table or the UI has the mouse, no hovering can occur
-        if(Core.scene.hasMouse() || topTable.hit(v.x, v.y, false) != null) return null;
+        if(Core.scene.hasMouse() && !topTable.hasMouse()) return null;//MDTX: fix flashing. Note: when loading show, world is empty, and not use `Units`
+        //check tile being hovered over
+        Tile hoverTile = world.tileWorld(Core.input.mouseWorld().x, Core.input.mouseWorld().y);
+        this.hoverTile = (hoverTile != null && (hoverTile.build == null || !hoverTile.build.inFogTo(player.team()))) ? hoverTile : null;
+        this.hover2 = nextFlowBuild = (hoverTile!=null && hoverTile.build != null && hoverTile.build.displayable() && !hoverTile.build.inFogTo(player.team()))?hoverTile.build:null;
 
         //check for a unit
-        Unit unit = Units.closestOverlap(player.team(), Core.input.mouseWorldX(), Core.input.mouseWorldY(), 5f, u -> !u.isLocal() && u.displayable());
+        Unit unit = Units.closestOverlap(player.team(), Core.input.mouseWorldX(), Core.input.mouseWorldY(), 5f, u -> true);
         //if cursor has a unit, display it
         if(unit != null) return unit;
+        unit = Units.closestEnemy(player.team(), Core.input.mouseWorldX(), Core.input.mouseWorldY(), 5f, u -> true);
+        if(unit != null) return unit;
 
-        //check tile being hovered over
-        Tile hoverTile = world.tileWorld(Core.input.mouseWorld().x, Core.input.mouseWorld().y);
-        if(hoverTile != null){
-            //if the tile has a building, display it
-            if(hoverTile.build != null && hoverTile.build.displayable() && !hoverTile.build.inFogTo(player.team())){
-                return nextFlowBuild = hoverTile.build;
-            }
+        return hover2;
+    }
 
-            //if the tile has a drop, display the drop
-            if((hoverTile.drop() != null && hoverTile.block() == Blocks.air) || hoverTile.wallDrop() != null || hoverTile.floor().liquidDrop != null){
-                return hoverTile;
-            }
-        }
+    void arcSelectUnits(Table table, String icon, String info, Boolf<Unit> cons){
+        float size = 40f;
 
-        return null;
+        table.button(icon, Styles.cleart, () -> {}).tooltip(info).size(size).with(b->{
+            var listener = new ClickListener();
+            b.clicked(KeyCode.mouseLeft, () -> {
+                control.input.selectedUnits = control.input.selectedUnits.select(cons);
+                Events.fire(Trigger.unitCommandChange);
+                UIExt.announce("[cyan]arc控制器\n[acid]选择" + info + "！");
+            });
+            //right click -> remove
+            b.clicked(KeyCode.mouseRight, () -> {
+                control.input.selectedUnits.removeAll(cons);
+                Events.fire(Trigger.unitCommandChange);
+                UIExt.announce("[cyan]arc控制器\n[orange]移除" + info + "！");
+            });
+
+            b.addListener(listener);
+            b.addListener(new HandCursorListener());
+        });
     }
 }
diff --git a/core/src/mindustry/ui/fragments/PlayerListFragment.java b/core/src/mindustry/ui/fragments/PlayerListFragment.java
index 9286aab19502b5cf40556311572157b20c60fef4..4713d507165bce6aabcd3fe448e190c826a9b78e 100644
--- a/core/src/mindustry/ui/fragments/PlayerListFragment.java
+++ b/core/src/mindustry/ui/fragments/PlayerListFragment.java
@@ -10,14 +10,16 @@ import arc.scene.ui.ImageButton.*;
 import arc.scene.ui.layout.*;
 import arc.struct.*;
 import arc.util.*;
-import mindustry.game.*;
+import mindustry.game.Team;
+import mindustry.input.*;
 import mindustry.gen.*;
 import mindustry.graphics.*;
-import mindustry.input.*;
 import mindustry.net.*;
 import mindustry.net.Packets.*;
 import mindustry.ui.*;
 import mindustry.ui.dialogs.*;
+import mindustryX.features.*;
+import mindustryX.features.ui.*;
 
 import static mindustry.Vars.*;
 
@@ -68,7 +70,7 @@ public class PlayerListFragment{
                     menu.button("@close", this::toggle);
                 }).margin(0f).pad(10f).growX();
 
-            }).touchable(Touchable.enabled).margin(14f).minWidth(360f);
+            }).touchable(Touchable.enabled).margin(14f).minWidth(620f);
         });
 
         rebuild();
@@ -79,7 +81,7 @@ public class PlayerListFragment{
 
         content.clear();
 
-        float h = 50f;
+        float h = 40f;
         boolean found = false;
 
         players.clear();
@@ -87,7 +89,7 @@ public class PlayerListFragment{
 
         players.sort(Structs.comps(Structs.comparing(Player::team), Structs.comparingBool(p -> !p.admin)));
         if(search.getText().length() > 0){
-            players.retainAll(p -> Strings.stripColors(p.name().toLowerCase()).contains(search.getText().toLowerCase()));
+            players.retainAll(p -> p.name().toLowerCase().contains(search.getText().toLowerCase()) || Strings.stripColors(p.name().toLowerCase()).contains(search.getText().toLowerCase()));
         }
 
         for(var user : players){
@@ -120,28 +122,25 @@ public class PlayerListFragment{
                 iconTable.addListener(listener);
                 iconTable.addListener(new HandCursorListener());
             }
-            iconTable.margin(8);
+            iconTable.margin(4);
             iconTable.add(new Image(user.icon()).setScaling(Scaling.bounded)).grow();
             iconTable.name = user.name();
             iconTable.touchable = Touchable.enabled;
 
             iconTable.tapped(() -> {
                 if(!user.dead() && clickable){
-                    Core.camera.position.set(user.unit());
                     ui.showInfoFade(Core.bundle.format("viewplayer", user.name), 1f);
-                    if(control.input instanceof DesktopInput input){
-                        input.panning = true;
-                    }
+                    control.input.panCamera(Tmp.v1.set(user.unit()));
                 }
             });
 
             button.add(iconTable).size(h);
-            button.labelWrap("[#" + user.color().toString().toUpperCase() + "]" + user.name()).style(Styles.outlineLabel).width(170f).pad(10);
-            button.add().grow();
+            button.image(Icon.admin).visible(() -> user.admin && !(!user.isLocal() && net.server())).pad(4).get().updateVisibility();
+            button.labelWrap("[#" + user.color().toString().toUpperCase() + "]" + user.name()).style(Styles.outlineLabel).growX();
 
-            button.background(Tex.underline);
+            button.background(Tex.underlineWhite);
+            button.setColor(state.rules.pvp || Core.settings.getBool("arcAlwaysTeamColor") ? user.team().color : Pal.gray);
 
-            button.image(Icon.admin).visible(() -> user.admin && !(!user.isLocal() && net.server())).padRight(5).get().updateVisibility();
 
             var ustyle = new ImageButtonStyle(){{
                 down = Styles.none;
@@ -151,11 +150,37 @@ public class PlayerListFragment{
                 imageOverColor = Color.lightGray;
             }};
 
+            button.button(Icon.copySmall, ustyle, () -> {
+                Core.app.setClipboardText(user.name);
+                UIExt.announce("已复制昵称：" + user.name);
+            }).size(iconMed);
+            button.button(Icon.linkSmall, ustyle, () -> ArcMessageDialog.share("AT", "戳了" + user.name + "[white]一下，并提醒你留意对话框")).size(iconMed);
+            button.button(Icon.lockSmall, ustyle, () -> {
+                if(InputHandler.follow != user){
+                    InputHandler.follow = user;
+                    if(control.input instanceof DesktopInput d){
+                        d.panning = true;
+                    }
+                }else{
+                    InputHandler.follow = null;
+                }
+                UIExt.announce("追踪玩家：" + user.name);
+            }).checked(b -> {
+                boolean checked = InputHandler.follow == user;
+                b.getImage().setDrawable(checked ? Icon.lockSmall : Icon.lockOpenSmall);
+                return checked;
+            }).size(iconMed);
+
+            button.button(Icon.planeOutlineSmall, ustyle, () ->
+            ui.showTextInput("@votekick.reason", Core.bundle.format("votekick.reason.message", user.name()), "", reason ->
+            Call.sendChatMessage("/votekick #" + user.id + " " + reason))
+            ).size(iconMed);
+
             if(net.server() || (player.admin && (!user.admin || user == player))){
                 button.add().growY();
 
                 if(allowTeamSwitch || user != player){
-                    button.button(Icon.menu, ustyle, () -> {
+                    button.button(Icon.wrenchSmall, ustyle, () -> {
                         var dialog = new BaseDialog(user.coloredName());
 
                         dialog.title.setColor(Color.white);
@@ -191,30 +216,7 @@ public class PlayerListFragment{
                             //there's generally no reason to team switch outside PvP or sandbox, and it's basically an easy way to cheat
                             if(allowTeamSwitch){
                                 t.button("@player.team", Icon.redo, bstyle, () -> {
-                                    var teamSelect = new BaseDialog(Core.bundle.get("player.team") + ": " + user.name);
-                                    teamSelect.setFillParent(false);
-
-                                    var group = new ButtonGroup<>();
-
-                                    int i = 0;
-
-                                    for(Team team : Team.baseTeams){
-                                        var b = new ImageButton(Tex.whiteui, Styles.clearNoneTogglei);
-                                        b.margin(4f);
-                                        b.getImageCell().grow();
-                                        b.getStyle().imageUpColor = team.color;
-                                        b.clicked(() -> {
-                                            Call.adminRequest(user, AdminAction.switchTeam, team);
-                                            teamSelect.hide();
-                                        });
-                                        teamSelect.cont.add(b).size(50f).checked(a -> user.team() == team).group(group);
-
-                                        if(i++ % 3 == 2) teamSelect.cont.row();
-                                    }
-
-                                    teamSelect.addCloseButton();
-                                    teamSelect.show();
-
+                                    UIExt.teamSelect.pickOne((it) -> Call.adminRequest(user, AdminAction.switchTeam, it), user.team());
                                     dialog.hide();
                                 }).row();
                             }
@@ -242,20 +244,11 @@ public class PlayerListFragment{
                         dialog.cont.button("@back", Icon.left, dialog::hide).padTop(-1f).size(220f, 55f);
 
                         dialog.show();
-
-
-                    }).size(h);
+                    }).size(iconMed);
                 }
-            }else if(!user.isLocal() && !user.admin && net.client() && Groups.player.size() >= 3 && player.team() == user.team()){ //votekick
-                button.add().growY();
-
-                button.button(Icon.hammer, ustyle,
-                    () -> ui.showTextInput("@votekick.reason", Core.bundle.format("votekick.reason.message", user.name()), "",
-                    reason -> Call.sendChatMessage("/votekick #" + user.id + " " + reason)))
-                .size(h);
             }
 
-            content.add(button).width(350f).height(h + 14);
+            content.add(button).width(600f).height(h + 14);
             content.row();
         }
 
diff --git a/core/src/mindustry/world/Block.java b/core/src/mindustry/world/Block.java
index 6517a6bd0fbe18040117962683bc3ea79bd408fc..0b8e579e86669b5cb85b16cc995b1f13b2c84ea1 100644
--- a/core/src/mindustry/world/Block.java
+++ b/core/src/mindustry/world/Block.java
@@ -368,7 +368,7 @@ public class Block extends UnlockableContent implements Senseable{
     /** Map of bars by name. */
     protected OrderedMap<String, Func<Building, Bar>> barMap = new OrderedMap<>();
     /** List for building up consumption before init(). */
-    protected Seq<Consume> consumeBuilder = new Seq<>();
+    public Seq<Consume> consumeBuilder = new Seq<>();
 
     protected TextureRegion[] generatedIcons;
     protected TextureRegion[] editorVariantRegions;
@@ -498,6 +498,11 @@ public class Block extends UnlockableContent implements Senseable{
             .sumf(other -> !floating && other.floor().isDeep() ? 0 : other.floor().attributes.get(attr));
     }
 
+    public float sumAttribute(@Nullable Attribute attr, Tile tile){
+        if(attr == null) return 0;
+        return tile.getLinkedTilesAs(this, tempTiles)
+                .sumf(other -> !floating && other.floor().isDeep() ? 0 : other.floor().attributes.get(attr));
+    }
     public TextureRegion getDisplayIcon(Tile tile){
         return tile.build == null ? uiIcon : tile.build.getDisplayIcon();
     }
@@ -554,7 +559,7 @@ public class Block extends UnlockableContent implements Senseable{
             }
         }
 
-        if(requirements.length > 0){
+        if(canBeBuilt() && requirements.length > 0){
             stats.add(Stat.buildTime, buildCost / 60, StatUnit.seconds);
             stats.add(Stat.buildCost, StatValues.items(false, requirements));
         }
@@ -728,7 +733,12 @@ public class Block extends UnlockableContent implements Senseable{
 
     public void drawPlan(BuildPlan plan, Eachable<BuildPlan> list, boolean valid, float alpha){
         Draw.reset();
-        Draw.mixcol(!valid ? Pal.breakInvalid : Color.white, (!valid ? 0.4f : 0.24f) + Mathf.absin(Time.globalTime, 6f, 0.28f));
+        if (!valid)  Draw.mixcol(Pal.breakInvalid, 0.4f + Mathf.absin(Time.globalTime, 6f, 0.28f));
+        else {
+            if (player.unit().within(plan.x * tilesize,plan.y * tilesize,player.unit().type.buildRange))
+                Draw.mixcol(Color.white, 0.24f + Mathf.absin(Time.globalTime, 6f, 0.28f));
+            else Draw.mixcol(Color.valueOf("#FFE4B5"), 0.33f + Mathf.absin(Time.globalTime, 6f, 0.28f));
+        }
         Draw.alpha(alpha);
         float prevScale = Draw.scl;
         Draw.scl *= plan.animScale;
diff --git a/core/src/mindustry/world/blocks/ConstructBlock.java b/core/src/mindustry/world/blocks/ConstructBlock.java
index a68424552b03b8b0e43d61c59a8c40dc641930dc..3724d50fce644e67159eb20893c7f1577bd40ce5 100644
--- a/core/src/mindustry/world/blocks/ConstructBlock.java
+++ b/core/src/mindustry/world/blocks/ConstructBlock.java
@@ -3,14 +3,17 @@ package mindustry.world.blocks;
 import arc.*;
 import arc.Graphics.*;
 import arc.Graphics.Cursor.*;
+import arc.graphics.*;
 import arc.graphics.g2d.*;
 import arc.math.*;
+import arc.scene.ui.layout.*;
 import arc.struct.*;
 import arc.util.*;
 import arc.util.io.*;
 import mindustry.*;
 import mindustry.annotations.Annotations.*;
 import mindustry.content.*;
+import mindustry.core.*;
 import mindustry.entities.*;
 import mindustry.entities.units.*;
 import mindustry.game.EventType.*;
@@ -23,6 +26,7 @@ import mindustry.world.*;
 import mindustry.world.blocks.environment.*;
 import mindustry.world.blocks.storage.CoreBlock.*;
 import mindustry.world.modules.*;
+import mindustryX.features.func.*;
 
 import java.util.*;
 
@@ -125,7 +129,7 @@ public class ConstructBlock extends Block{
     static float calcPitch(boolean up){
         if(Time.timeSinceMillis(lastTime) < 16 * 30){
             lastTime = Time.millis();
-            pitchSeq ++;
+            pitchSeq++;
             if(pitchSeq > 30){
                 pitchSeq = 0;
             }
@@ -168,6 +172,40 @@ public class ConstructBlock extends Block{
         private @Nullable float[] totalAccumulator;
         private @Nullable int[] itemsLeft;
 
+        @Override
+        public void drawSelect(){
+            if(team.core() == null){
+                return;
+            }
+
+            // BlockUnit之上
+            Draw.z(Layer.flyingUnit + 0.1f);
+
+            float scl = block.size / 4f;
+            float buildHitSize = hitSize();
+
+            // 显示建造进度
+            var pos = Tmp.v1.set(this).add(0, buildHitSize / 2f);//顶部
+            FuncX.drawText(pos, Strings.fixed(progress * 100, 2) + "%", scl, Pal.accent, Align.bottom);
+
+            // 显示物品需求
+            StringBuilder requirements = new StringBuilder();
+            for(int i = 0; i < current.requirements.length; i++){
+                ItemStack stack = current.requirements[i];
+                float consumeAmount = state.rules.buildCostMultiplier * stack.amount;
+                int coreAmount = team.core().items.get(stack.item);
+
+                int investItem = (int)(progress * consumeAmount);
+                int needItem = (int)(consumeAmount) - investItem;
+                boolean hasItem = coreAmount >= needItem;
+
+                if(i != 0) requirements.append('\n');
+                requirements.append(stack.item.emoji()).append(hasItem ? "[#ffd37f]" : "[#e55454]").append(investItem).append("/").append(needItem).append("/").append(UI.formatAmount(coreAmount)).append("[]");
+            }
+            pos.set(this).add(-buildHitSize / 2f, -buildHitSize / 2f);//左下角
+            FuncX.drawText(pos, requirements.toString(), scl, Color.white, Align.topLeft);
+        }
+
         @Override
         public String getDisplayName(){
             return Core.bundle.format("block.constructing", current.localizedName);
@@ -246,7 +284,7 @@ public class ConstructBlock extends Block{
 
                     Draw.rect(region, x, y, current.rotate && (noOverrides || current.regionRotated2 == i || current.regionRotated1 == i) ? rotdeg() : 0);
                     Draw.flush();
-                    i ++;
+                    i++;
                 }
 
                 Draw.color();
diff --git a/core/src/mindustry/world/blocks/defense/ForceProjector.java b/core/src/mindustry/world/blocks/defense/ForceProjector.java
index 46956f7db1e3dd6b8e51e46432a0f052910bab2c..4f0baae73105cdd11a9910a096c4792b14aab23a 100644
--- a/core/src/mindustry/world/blocks/defense/ForceProjector.java
+++ b/core/src/mindustry/world/blocks/defense/ForceProjector.java
@@ -1,6 +1,7 @@
 package mindustry.world.blocks.defense;
 
 import arc.*;
+import arc.Core;
 import arc.func.*;
 import arc.graphics.*;
 import arc.graphics.g2d.*;
@@ -125,6 +126,7 @@ public class ForceProjector extends Block{
         Draw.color(player.team().color);
         Lines.stroke(1f);
         Lines.poly(x * tilesize + offset, y * tilesize + offset, sides, radius, shieldRotation);
+        Lines.poly(x * tilesize + offset, y * tilesize + offset, sides, radius + phaseRadiusBoost, shieldRotation);
         Draw.color();
     }
 
diff --git a/core/src/mindustry/world/blocks/defense/MendProjector.java b/core/src/mindustry/world/blocks/defense/MendProjector.java
index 8ae4dec654dd860c1dd7de479521c9e163c106a2..253896adc8c4661564a81a988737bd938551351e 100644
--- a/core/src/mindustry/world/blocks/defense/MendProjector.java
+++ b/core/src/mindustry/world/blocks/defense/MendProjector.java
@@ -1,5 +1,6 @@
 package mindustry.world.blocks.defense;
 
+import arc.*;
 import arc.graphics.*;
 import arc.graphics.g2d.*;
 import arc.math.*;
@@ -21,7 +22,7 @@ import static mindustry.Vars.*;
 public class MendProjector extends Block{
     public final int timerUse = timers++;
     public Color baseColor = Color.valueOf("84f491");
-    public Color phaseColor = baseColor;
+    public Color phaseColor = Color.valueOf("ffd59e");
     public @Load("@-top") TextureRegion topRegion;
     public float reload = 250f;
     public float range = 60f;
@@ -79,7 +80,9 @@ public class MendProjector extends Block{
         super.drawPlace(x, y, rotation, valid);
         
         Drawf.dashCircle(x * tilesize + offset, y * tilesize + offset, range, baseColor);
+        Drawf.dashCircle(x * tilesize + offset, y * tilesize + offset, range + phaseRangeBoost, phaseColor);
 
+        indexer.eachBlock(player.team(), x * tilesize + offset, y * tilesize + offset, range + phaseRangeBoost, other -> true, other -> Drawf.selected(other, Tmp.c1.set(phaseColor).a(Mathf.absin(4f, 1f))));
         indexer.eachBlock(player.team(), x * tilesize + offset, y * tilesize + offset, range, other -> true, other -> Drawf.selected(other, Tmp.c1.set(baseColor).a(Mathf.absin(4f, 1f))));
     }
 
diff --git a/core/src/mindustry/world/blocks/defense/OverdriveProjector.java b/core/src/mindustry/world/blocks/defense/OverdriveProjector.java
index 11cd57fb65dcac2eb118cd7d584dd83be20b7c0f..236d6fa7f5e779f3d7a05d3b7862fa41df64edba 100644
--- a/core/src/mindustry/world/blocks/defense/OverdriveProjector.java
+++ b/core/src/mindustry/world/blocks/defense/OverdriveProjector.java
@@ -1,6 +1,5 @@
 package mindustry.world.blocks.defense;
 
-import arc.*;
 import arc.graphics.*;
 import arc.graphics.g2d.*;
 import arc.math.*;
@@ -57,6 +56,11 @@ public class OverdriveProjector extends Block{
         super.drawPlace(x, y, rotation, valid);
 
         Drawf.dashCircle(x * tilesize + offset, y * tilesize + offset, range, baseColor);
+        if (hasBoost){
+            Drawf.dashCircle(x * tilesize + offset, y * tilesize + offset, range + phaseRangeBoost, phaseColor);
+
+            indexer.eachBlock(player.team(), x * tilesize + offset, y * tilesize + offset, range + phaseRangeBoost, other -> other.block.canOverdrive, other -> Drawf.selected(other, Tmp.c1.set(phaseColor).a(Mathf.absin(4f, 1f))));
+        }
 
         indexer.eachBlock(player.team(), x * tilesize + offset, y * tilesize + offset, range, other -> other.block.canOverdrive, other -> Drawf.selected(other, Tmp.c1.set(baseColor).a(Mathf.absin(4f, 1f))));
     }
diff --git a/core/src/mindustry/world/blocks/defense/turrets/BaseTurret.java b/core/src/mindustry/world/blocks/defense/turrets/BaseTurret.java
index eced3dc7581a4916970634e600d0f5cd86f6ee7e..58e315a6d9ec8c4c32df8a8220a9ccbb564e862d 100644
--- a/core/src/mindustry/world/blocks/defense/turrets/BaseTurret.java
+++ b/core/src/mindustry/world/blocks/defense/turrets/BaseTurret.java
@@ -14,6 +14,7 @@ import mindustry.world.*;
 import mindustry.world.blocks.*;
 import mindustry.world.consumers.*;
 import mindustry.world.meta.*;
+import mindustryX.features.*;
 
 import static mindustry.Vars.*;
 
@@ -77,6 +78,8 @@ public class BaseTurret extends Block{
         if(fogRadiusMultiplier < 0.99f && state.rules.fog){
             Drawf.dashCircle(x * tilesize + offset, y * tilesize + offset, range * fogRadiusMultiplier, Pal.lightishGray);
         }
+        if(Core.settings.getBool("arcTurretPlacementItem"))
+            ArcBuilds.turretPlaceDraw(x * tilesize + offset, y * tilesize + offset, this);
     }
 
     @Override
@@ -101,7 +104,7 @@ public class BaseTurret extends Block{
 
         @Override
         public void drawSelect(){
-            Drawf.dashCircle(x, y, range(), team.color);
+            drawPlace(tileX(), tileY(), 0, true);
         }
 
         public float estimateDps(){
diff --git a/core/src/mindustry/world/blocks/defense/turrets/Turret.java b/core/src/mindustry/world/blocks/defense/turrets/Turret.java
index f51c1cb0e700f473d7eef816fcc08b5a6f623767..635f5feb9aebb2a40508919200d028d7daeadadf 100644
--- a/core/src/mindustry/world/blocks/defense/turrets/Turret.java
+++ b/core/src/mindustry/world/blocks/defense/turrets/Turret.java
@@ -362,6 +362,18 @@ public class Turret extends ReloadTurret{
             drawer.draw(this);
         }
 
+        //show shoot target line
+        @Override
+        public void drawSelect(){
+            super.drawSelect();
+            if(!targetPos.isZero() && dst(targetPos) < range * 5){
+                Lines.stroke(1f);
+                Lines.dashLine(x, y, targetPos.x, targetPos.y, (int)(Mathf.len(targetPos.x - x, targetPos.y - y) / 8));
+                Lines.dashCircle(targetPos.x, targetPos.y, 8);
+                Draw.reset();
+            }
+        }
+
         @Override
         public void updateTile(){
             if(!validateTarget()) target = null;
diff --git a/core/src/mindustry/world/blocks/production/Drill.java b/core/src/mindustry/world/blocks/production/Drill.java
index f5c6656ea21eedfc2bcb65edcf271bfdc49469eb..97b8404dba179b441685c2361fd1c601a5e0f214 100644
--- a/core/src/mindustry/world/blocks/production/Drill.java
+++ b/core/src/mindustry/world/blocks/production/Drill.java
@@ -18,7 +18,6 @@ import mindustry.logic.*;
 import mindustry.type.*;
 import mindustry.ui.*;
 import mindustry.world.*;
-import mindustry.world.blocks.environment.*;
 import mindustry.world.consumers.*;
 import mindustry.world.meta.*;
 import mindustryX.features.*;
@@ -146,12 +145,12 @@ public class Drill extends Block{
         countOre(tile);
 
         if(returnItem != null){
-            float width = drawPlaceText(Core.bundle.formatFloat("bar.drillspeed", 60f / getDrillTime(returnItem) * returnCount, 2), x, y, valid);
-            float dx = x * tilesize + offset - width/2f - 4f, dy = y * tilesize + offset + size * tilesize / 2f + 5, s = iconSmall / 4f;
-            Draw.mixcol(Color.darkGray, 1f);
-            Draw.rect(returnItem.fullIcon, dx, dy - 1, s, s);
-            Draw.reset();
-            Draw.rect(returnItem.fullIcon, dx, dy, s, s);
+            //MDTX ARC: 改变挖掘速度显示, 增加冷却加成速度.
+            float speed = 60f / getDrillTime(returnItem) * returnCount;
+            String msg = liquidBoostIntensity > 1
+            ? Strings.format("@ [white]@@[] @[white]([cyan]@[])", Iconc.production, returnItem.emoji(), returnItem.localizedName, Strings.autoFixed(speed, 2), Strings.autoFixed(speed * liquidBoostIntensity * liquidBoostIntensity, 2))
+            : Strings.format("@ [white]@@[] @", Iconc.production, returnItem.emoji(), returnItem.localizedName, Strings.autoFixed(speed, 2));
+            drawPlaceText(msg, x, y, valid);
 
             if(drawMineItem){
                 Draw.color(returnItem.color);
@@ -162,7 +161,10 @@ public class Drill extends Block{
             Tile to = tile.getLinkedTilesAs(this, tempTiles).find(t -> t.drop() != null && (t.drop().hardness > tier || t.drop() == blockedItem));
             Item item = to == null ? null : to.drop();
             if(item != null){
-                drawPlaceText(Core.bundle.get("bar.drilltierreq"), x, y, valid);
+                if (item == blockedItem) {
+                    drawPlaceText(Core.bundle.format("bar.drillcantmine"), x, y, valid);
+                }
+                else drawPlaceText(Core.bundle.format("bar.drilltierreq", item.hardness, tier), x, y, valid);
             }
         }
     }
@@ -192,6 +194,11 @@ public class Drill extends Block{
         return new TextureRegion[]{region, rotatorRegion, topRegion};
     }
 
+    public int countOreArc(Tile tile){
+        countOre(tile);
+        return returnCount;
+    }
+
     protected void countOre(Tile tile){
         returnItem = null;
         returnCount = 0;
diff --git a/core/src/mindustry/world/blocks/production/GenericCrafter.java b/core/src/mindustry/world/blocks/production/GenericCrafter.java
index a55bc18a055c74d4e7de3332bd1315beb3c42a63..16ab256b1c5d8ac6c722a9c406dd2b53a480e49a 100644
--- a/core/src/mindustry/world/blocks/production/GenericCrafter.java
+++ b/core/src/mindustry/world/blocks/production/GenericCrafter.java
@@ -1,5 +1,8 @@
 package mindustry.world.blocks.production;
 
+
+import arc.*;
+import arc.scene.ui.layout.*;
 import arc.graphics.g2d.*;
 import arc.math.*;
 import arc.math.geom.*;
@@ -12,6 +15,8 @@ import mindustry.entities.units.*;
 import mindustry.gen.*;
 import mindustry.logic.*;
 import mindustry.type.*;
+import mindustry.graphics.*;
+import mindustry.ui.*;
 import mindustry.world.*;
 import mindustry.world.blocks.liquid.Conduit.*;
 import mindustry.world.draw.*;
@@ -358,5 +363,29 @@ public class GenericCrafter extends Block{
             warmup = read.f();
             if(legacyReadWarmup) read.f();
         }
+
+        @Override
+        public void displayBars(Table bars){
+            super.displayBars(bars);
+            //bar for shoot cd
+            bars.add(new Bar(() -> Iconc.crafting + " " + Strings.fixed(progress * 100f, 0)  + " %" + Calwavetimeremain(progress,getProgressIncrease(craftTime)*timeScale*60 / Time.delta),
+                    () -> Pal.ammo, () -> progress));
+            bars.row();
+        }
+    }
+    private String Calwavetimeremain(float progress,float ProgressIncrease){
+        if(ProgressIncrease == 0f || 1 / ProgressIncrease < 240f){
+            return "";
+        }
+        float time = (1-progress)/ProgressIncrease;
+
+        String wavetimeremain = " [orange]~";
+        int m = ((int)time) / 60;
+        if (m==0){
+            return "";
+        }
+        wavetimeremain += String.valueOf(m) ;
+        wavetimeremain += "min";
+        return wavetimeremain;
     }
 }
diff --git a/core/src/mindustry/world/blocks/storage/CoreBlock.java b/core/src/mindustry/world/blocks/storage/CoreBlock.java
index 15a80f0c6e61210c702cf42d672ebc24a6cfc0f6..a3feeffe80258f74116ab767bf1b12b386226b0e 100644
--- a/core/src/mindustry/world/blocks/storage/CoreBlock.java
+++ b/core/src/mindustry/world/blocks/storage/CoreBlock.java
@@ -90,6 +90,7 @@ public class CoreBlock extends StorageBlock{
         player.set(core);
 
         if(!net.client()){
+            player.team(tile.team());
             Unit unit = spawnType.create(tile.team());
             unit.set(core);
             unit.rotation(90f);
@@ -712,6 +713,14 @@ public class CoreBlock extends StorageBlock{
                 outline.get(core);
                 core.proximity.each(storage -> storage.items == items, outline);
             });
+            if(state.isCampaign()){
+                Draw.z(Layer.blockOver);
+                float t = turnDuration - Universe.turnCounter;
+                String min = Strings.fixed(Mathf.floor(t / 60f / 60f), 0);
+                float s = Mathf.floor(t / 60f % 60f);
+                String sec = (s < 10f ? "0" : "") + Strings.fixed(s, 0);
+                drawPlaceText(("资源接收  "+ min+":"+sec), tileX(), tileY(), true);
+            }
             Draw.reset();
         }
 
