From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Sun, 18 Feb 2024 15:58:00 +0800
Subject: [PATCH] H: misc
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

每个改动仅限连续的一段，且前有注释说明改动内容
---
 core/src/mindustry/ClientLauncher.java        |  8 ++++++++
 core/src/mindustry/Vars.java                  |  5 +++++
 core/src/mindustry/ai/BlockIndexer.java       |  2 +-
 core/src/mindustry/core/Control.java          |  3 ++-
 core/src/mindustry/core/NetClient.java        |  4 ++++
 core/src/mindustry/core/Renderer.java         |  2 +-
 core/src/mindustry/core/UI.java               | 20 ++-----------------
 core/src/mindustry/game/Schematics.java       |  8 +++++---
 .../mindustry/graphics/MinimapRenderer.java   |  6 ++++--
 core/src/mindustry/ui/dialogs/JoinDialog.java | 19 ++++++++++--------
 .../mindustry/ui/dialogs/KeybindDialog.java   |  9 ++++++---
 .../ui/fragments/BlockInventoryFragment.java  |  2 +-
 .../mindustry/ui/fragments/ChatFragment.java  |  7 +++++--
 .../mindustry/world/blocks/defense/Radar.java |  9 +++++++++
 .../world/blocks/distribution/Router.java     |  3 ++-
 .../world/blocks/production/BeamDrill.java    | 12 ++++-------
 .../mindustry/desktop/DesktopLauncher.java    | 12 ++++++++++-
 17 files changed, 81 insertions(+), 50 deletions(-)

diff --git a/core/src/mindustry/ClientLauncher.java b/core/src/mindustry/ClientLauncher.java
index a64b7b36fdd74a29a3caae54a1f1a514039b891f..beea309f225be8de3799089a87d1fdcb8e30ee5c 100644
--- a/core/src/mindustry/ClientLauncher.java
+++ b/core/src/mindustry/ClientLauncher.java
@@ -36,6 +36,10 @@ public abstract class ClientLauncher extends ApplicationCore implements Platform
     @Override
     public void setup(){
         String dataDir = System.getProperty("mindustry.data.dir", OS.env("MINDUSTRY_DATA_DIR"));
+        //MDTX Auto discover `data` directory to use portal mode.
+        if(app.isDesktop() && dataDir == null && Fi.get("data").isDirectory()){
+            dataDir = "data";
+        }
         if(dataDir != null){
             Core.settings.setDataDirectory(files.absolute(dataDir));
         }
@@ -254,10 +258,14 @@ public abstract class ClientLauncher extends ApplicationCore implements Platform
         }
 
         if(limitFps){
+            Gl.flush();//MDTX: flush GL, let the GPU do the work before swap buffer.
             long current = Time.nanos();
             if(nextFrame > current){
                 long toSleep = nextFrame - current;
                 Threads.sleep(toSleep / 1000000, (int)(toSleep % 1000000));
+            }else{
+                //MDTX fix limitFps sometime not working.
+                nextFrame = current;
             }
         }
 
diff --git a/core/src/mindustry/Vars.java b/core/src/mindustry/Vars.java
index ac225f81d9c245937c23985a62db7857d5292d51..21f5e25a14d237e821c1cc0e22ff28dfe16e9633 100644
--- a/core/src/mindustry/Vars.java
+++ b/core/src/mindustry/Vars.java
@@ -396,6 +396,11 @@ public class Vars implements Loadable{
                 if(!headless && (ui == null || ui.consolefrag == null)){
                     logBuffer.add(result);
                 }else if(!headless){
+                    //MDTX add message to console
+                    if(!logBuffer.isEmpty()){
+                        logBuffer.each(ui.consolefrag::addMessage);
+                        logBuffer.clear();
+                    }
                     if(!OS.isWindows){
                         for(String code : ColorCodes.values){
                             result = result.replace(code, "");
diff --git a/core/src/mindustry/ai/BlockIndexer.java b/core/src/mindustry/ai/BlockIndexer.java
index 1206dc71d1d87b2a5432898a3991a93260b475e7..51cee565b4213048744d9a1741138add3e073201 100644
--- a/core/src/mindustry/ai/BlockIndexer.java
+++ b/core/src/mindustry/ai/BlockIndexer.java
@@ -37,7 +37,7 @@ public class BlockIndexer{
     /** All ores present on the map - can be wall or floor. */
     private Seq<Item> allPresentOres = new Seq<>();
     /** All ores available on this map. */
-    private ObjectIntMap<Item> allOres = new ObjectIntMap<>(), allWallOres = new ObjectIntMap<>();
+    public ObjectIntMap<Item> allOres = new ObjectIntMap<>(), allWallOres = new ObjectIntMap<>();
     /** Stores teams that are present here as tiles. */
     private Seq<Team> activeTeams = new Seq<>(Team.class);
     /** Maps teams to a map of flagged tiles by flag. */
diff --git a/core/src/mindustry/core/Control.java b/core/src/mindustry/core/Control.java
index ac274c820cb1362a4863ca6cf98384dadbaafc07..63e6c3ef13f839f531387b10789d135585b19863 100644
--- a/core/src/mindustry/core/Control.java
+++ b/core/src/mindustry/core/Control.java
@@ -573,7 +573,8 @@ public class Control implements ApplicationListener, Loadable{
                 BaseDialog dialog = new BaseDialog("@confirm");
                 dialog.setFillParent(true);
 
-                float[] countdown = {60 * 11};
+                //MDTX ARC: longer timeout
+                float[] countdown = {60 * 31};
                 Runnable exit = () -> {
                     Core.settings.put("uiscale", 100);
                     Core.settings.put("uiscalechanged", false);
diff --git a/core/src/mindustry/core/NetClient.java b/core/src/mindustry/core/NetClient.java
index b49fbe345d8987f023b037d1c1b94953098487e1..e80d5029613f62f112e4f2c8e1be25eeca91dd4e 100644
--- a/core/src/mindustry/core/NetClient.java
+++ b/core/src/mindustry/core/NetClient.java
@@ -71,6 +71,10 @@ public class NetClient implements ApplicationListener{
     public NetClient(){
 
         net.handleClient(Connect.class, packet -> {
+            //MDTX ARC: fix name when quietReset
+            player.name = Core.settings.getString("name");
+            player.color.set(Core.settings.getInt("color-0"));
+
             Log.info("Connecting to server: @", packet.addressTCP);
 
             player.admin = false;
diff --git a/core/src/mindustry/core/Renderer.java b/core/src/mindustry/core/Renderer.java
index 52079eb9a0f301d3b40a79be894e1de2d61f95a0..9a851e0a309217a8939857a6e5a4940c2ff548fe 100644
--- a/core/src/mindustry/core/Renderer.java
+++ b/core/src/mindustry/core/Renderer.java
@@ -160,7 +160,7 @@ public class Renderer implements ApplicationListener{
             baseTarget = Mathf.lerp(minZoom, maxZoom, control.input.logicCutsceneZoom);
         }
 
-        float dest = Mathf.clamp(Mathf.round(baseTarget, 0.5f), minScale(), maxScale());
+        float dest = Mathf.clamp(Mathf.round(baseTarget, 0.1f), minScale(), maxScale());
         camerascale = Mathf.lerpDelta(camerascale, dest, 0.1f);
         if(Mathf.equal(camerascale, dest, 0.001f)) camerascale = dest;
         unitLaserOpacity = settings.getInt("unitlaseropacity") / 100f;
diff --git a/core/src/mindustry/core/UI.java b/core/src/mindustry/core/UI.java
index c2e777ac5ee850a0a3af94ade3bd30bf4a35e0ae..7266031779aef1048f5045b26b5281a686edf9d8 100644
--- a/core/src/mindustry/core/UI.java
+++ b/core/src/mindustry/core/UI.java
@@ -595,7 +595,7 @@ public class UI implements ApplicationListener, Loadable{
         t.touchable = Touchable.disabled;
         t.margin(8f).add(text).style(Styles.outlineLabel).labelAlign(Align.center);
         t.update(() -> t.setPosition(Core.graphics.getWidth()/2f, Core.graphics.getHeight()/2f, Align.center));
-        t.actions(Actions.fadeOut(duration, Interp.pow4In), Actions.remove());
+        t.actions(Actions.fadeOut(Math.min(duration,30f), Interp.pow4In), Actions.remove());
         t.pack();
         t.act(0.1f);
         Core.scene.add(t);
@@ -734,23 +734,7 @@ public class UI implements ApplicationListener, Loadable{
     }
 
     public static String formatAmount(long number){
-        //prevent things like bars displaying erroneous representations of casted infinities
-        if(number == Long.MAX_VALUE) return "∞";
-        if(number == Long.MIN_VALUE) return "-∞";
-
-        long mag = Math.abs(number);
-        String sign = number < 0 ? "-" : "";
-        if(mag >= 1_000_000_000){
-            return sign + Strings.fixed(mag / 1_000_000_000f, 1) + "[gray]" + billions + "[]";
-        }else if(mag >= 1_000_000){
-            return sign + Strings.fixed(mag / 1_000_000f, 1) + "[gray]" + millions + "[]";
-        }else if(mag >= 10_000){
-            return number / 1000 + "[gray]" + thousands + "[]";
-        }else if(mag >= 1000){
-            return sign + Strings.fixed(mag / 1000f, 1) + "[gray]" + thousands + "[]";
-        }else{
-            return number + "";
-        }
+        return mindustryX.features.ui.FormatDefault.format(number);
     }
 
     public static int roundAmount(int number){
diff --git a/core/src/mindustry/game/Schematics.java b/core/src/mindustry/game/Schematics.java
index 2db321df7e134094f76a43b848b89c86127b158f..65d9730a4b62680e00f087f8a98781faa1eae6f9 100644
--- a/core/src/mindustry/game/Schematics.java
+++ b/core/src/mindustry/game/Schematics.java
@@ -97,7 +97,9 @@ public class Schematics implements Loadable{
         all.sort();
 
         if(shadowBuffer == null){
-            Core.app.post(() -> shadowBuffer = new FrameBuffer(maxSchematicSize + padding + 8, maxSchematicSize + padding + 8));
+            //MDTX: support larger schematic, maxSchematicSize may be MAX_VALUE
+            var size = Math.min(maxSchematicSize, 1024) + padding + 8;
+            Core.app.post(() -> shadowBuffer = new FrameBuffer(size, size));
         }
     }
 
@@ -541,7 +543,7 @@ public class Schematics implements Loadable{
         try(DataInputStream stream = new DataInputStream(new InflaterInputStream(input))){
             short width = stream.readShort(), height = stream.readShort();
 
-            if(width > 128 || height > 128) throw new IOException("Invalid schematic: Too large (max possible size is 128x128)");
+            if(width > 1024 || height > 1024) throw new IOException("Invalid schematic: Too large (max possible size is 128x128)");
 
             StringMap map = new StringMap();
             int tags = stream.readUnsignedByte();
@@ -567,7 +569,7 @@ public class Schematics implements Loadable{
 
             int total = stream.readInt();
 
-            if(total > 128 * 128) throw new IOException("Invalid schematic: Too many blocks.");
+            if(maxSchematicSize != Integer.MAX_VALUE && total > maxSchematicSize * maxSchematicSize) throw new IOException("Invalid schematic: Too many blocks.");
 
             Seq<Stile> tiles = new Seq<>(total);
             for(int i = 0; i < total; i++){
diff --git a/core/src/mindustry/graphics/MinimapRenderer.java b/core/src/mindustry/graphics/MinimapRenderer.java
index 6ad5544c423fc51c9789fdcc9f14720cdd983e2a..2897710efebae4825f399a67c230856e0457c883 100644
--- a/core/src/mindustry/graphics/MinimapRenderer.java
+++ b/core/src/mindustry/graphics/MinimapRenderer.java
@@ -102,7 +102,8 @@ public class MinimapRenderer{
     }
 
     public void setZoom(float amount){
-        zoom = Mathf.clamp(amount, 1f, Math.min(world.width(), world.height()) / baseSize / 2f);
+        //MDTX ARC: max instead min to view full map.
+        zoom = Mathf.clamp(amount, 1f, Math.max(world.width(), world.height()) / baseSize / 2f);
     }
 
     public float getZoom(){
@@ -296,7 +297,8 @@ public class MinimapRenderer{
     public @Nullable TextureRegion getRegion(){
         if(texture == null) return null;
 
-        float sz = Mathf.clamp(baseSize * zoom, baseSize, Math.min(world.width(), world.height()));
+        //MDTX: use max to render full minimap.
+        float sz = Mathf.clamp(baseSize * zoom, baseSize, Math.max(world.width(), world.height()));
         float dx = (Core.camera.position.x / tilesize);
         float dy = (Core.camera.position.y / tilesize);
         dx = Mathf.clamp(dx, sz, world.width() - sz);
diff --git a/core/src/mindustry/ui/dialogs/JoinDialog.java b/core/src/mindustry/ui/dialogs/JoinDialog.java
index 093c36beb214adabf18f35c4bb4992e78969d1bc..087470ad988b649d17d02c6d252796d58c3db41e 100644
--- a/core/src/mindustry/ui/dialogs/JoinDialog.java
+++ b/core/src/mindustry/ui/dialogs/JoinDialog.java
@@ -60,11 +60,9 @@ public class JoinDialog extends BaseDialog{
 
         loadServers();
 
-        //mobile players don't get information >:(
-        boolean infoButton = !steam && !mobile;
-
-        if(infoButton) buttons.add().width(60f);
-        buttons.add().growX().width(-1);
+        //MDTX: keep for compatibility to CLaj Mod
+        buttons.add().width(Float.MIN_NORMAL).pad(0);
+        buttons.add().width(Float.MIN_NORMAL).pad(0);
 
         addCloseButton(mobile ? 190f : 210f);
 
@@ -72,9 +70,14 @@ public class JoinDialog extends BaseDialog{
             renaming = null;
             add.show();
         });
-
-        buttons.add().growX().width(-1);
-        if(infoButton) buttons.button("?", () -> ui.showInfo("@join.info")).size(60f, 64f);
+        //MDTX: keep for compatibility to CLaj Mod
+        buttons.add().width(Float.MIN_NORMAL).pad(0);
+        buttons.add().width(Float.MIN_NORMAL).pad(0);
+        //MDTX: better fixed info button
+        buttons.addChild(new Table(t -> {
+            t.setFillParent(true);
+            t.right().bottom().button("?", () -> ui.showInfo("@join.info")).size(60f, 64f);
+        }));
 
         add = new BaseDialog("@joingame.title");
         add.cont.add("@joingame.ip").padRight(5f).left();
diff --git a/core/src/mindustry/ui/dialogs/KeybindDialog.java b/core/src/mindustry/ui/dialogs/KeybindDialog.java
index 58c186ff3151d8bba395b1bc1a51a821b81c40e1..b3e0318791e123b784e9953b9fb39ea273888ee0 100644
--- a/core/src/mindustry/ui/dialogs/KeybindDialog.java
+++ b/core/src/mindustry/ui/dialogs/KeybindDialog.java
@@ -143,7 +143,7 @@ public class KeybindDialog extends Dialog{
                         rebindAxis = true;
                         rebindMin = true;
                         openDialog(section, keybind);
-                    }).width(130f);
+                    }).width(100f);
                 }else{
                     table.add(bundle.get("keybind." + keybind.name() + ".name", Strings.capitalize(keybind.name())), Color.white).left().padRight(40).padLeft(8);
                     table.label(() -> keybinds.get(section, keybind).key.toString()).color(Pal.accent).left().minWidth(90).padRight(20);
@@ -152,9 +152,12 @@ public class KeybindDialog extends Dialog{
                         rebindAxis = false;
                         rebindMin = false;
                         openDialog(section, keybind);
-                    }).width(130f);
+                    }).width(100f);
                 }
-                table.button("@settings.resetKey", tstyle, () -> keybinds.resetToDefault(section, keybind)).width(130f).pad(2f).padLeft(4f);
+                table.button("取消绑定", tstyle, () -> {
+                    section.binds.get(section.device.type(), OrderedMap::new).put(keybind, new Axis(KeyCode.unset));
+                }).width(100f).pad(2f).padLeft(4f);
+                table.button("@settings.resetKey", tstyle, () -> keybinds.resetToDefault(section, keybind)).width(100f).pad(2f).padLeft(4f);
                 table.row();
             }
 
diff --git a/core/src/mindustry/ui/fragments/BlockInventoryFragment.java b/core/src/mindustry/ui/fragments/BlockInventoryFragment.java
index 54a36cde6eee102c9c8f3bfd5e4c76a2f4d0f1e1..f06641d677746d1f70880bea7c972ab1f65970fa 100644
--- a/core/src/mindustry/ui/fragments/BlockInventoryFragment.java
+++ b/core/src/mindustry/ui/fragments/BlockInventoryFragment.java
@@ -138,7 +138,7 @@ public class BlockInventoryFragment{
             }
         });
 
-        int cols = 3;
+        int cols = mindustryX.features.SettingsV2.blockInventoryWidth.getValue();
         int row = 0;
 
         table.margin(4f);
diff --git a/core/src/mindustry/ui/fragments/ChatFragment.java b/core/src/mindustry/ui/fragments/ChatFragment.java
index cfff9282efc61f93ebbfb1805a9c4ba76020b62d..61f2d769fa4bb807f58b67eea14072783acf2b6c 100644
--- a/core/src/mindustry/ui/fragments/ChatFragment.java
+++ b/core/src/mindustry/ui/fragments/ChatFragment.java
@@ -5,6 +5,7 @@ import arc.Input.*;
 import arc.func.*;
 import arc.graphics.*;
 import arc.graphics.g2d.*;
+import arc.input.*;
 import arc.math.*;
 import arc.scene.*;
 import arc.scene.ui.*;
@@ -30,7 +31,7 @@ public class ChatFragment extends Table{
     private boolean shown = false;
     private TextField chatfield;
     private Label fieldlabel = new Label(">");
-    private ChatMode mode = ChatMode.normal;
+    public ChatMode mode = ChatMode.normal;
     private Font font;
     private GlyphLayout layout = new GlyphLayout();
     private float offsetx = Scl.scl(4), offsety = Scl.scl(4), fontoffsetx = Scl.scl(2), chatspace = Scl.scl(50);
@@ -74,6 +75,8 @@ public class ChatFragment extends Table{
                     historyPos--;
                     updateChat();
                 }
+                //MDTX: disable FocusTraversal when tab is used as chat_mode
+                chatfield.setFocusTraversal(keybinds.get(Binding.chat_mode).key != KeyCode.tab);
                 if(input.keyTap(Binding.chat_mode)){
                     nextMode();
                 }
@@ -292,7 +295,7 @@ public class ChatFragment extends Table{
         if(scrollPos > 0) scrollPos++;
     }
 
-    private enum ChatMode{
+    public enum ChatMode{
         normal(""),
         team("/t"),
         admin("/a", player::admin)
diff --git a/core/src/mindustry/world/blocks/defense/Radar.java b/core/src/mindustry/world/blocks/defense/Radar.java
index e24a3368d190f64fdaf002130a76f4799834c9a5..0811c4520865cff648084cbc743a141367a103c5 100644
--- a/core/src/mindustry/world/blocks/defense/Radar.java
+++ b/core/src/mindustry/world/blocks/defense/Radar.java
@@ -3,12 +3,14 @@ package mindustry.world.blocks.defense;
 import arc.graphics.*;
 import arc.graphics.g2d.*;
 import arc.math.*;
+import arc.math.geom.*;
 import arc.struct.*;
 import arc.util.io.*;
 import mindustry.*;
 import mindustry.annotations.Annotations.*;
 import mindustry.gen.*;
 import mindustry.graphics.*;
+import mindustry.input.*;
 import mindustry.world.*;
 import mindustry.world.meta.*;
 
@@ -45,6 +47,13 @@ public class Radar extends Block{
         Drawf.dashCircle(x * tilesize + offset, y * tilesize + offset, fogRadius * tilesize, Pal.accent);
     }
 
+    //MDTX: 自动控制放置距离
+    @Override
+    public void changePlacementPath(Seq<Point2> points, int rotation){
+        var placeRadius2 = Mathf.pow(fogRadius, 2f) * 3;//*2/sqrt(3)/2
+        Placement.calculateNodes(points, this, rotation, (point, other) -> point.dst2(other) <= placeRadius2);
+    }
+
     public class RadarBuild extends Building{
         public float progress;
         public float lastRadius = 0f;
diff --git a/core/src/mindustry/world/blocks/distribution/Router.java b/core/src/mindustry/world/blocks/distribution/Router.java
index cbe6d64d52f66d38be69a897a9a1a2f5b928e631..c5fe7f0080fea29764ebd94f576f1f98549e06a3 100644
--- a/core/src/mindustry/world/blocks/distribution/Router.java
+++ b/core/src/mindustry/world/blocks/distribution/Router.java
@@ -41,7 +41,8 @@ public class Router extends Block{
 
         @Override
         public boolean canControl(){
-            return size == 1;
+            //MDTX ARC: router YES, larger router YES
+            return size != 0;
         }
 
         @Override
diff --git a/core/src/mindustry/world/blocks/production/BeamDrill.java b/core/src/mindustry/world/blocks/production/BeamDrill.java
index 9921e4d7cf3f704a666262479af575a7dec9d668..b5d675df53bf84bc68222c8556480cd3f7a8bd3b 100644
--- a/core/src/mindustry/world/blocks/production/BeamDrill.java
+++ b/core/src/mindustry/world/blocks/production/BeamDrill.java
@@ -181,14 +181,10 @@ public class BeamDrill extends Block{
         }
 
         if(item != null){
-            float width = drawPlaceText(Core.bundle.formatFloat("bar.drillspeed", 60f / getDrillTime(item) * count, 2), x, y, valid);
-            if(!multiple){
-                float dx = x * tilesize + offset - width/2f - 4f, dy = y * tilesize + offset + size * tilesize / 2f + 5, s = iconSmall / 4f;
-                Draw.mixcol(Color.darkGray, 1f);
-                Draw.rect(item.fullIcon, dx, dy - 1, s, s);
-                Draw.reset();
-                Draw.rect(item.fullIcon, dx, dy, s, s);
-            }
+            //MDTX 增加加液速度显示
+            float speed = 60f / getDrillTime(item) * count;
+            String msg = Strings.format("@ [white]@@[] @[white]([cyan]@[])", Iconc.production, item.emoji(), item.localizedName, Strings.autoFixed(speed, 2), Strings.autoFixed(speed * optionalBoostIntensity, 2));
+            drawPlaceText(msg, x, y, valid);
         }else if(invalidItem != null){
             drawPlaceText(Core.bundle.get("bar.drilltierreq"), x, y, false);
         }
diff --git a/desktop/src/mindustry/desktop/DesktopLauncher.java b/desktop/src/mindustry/desktop/DesktopLauncher.java
index f83760561d387249ba114d42356e92a6cf0c4392..9626633e9cd0a8ed3e61bf86f6c460fd0bc8abb5 100644
--- a/desktop/src/mindustry/desktop/DesktopLauncher.java
+++ b/desktop/src/mindustry/desktop/DesktopLauncher.java
@@ -23,6 +23,7 @@ import mindustry.net.*;
 import mindustry.net.Net.*;
 import mindustry.service.*;
 import mindustry.type.*;
+import mindustryX.*;
 
 import java.io.*;
 
@@ -72,6 +73,12 @@ public class DesktopLauncher extends ClientLauncher{
 
     public DesktopLauncher(String[] args){
         Version.init();
+        //MDTX, auto discover steam
+        String steamJar = "addon_steam.jar";
+        if(!OS.isAndroid && !OS.isIos && !VarsX.devVersion && (new Fi(steamJar).exists() || new Fi("steamworks4j.dll", FileType.classpath).exists())){
+            Version.modifier = "steam";
+            if(!new Fi(steamJar).exists()) steamJar = null;
+        }
         boolean useSteam = Version.modifier.contains("steam");
         testMobile = Seq.with(args).contains("-testMobile");
 
@@ -100,7 +107,10 @@ public class DesktopLauncher extends ClientLauncher{
             });
 
             try{
-                SteamAPI.loadLibraries();
+                //MDTX use arc.SharedLibraryLoader
+                new SharedLibraryLoader(steamJar).load("steam_api");
+                new SharedLibraryLoader(steamJar).load("steamworks4j");
+                SteamAPI.skipLoadLibraries();
 
                 if(!SteamAPI.init()){
                     loadError = true;
