From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Fri, 29 Nov 2024 20:16:58 +0800
Subject: [PATCH] =?UTF-8?q?HC:=20v146=20protocol=20compatible=20mode=20(?=
 =?UTF-8?q?=E5=85=81=E8=AE=B8=E8=B7=A8=E7=89=88=E6=9C=AC=E5=8A=A0=E5=85=A5?=
 =?UTF-8?q?v146=E6=9C=8D=E5=8A=A1=E5=99=A8)?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 core/src/mindustry/core/NetClient.java |  2 +-
 core/src/mindustry/net/Net.java        | 35 +++++++++++++++++++++++---
 core/src/mindustry/net/NetworkIO.java  | 11 ++++++++
 core/src/mindustry/net/Packets.java    |  2 +-
 4 files changed, 45 insertions(+), 5 deletions(-)

diff --git a/core/src/mindustry/core/NetClient.java b/core/src/mindustry/core/NetClient.java
index 0d27fbfb034eea3fc39258b8350c28aa4eb69a62..fa656d977e05461ea63cad51e6679485fa41b781 100644
--- a/core/src/mindustry/core/NetClient.java
+++ b/core/src/mindustry/core/NetClient.java
@@ -528,7 +528,7 @@ public class NetClient implements ApplicationListener{
                     Log.warn("Missing entity at @. Skipping block snapshot.", tile);
                     break;
                 }
-                if(tile.build.block.id != block){
+                if(!LogicExt.v146Mode && tile.build.block.id != block){
                     Log.warn("Block ID mismatch at @: @ != @. Skipping block snapshot.", tile, tile.build.block.id, block);
                     break;
                 }
diff --git a/core/src/mindustry/net/Net.java b/core/src/mindustry/net/Net.java
index aaaf83f6e49bd78a88ada08471c53229fc478ac7..d247d184fc43488f32b4de6b982b54a4877ac3fa 100644
--- a/core/src/mindustry/net/Net.java
+++ b/core/src/mindustry/net/Net.java
@@ -19,7 +19,7 @@ import java.nio.*;
 import java.nio.channels.*;
 import java.util.concurrent.*;
 
-import static arc.util.Log.*;
+import static arc.util.Log.debug;
 import static mindustry.Vars.*;
 
 @SuppressWarnings("unchecked")
@@ -27,6 +27,9 @@ public class Net{
     private static Seq<Prov<? extends Packet>> packetProvs = new Seq<>();
     private static Seq<Class<? extends Packet>> packetClasses = new Seq<>();
     private static ObjectIntMap<Class<?>> packetToId = new ObjectIntMap<>();
+    private static Seq<String> oldMappings = new Seq<>();
+    private static ObjectIntMap<String> oldPacketToId = new ObjectIntMap<>();
+    private static IntIntMap oldIdMappings = new IntIntMap();
 
     private boolean server;
     private boolean active;
@@ -49,6 +52,22 @@ public class Net{
 
         //register generated packet classes
         Call.registerPackets();
+        oldMappings.addAll(Core.files.classpath("packetsV146").readString().split(System.lineSeparator()));
+        for(String name : oldMappings){
+            oldPacketToId.put(name, oldPacketToId.size);
+        }
+        for(Class<? extends Packet> packetClass : packetClasses){
+            var oldId = oldPacketToId.get(packetClass.getSimpleName(), -1);
+            if(oldId != -1){
+                oldIdMappings.put(oldId, packetToId.get(packetClass));
+            }else{
+                Log.warn("New packet type: " + packetClass.getSimpleName());
+            }
+        }
+        for(int i = 0; i < oldMappings.size; i++){
+            if(!oldIdMappings.containsKey(i))
+                Log.warn("Deleted packet: " + oldMappings.get(i));
+        }
     }
 
     /** Registers a new packet type for serialization. */
@@ -60,12 +79,16 @@ public class Net{
     }
 
     public static byte getPacketId(Packet packet){
-        int id = packetToId.get(packet.getClass(), -1);
+        int id = LogicExt.v146Mode ? oldPacketToId.get(packet.getClass().getSimpleName(), -1) : packetToId.get(packet.getClass(), -1);
         if(id == -1) throw new ArcRuntimeException("Unknown packet type: " + packet.getClass());
         return (byte)id;
     }
 
     public static <T extends Packet> T newPacket(byte id){
+        if(LogicExt.v146Mode){
+            int id2 = LogicExt.v146Mode ? oldIdMappings.get(id & 0xff, -1) : id & 0xff;
+            return ((Prov<T>)packetProvs.get(id2)).get();
+        }
         return ((Prov<T>)packetProvs.get(id & 0xff)).get();
     }
 
@@ -200,6 +223,7 @@ public class Net{
     }
 
     public void disconnect(){
+        content.setTemporaryMapper(null);
         if(active && !server){
             Log.info("Disconnecting.");
         }
@@ -269,7 +293,12 @@ public class Net{
      * Call to handle a packet being received for the client.
      */
     public void handleClientReceived(Packet object){
-        object.handled();
+        try{
+            object.handled();
+        }catch(RuntimeException e){
+            if(LogicExt.v146Mode && e.getCause() instanceof EOFException){
+            }else throw e;
+        }
         ReplayController.onClientPacket(object);
 
         if(object instanceof StreamBegin b){
diff --git a/core/src/mindustry/net/NetworkIO.java b/core/src/mindustry/net/NetworkIO.java
index e84b86d10ff75d0e1bd8283a541f83777ec67bd7..aa672661197eb49eac2e76a72215be9715881596 100644
--- a/core/src/mindustry/net/NetworkIO.java
+++ b/core/src/mindustry/net/NetworkIO.java
@@ -3,6 +3,7 @@ package mindustry.net;
 import arc.*;
 import arc.util.*;
 import arc.util.io.*;
+import mindustry.content.*;
 import mindustry.core.*;
 import mindustry.ctype.*;
 import mindustry.game.*;
@@ -12,6 +13,7 @@ import mindustry.logic.*;
 import mindustry.maps.Map;
 import mindustry.net.Administration.*;
 import mindustry.type.*;
+import mindustryX.features.*;
 
 import java.io.*;
 import java.nio.*;
@@ -64,6 +66,13 @@ public class NetworkIO{
         try(DataInputStream stream = new DataInputStream(is)){
             Time.clear();
             state.rules = JsonIO.read(Rules.class, stream.readUTF());
+            if(LogicExt.v146Mode){
+                //noinspection deprecation
+                if(!state.rules.hiddenBuildItems.contains(Items.beryllium) && !state.rules.hiddenBuildItems.contains(Items.copper)){
+                    state.rules.planet = Planets.sun;
+                }
+            }
+            if(!LogicExt.v146Mode)
             state.mapLocales = JsonIO.read(MapLocales.class, stream.readUTF());
             state.map = new Map(SaveIO.getSaveWriter().readStringMap(stream));
 
@@ -85,11 +94,13 @@ public class NetworkIO{
             SaveIO.getSaveWriter().readContentHeader(stream);
             SaveIO.getSaveWriter().readMap(stream, world.context);
             SaveIO.getSaveWriter().readTeamBlocks(stream);
+            if(!LogicExt.v146Mode)
             SaveIO.getSaveWriter().readMarkers(stream);
             SaveIO.getSaveWriter().readCustomChunks(stream);
         }catch(IOException e){
             throw new RuntimeException(e);
         }finally{
+            if(!LogicExt.v146Mode)
             content.setTemporaryMapper(null);
         }
     }
diff --git a/core/src/mindustry/net/Packets.java b/core/src/mindustry/net/Packets.java
index 2b1e1f96159da194b1ac521faee8103c6e30019a..d7e7bd7f42d142e39db72c94e917fb5c186f4e36 100644
--- a/core/src/mindustry/net/Packets.java
+++ b/core/src/mindustry/net/Packets.java
@@ -124,7 +124,7 @@ public class Packets{
         @Override
         public void write(Writes buffer){
             buffer.i(clientVersion != 0 ? clientVersion : Version.build);
-            TypeIO.writeString(buffer, versionType);
+            TypeIO.writeString(buffer, clientVersion < 1000 ? "official" : versionType);
             TypeIO.writeString(buffer, name);
             TypeIO.writeString(buffer, locale);
             TypeIO.writeString(buffer, usid);
