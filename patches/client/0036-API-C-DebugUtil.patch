From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Sat, 20 Apr 2024 20:56:38 +0800
Subject: [PATCH] API&C: DebugUtil
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

更多统计信息
way-zer <himc.wicp@gmail.com> on 2024/7/21
---
 core/src/arc/graphics/g2d/MySpriteBatch.java  | 26 +++++++++++++++++++
 core/src/mindustry/ClientLauncher.java        |  2 +-
 core/src/mindustry/core/Logic.java            |  3 +++
 .../mindustry/ui/fragments/HudFragment.java   |  7 +++++
 4 files changed, 37 insertions(+), 1 deletion(-)
 create mode 100644 core/src/arc/graphics/g2d/MySpriteBatch.java

diff --git a/core/src/arc/graphics/g2d/MySpriteBatch.java b/core/src/arc/graphics/g2d/MySpriteBatch.java
new file mode 100644
index 0000000000000000000000000000000000000000..e2bdb30e190a210f25130c423c853892798e4c28
--- /dev/null
+++ b/core/src/arc/graphics/g2d/MySpriteBatch.java
@@ -0,0 +1,26 @@
+package arc.graphics.g2d;
+
+import arc.graphics.*;
+import mindustryX.features.*;
+
+//MDTX: add some DebugUtil count.
+public class MySpriteBatch extends SpriteBatch{
+    @Override
+    protected void flush(){
+        DebugUtil.lastFlushCount++;
+        super.flush();
+    }
+
+    @Override
+    protected void flushRequests(){
+        DebugUtil.lastVertices += requestVertOffset / 6;
+        DebugUtil.lastDrawRequests += numRequests;
+        super.flushRequests();
+    }
+
+    @Override
+    protected void switchTexture(Texture texture){
+        DebugUtil.lastSwitchTexture++;
+        super.switchTexture(texture);
+    }
+}
diff --git a/core/src/mindustry/ClientLauncher.java b/core/src/mindustry/ClientLauncher.java
index 4f88b9fd412f09073bdb1e9aff277650a4bbde09..f44dceb09dfef63bd11d3b54a75d0183976bb13c 100644
--- a/core/src/mindustry/ClientLauncher.java
+++ b/core/src/mindustry/ClientLauncher.java
@@ -76,7 +76,7 @@ public abstract class ClientLauncher extends ApplicationCore implements Platform
         });
 
         UI.loadColors();
-        batch = new SpriteBatch();
+        batch = new MySpriteBatch();
         assets = new AssetManager();
         assets.setLoader(Texture.class, "." + mapExtension, new MapPreviewLoader());
 
diff --git a/core/src/mindustry/core/Logic.java b/core/src/mindustry/core/Logic.java
index d1c7c5ca602c6c765cc62c9e2f0b384c3ad0a254..b640803511bcae93b5c8d8c71ffdc23b4292e8c6 100644
--- a/core/src/mindustry/core/Logic.java
+++ b/core/src/mindustry/core/Logic.java
@@ -16,6 +16,7 @@ import mindustry.type.*;
 import mindustry.type.Weather.*;
 import mindustry.world.*;
 import mindustry.world.blocks.storage.CoreBlock.*;
+import mindustryX.features.*;
 
 import java.util.*;
 
@@ -411,6 +412,7 @@ public class Logic implements ApplicationListener{
 
     @Override
     public void update(){
+        var start = Time.nanos();
         Events.fire(Trigger.update);
         universe.updateGlobal();
 
@@ -494,6 +496,7 @@ public class Logic implements ApplicationListener{
         }else if(netServer.isWaitingForPlayers() && runStateCheck){
             checkGameState();
         }
+        DebugUtil.logicTime = Time.timeSinceNanos(start);
     }
 
     /** @return whether the wave timer is paused due to enemies */
diff --git a/core/src/mindustry/ui/fragments/HudFragment.java b/core/src/mindustry/ui/fragments/HudFragment.java
index 23d4ad03c71131265f82478a0285110cdf71059d..6f8bb852edfe397c4abbbe9268f8b5648c19add3 100644
--- a/core/src/mindustry/ui/fragments/HudFragment.java
+++ b/core/src/mindustry/ui/fragments/HudFragment.java
@@ -29,6 +29,7 @@ import mindustry.type.*;
 import mindustry.ui.*;
 import mindustry.world.blocks.storage.*;
 import mindustry.world.blocks.storage.CoreBlock.*;
+import mindustryX.features.*;
 
 import static mindustry.Vars.*;
 import static mindustry.gen.Tex.*;
@@ -282,6 +283,12 @@ public class HudFragment{
 
                 info.label(() -> fps.get(Core.graphics.getFramesPerSecond())).left().style(Styles.outlineLabel).name("fps");
                 info.row();
+                info.label(() -> Strings.format("LG/DW/UI(ms) @/@/@", Time.nanosToMillis(DebugUtil.logicTime), Time.nanosToMillis(DebugUtil.rendererTime), Time.nanosToMillis(DebugUtil.uiTime)))
+                .left().style(Styles.outlineLabel).name("cpuTime");
+                info.row();
+                info.label(() -> Strings.format("D/V/T/F @/@/@/@",
+                DebugUtil.lastDrawRequests, DebugUtil.lastVertices, DebugUtil.lastSwitchTexture, DebugUtil.lastFlushCount)).left().style(Styles.outlineLabel).name("draw");
+                info.row();
 
                 if(android){
                     info.label(() -> memnative.get((int)(Core.app.getJavaHeap() / 1024 / 1024), (int)(Core.app.getNativeHeap() / 1024 / 1024))).left().style(Styles.outlineLabel).name("memory2");
