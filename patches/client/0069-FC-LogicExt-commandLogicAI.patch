From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Mon, 14 Jul 2025 23:48:57 +0800
Subject: [PATCH] FC(LogicExt) commandLogicAI

---
 core/src/mindustry/entities/comp/UnitComp.java         | 3 ++-
 core/src/mindustry/input/DesktopInput.java             | 4 ++--
 core/src/mindustry/input/InputHandler.java             | 4 ++--
 core/src/mindustry/ui/fragments/PlacementFragment.java | 2 +-
 4 files changed, 7 insertions(+), 6 deletions(-)

diff --git a/core/src/mindustry/entities/comp/UnitComp.java b/core/src/mindustry/entities/comp/UnitComp.java
index 68a22f48fc6129a3e93092366748bd828d4606aa..9c94ab73308e4a9130f76088bfc85981ac01d29d 100644
--- a/core/src/mindustry/entities/comp/UnitComp.java
+++ b/core/src/mindustry/entities/comp/UnitComp.java
@@ -28,6 +28,7 @@ import mindustry.world.blocks.*;
 import mindustry.world.blocks.environment.*;
 import mindustry.world.blocks.payloads.*;
 import mindustry.world.meta.*;
+import mindustryX.features.*;
 
 import static mindustry.Vars.*;
 import static mindustry.logic.GlobalVars.*;
@@ -475,7 +476,7 @@ abstract class UnitComp implements Healthc, Physicsc, Hitboxc, Statusc, Teamc, I
 
     /** @return whether the unit *can* be commanded, even if its controller is not currently CommandAI. */
     public boolean allowCommand(){
-        return controller instanceof CommandAI;
+        return controller instanceof CommandAI || (LogicExt.commandLogicAI.get() && controller instanceof LogicAI ai && (ai.controller == null || !ai.controller.block.privileged) && type.allowChangeCommands);
     }
 
     /** @return whether the unit has a CommandAI controller */
diff --git a/core/src/mindustry/input/DesktopInput.java b/core/src/mindustry/input/DesktopInput.java
index de0a9942b8214c8251cf05452d471278b4d8293c..b4366f7dcc16c27c81c8c55da412853c8a85f3e8 100644
--- a/core/src/mindustry/input/DesktopInput.java
+++ b/core/src/mindustry/input/DesktopInput.java
@@ -318,7 +318,7 @@ public class DesktopInput extends InputHandler{
                     selectedUnits.set(selectedCommandUnits(Tmp.r1.x, Tmp.r1.y, Tmp.r1.width, Tmp.r1.height).removeAll(u -> !u.type.controlSelectGlobal));
                 }else {
                     for(var unit : player.team().data().units){
-                        if(unit.isCommandable() && unit.type.controlSelectGlobal){
+                        if(unit.allowCommand() && unit.type.controlSelectGlobal){
                             selectedUnits.add(unit);
                         }
                     }
@@ -334,7 +334,7 @@ public class DesktopInput extends InputHandler{
                     selectedUnits.set(selectedCommandUnits(Tmp.r1.x, Tmp.r1.y, Tmp.r1.width, Tmp.r1.height, u -> u instanceof Payloadc));
                 }else {
                     for(var unit : player.team().data().units){
-                        if(unit.isCommandable() && unit instanceof Payloadc){
+                        if(unit.allowCommand() && unit instanceof Payloadc){
                             selectedUnits.add(unit);
                         }
                     }
diff --git a/core/src/mindustry/input/InputHandler.java b/core/src/mindustry/input/InputHandler.java
index 9338bcd74048f6b8090d881e3f958b46f5614222..9ec909a71113dff5784b2ea5156d59fb2438e5b4 100644
--- a/core/src/mindustry/input/InputHandler.java
+++ b/core/src/mindustry/input/InputHandler.java
@@ -2001,7 +2001,7 @@ public abstract class InputHandler implements InputProcessor, GestureListener{
         tmpUnits.clear();
         float rad = 4f;
         tree.intersect(x - rad/2f, y - rad/2f, rad, rad, tmpUnits);
-        return tmpUnits.min(u -> u.isCommandable(), u -> u.dst(x, y) - u.hitSize/2f);
+        return tmpUnits.min(u -> u.allowCommand(), u -> u.dst(x, y) - u.hitSize/2f);
     }
 
     public @Nullable Unit selectedEnemyUnit(float x, float y){
@@ -2023,7 +2023,7 @@ public abstract class InputHandler implements InputProcessor, GestureListener{
         tmpUnits.clear();
         float rad = 4f;
         tree.intersect(Tmp.r1.set(x - rad/2f, y - rad/2f, rad*2f + w, rad*2f + h).normalize(), tmpUnits);
-        tmpUnits.removeAll(u -> !u.isCommandable() || !predicate.get(u));
+        tmpUnits.removeAll(u -> !u.allowCommand() || !predicate.get(u));
         return tmpUnits;
     }
 
diff --git a/core/src/mindustry/ui/fragments/PlacementFragment.java b/core/src/mindustry/ui/fragments/PlacementFragment.java
index 9e5446227c8d887991ad0097373818d89667684f..41c2cd7a49f034a65a7e3277b3e7b50c032a850b 100644
--- a/core/src/mindustry/ui/fragments/PlacementFragment.java
+++ b/core/src/mindustry/ui/fragments/PlacementFragment.java
@@ -672,7 +672,7 @@ public class PlacementFragment{
                                         control.input.selectedUnits.clear();
                                         control.input.commandBuildings.clear();
                                         for(var unit : player.team().data().units){
-                                            if(unit.isCommandable()){
+                                            if(unit.allowCommand()){
                                                 control.input.selectedUnits.add(unit);
                                             }
                                         }
