From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Wed, 28 Aug 2024 21:57:23 +0800
Subject: [PATCH] FC(FuncX) focusLogicController

---
 core/src/mindustry/input/Binding.java         |  7 +++---
 core/src/mindustryX/Hooks.java                | 12 +++++-----
 .../features/func/focusLogicController.kt     | 22 +++++++++++++++++++
 3 files changed, 33 insertions(+), 8 deletions(-)
 create mode 100644 core/src/mindustryX/features/func/focusLogicController.kt

diff --git a/core/src/mindustry/input/Binding.java b/core/src/mindustry/input/Binding.java
index 4bb4579c66cc80af91b8e78a0f37dc9749a22822..fcbcc2483e5d7dbc71ce769840cdbbd61c3e8095 100644
--- a/core/src/mindustry/input/Binding.java
+++ b/core/src/mindustry/input/Binding.java
@@ -100,10 +100,11 @@ public enum Binding implements KeyBind{
     console(KeyCode.f8),
 
     //MDTX
-    toggle_unit(KeyCode.unknown, "mindustryX"),
+    toggle_unit(KeyCode.unset, "mindustryX"),
     point(KeyCode.j),
-    lockonLastMark(KeyCode.unknown),
-    toggle_block_render(KeyCode.unknown),
+    lockonLastMark(KeyCode.unset),
+    toggle_block_render(KeyCode.unset),
+    focusLogicController(KeyCode.unset),
     ;
 
     private final KeybindValue defaultValue;
diff --git a/core/src/mindustryX/Hooks.java b/core/src/mindustryX/Hooks.java
index f323267b874868d3c8c05919ccc1ea92821f4918..b852e5ec3bb8a949b58d1909ecf93764db33ea19 100644
--- a/core/src/mindustryX/Hooks.java
+++ b/core/src/mindustryX/Hooks.java
@@ -6,14 +6,13 @@ import arc.util.*;
 import mindustry.*;
 import mindustry.gen.*;
 import mindustry.input.*;
-import mindustryX.features.*;
 import mindustryX.features.Settings;
+import mindustryX.features.*;
+import mindustryX.features.func.*;
 
 import java.net.*;
 import java.util.*;
 
-import static arc.Core.*;
-
 public class Hooks implements ApplicationListener{
     /** invoke before `Vars.init`. Note that may be executed from `Vars.loadAsync` */
     public static void beforeInit(){
@@ -78,8 +77,11 @@ public class Hooks implements ApplicationListener{
         if(Core.input.keyTap(Binding.point)){
             MarkerType.selected.markWithMessage(Core.input.mouseWorld());
         }
-        if(input.keyTap(Binding.toggle_block_render)){
-            settings.put("blockRenderLevel", (RenderExt.blockRenderLevel + 1) % 3);
+        if(Core.input.keyTap(Binding.toggle_block_render)){
+            Core.settings.put("blockRenderLevel", (RenderExt.blockRenderLevel + 1) % 3);
+        }
+        if(Core.input.keyTap(Binding.focusLogicController)){
+            FuncX.focusLogicController();
         }
     }
 
diff --git a/core/src/mindustryX/features/func/focusLogicController.kt b/core/src/mindustryX/features/func/focusLogicController.kt
new file mode 100644
index 0000000000000000000000000000000000000000..dc1694e19041ad94236b10bc2bad7353efc9ab72
--- /dev/null
+++ b/core/src/mindustryX/features/func/focusLogicController.kt
@@ -0,0 +1,22 @@
+@file:JvmName("FuncX")
+@file:JvmMultifileClass
+
+package mindustryX.features.func
+
+import arc.Core
+import arc.util.Tmp
+import mindustry.Vars
+import mindustry.ai.types.LogicAI
+import mindustry.entities.Units
+import mindustryX.features.MarkerType
+import mindustryX.features.RenderExt
+
+fun focusLogicController() {
+    val mouse = Core.input.mouseWorld()
+    val logic = Units.closestOverlap(Vars.player.team(), mouse.x, mouse.y, 5f) { true }?.let { (it.controller() as? LogicAI)?.controller }
+        ?: (if (RenderExt.showOtherInfo) Units.closestEnemy(Vars.player.team(), mouse.x, mouse.y, 5f) { true }?.let { (it.controller() as? LogicAI)?.controller } else null)
+        ?: Core.input.mouseWorld().let { Vars.world.buildWorld(it.x, it.y)?.lastLogicController }
+        ?: return
+    Vars.control.input.panCamera(Tmp.v1.set(logic))
+    MarkerType.mark.at(logic)
+}
\ No newline at end of file
