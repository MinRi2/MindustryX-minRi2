From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Sun, 8 Sep 2024 15:43:00 +0800
Subject: [PATCH] =?UTF-8?q?FC(LogicExt)=20worldCreator=20(=E5=88=9B?=
 =?UTF-8?q?=E4=B8=96=E7=A5=9E)=20allUnlocked=20(=E8=A7=A3=E7=A6=81)?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 .../mindustry/ctype/UnlockableContent.java    |  5 ++-
 .../mindustry/ui/dialogs/DatabaseDialog.java  |  5 ++-
 .../ui/fragments/PlacementFragment.java       | 32 ++++++++++++-
 core/src/mindustry/world/Block.java           |  4 +-
 core/src/mindustry/world/Build.java           | 45 +++++++++++++++++++
 .../mindustry/world/blocks/ItemSelection.java |  3 +-
 6 files changed, 87 insertions(+), 7 deletions(-)

diff --git a/core/src/mindustry/ctype/UnlockableContent.java b/core/src/mindustry/ctype/UnlockableContent.java
index c4ed0bf7081ef5c074baf1dd10339ad888bce6a3..2ce391f57a863b97823bf6e83952280323d2dac4 100644
--- a/core/src/mindustry/ctype/UnlockableContent.java
+++ b/core/src/mindustry/ctype/UnlockableContent.java
@@ -17,6 +17,7 @@ import mindustry.graphics.MultiPacker.*;
 import mindustry.type.*;
 import mindustry.ui.*;
 import mindustry.world.meta.*;
+import mindustryX.features.*;
 
 import static mindustry.Vars.*;
 
@@ -223,7 +224,7 @@ public abstract class UnlockableContent extends MappableContent{
     }
 
     public boolean unlockedNowHost(){
-        return !state.isCampaign() || unlockedHost();
+        return LogicExt.allUnlocked || !state.isCampaign() || unlockedHost();
     }
 
     /** @return in multiplayer, whether this is unlocked for the host player, otherwise, whether it is unlocked for the local player (same as unlocked()) */
@@ -235,7 +236,7 @@ public abstract class UnlockableContent extends MappableContent{
 
     /** @return whether this content is unlocked, or the player is in a custom (non-campaign) game. */
     public boolean unlockedNow(){
-        return unlocked() || !state.isCampaign();
+        return LogicExt.allUnlocked || unlocked() || !state.isCampaign();
     }
 
     public boolean unlocked(){
diff --git a/core/src/mindustry/ui/dialogs/DatabaseDialog.java b/core/src/mindustry/ui/dialogs/DatabaseDialog.java
index e8ffe187781f3bc5624e48a42c53aae2adc71713..efc8530fbdb5837cb14d4a0e80de8e8ffbdac588 100644
--- a/core/src/mindustry/ui/dialogs/DatabaseDialog.java
+++ b/core/src/mindustry/ui/dialogs/DatabaseDialog.java
@@ -18,6 +18,7 @@ import mindustry.graphics.*;
 import mindustry.type.*;
 import mindustry.ui.*;
 import mindustry.world.*;
+import mindustryX.features.*;
 
 import static arc.Core.*;
 import static mindustry.Vars.*;
@@ -101,7 +102,9 @@ public class DatabaseDialog extends BaseDialog{
             ContentType type = ContentType.all[j];
 
             Seq<UnlockableContent> array = allContent[j]
-                .select(c -> c instanceof UnlockableContent u && !u.isHidden() && (tab == Planets.sun || u.allDatabaseTabs || u.databaseTabs.contains(tab)) &&
+                .select(c -> c instanceof UnlockableContent u &&
+                    (LogicExt.allUnlocked || !u.isHidden()) &&
+                    (tab == Planets.sun || u.allDatabaseTabs || u.databaseTabs.contains(tab)) &&
                     (text.isEmpty() || u.localizedName.toLowerCase().contains(text))).as();
 
             if(array.size == 0) continue;
diff --git a/core/src/mindustry/ui/fragments/PlacementFragment.java b/core/src/mindustry/ui/fragments/PlacementFragment.java
index 6b42c3c3fc52e09ca98a51d1fb9b0891834a4ebd..53076e919c5bdb66c61619208c5234a22c943250 100644
--- a/core/src/mindustry/ui/fragments/PlacementFragment.java
+++ b/core/src/mindustry/ui/fragments/PlacementFragment.java
@@ -25,13 +25,16 @@ import mindustry.input.*;
 import mindustry.type.*;
 import mindustry.ui.*;
 import mindustry.world.*;
+import mindustry.world.blocks.*;
 import mindustry.world.blocks.ConstructBlock.*;
 import mindustry.world.meta.*;
+import mindustryX.features.*;
 
 import static mindustry.Vars.*;
 
 public class PlacementFragment{
     final int rowWidth = 4;
+    private boolean lastAllUnlocked = LogicExt.allUnlocked;
 
     public Category currentCategory = Category.distribution;
 
@@ -108,6 +111,10 @@ public class PlacementFragment{
                 if(nextFlowBuild.flowItems() != null) nextFlowBuild.flowItems().updateFlow();
                 if(nextFlowBuild.liquids != null) nextFlowBuild.liquids.updateFlow();
             }
+
+            if(lastAllUnlocked != LogicExt.allUnlocked){
+                rebuild();
+            }
         });
     }
 
@@ -128,6 +135,27 @@ public class PlacementFragment{
         if(Core.input.keyTap(Binding.pick) && player.isBuilder() && !Core.scene.hasDialog()){ //mouse eyedropper select
             var build = world.buildWorld(Core.input.mouseWorld().x, Core.input.mouseWorld().y);
 
+            if (build == null && LogicExt.worldCreator) {
+                var tile = world.tileWorld(Core.input.mouseWorld().x, Core.input.mouseWorld().y);
+                if (tile != null) {
+                    Block target;
+                    if (tile.block() != Blocks.air) {
+                        target = tile.block();
+                    }
+                    else if (tile.overlay() != Blocks.air) {
+                        target = tile.overlay();
+                    }
+                    else {
+                        target = tile.floor();
+                    }
+                    if (target != Blocks.air && target.isVisible()) {
+                        input.block = target;
+                        currentCategory = input.block.category;
+                        return true;
+                    }
+
+                }
+            }
             //can't middle click buildings in fog
             if(build != null && build.inFogTo(player.team())){
                 build = null;
@@ -263,6 +291,7 @@ public class PlacementFragment{
     }
 
     public void build(Group parent){
+        lastAllUnlocked = LogicExt.allUnlocked;
         parent.fill(full -> {
             toggler = full;
             full.bottom().right().visible(() -> {
@@ -288,6 +317,7 @@ public class PlacementFragment{
 
                     for(Block block : getUnlockedByCategory(currentCategory)){
                         if(!unlocked(block)) continue;
+                        if (block == Blocks.air || block instanceof ConstructBlock) continue;
                         if(index++ % rowWidth == 0){
                             blockTable.row();
                         }
@@ -739,7 +769,7 @@ public class PlacementFragment{
     }
 
     boolean unlocked(Block block){
-        return block.unlockedNowHost() && block.placeablePlayer && block.environmentBuildable() &&
+        return LogicExt.allUnlocked || block.unlockedNowHost() && block.placeablePlayer && block.environmentBuildable() &&
             block.supportsEnv(state.rules.env);
     }
 
diff --git a/core/src/mindustry/world/Block.java b/core/src/mindustry/world/Block.java
index 2cf7bef8c849e77730559938b53a876adb0c7a65..e3b63f597bb1cdc3302a745080976b620064d325 100644
--- a/core/src/mindustry/world/Block.java
+++ b/core/src/mindustry/world/Block.java
@@ -909,11 +909,11 @@ public class Block extends UnlockableContent implements Senseable{
     }
 
     public boolean isVisible(){
-        return !isHidden() && (state.rules.editor || (!state.rules.hideBannedBlocks || !state.rules.isBanned(this)));
+        return LogicExt.allUnlocked || !isHidden() && (state.rules.editor || (!state.rules.hideBannedBlocks || !state.rules.isBanned(this)));
     }
 
     public boolean isPlaceable(){
-        return isVisible() && (!state.rules.isBanned(this) || state.rules.editor) && supportsEnv(state.rules.env);
+        return LogicExt.worldCreator || isVisible() && (!state.rules.isBanned(this) || state.rules.editor) && supportsEnv(state.rules.env);
     }
 
     /** @return whether this block supports a specific environment. */
diff --git a/core/src/mindustry/world/Build.java b/core/src/mindustry/world/Build.java
index d0129890fc8caa1b9f12eb222e62a52f35386481..318803ab697d240be02ca6e158c926f621507a4b 100644
--- a/core/src/mindustry/world/Build.java
+++ b/core/src/mindustry/world/Build.java
@@ -14,7 +14,10 @@ import mindustry.game.Teams.*;
 import mindustry.gen.*;
 import mindustry.world.blocks.*;
 import mindustry.world.blocks.ConstructBlock.*;
+import mindustry.world.blocks.environment.Floor;
+import mindustry.world.blocks.environment.OverlayFloor;
 import mindustry.world.blocks.storage.CoreBlock.*;
+import mindustryX.features.*;
 
 import static mindustry.Vars.*;
 
@@ -73,6 +76,36 @@ public class Build{
             return;
         }
 
+        if(LogicExt.worldCreator){
+            Tile tile = world.tile(x, y);
+            if(tile == null) return;
+            if(result == Blocks.cliff) {
+                int rotationb = 0;
+                for(int i = 0; i < 8; i++){
+                    Tile other = world.tiles.get(tile.x + Geometry.d8[i].x, tile.y + Geometry.d8[i].y);
+                    if(other != null && !other.floor().hasSurface()){
+                        rotationb |= (1 << i);
+                    }
+                }
+
+                if(rotationb != 0){
+                    tile.setBlock(Blocks.cliff);
+                }
+
+                tile.data = (byte)rotationb;
+                return;
+            };
+            if(result instanceof OverlayFloor){
+                tile.setOverlay(result);
+                return;
+            }
+            if(result instanceof Floor floor){
+                tile.setFloor(floor);
+                pathfinder.updateTile(tile);
+                return;
+            }
+        }
+
         Tile tile = world.tile(x, y);
 
         //just in case
@@ -174,6 +207,17 @@ public class Build{
 
     /** Returns whether a tile can be placed at this location by this team. Ignores units at this location. */
     public static boolean validPlaceIgnoreUnits(Block type, Team team, int x, int y, int rotation, boolean checkVisible){
+        if (LogicExt.worldCreator) {
+            Tile tile = world.tile(x, y);
+            if (tile == null) return false;
+            if (type instanceof OverlayFloor of) {
+                return !(tile.overlay == of);
+            }
+            if (type instanceof Floor f) {
+                return !(tile.floor == f);
+            }
+            return true;
+        }
         //the wave team can build whatever they want as long as it's visible - banned blocks are not applicable
         if(type == null || (!state.rules.editor && (checkVisible && (!type.environmentBuildable() || (!type.isPlaceable() && !(state.rules.waves && team == state.rules.waveTeam && type.isVisible())))))){
             return false;
@@ -300,6 +344,7 @@ public class Build{
     /** @return whether the tile at this position is breakable by this team */
     public static boolean validBreak(Team team, int x, int y){
         Tile tile = world.tile(x, y);
+        if(LogicExt.worldCreator && tile.block() != Blocks.air) return true;
         return tile != null && tile.block() != Blocks.air && (tile.block().canBreak(tile) && (tile.breakable() || state.rules.allowEnvironmentDeconstruct)) && tile.interactable(team);
     }
 }
diff --git a/core/src/mindustry/world/blocks/ItemSelection.java b/core/src/mindustry/world/blocks/ItemSelection.java
index 6bbe2ba127c5f3126bd7c42badea0a1d86d15db3..87952e828ff62f146ef720cde4d2de8b7179fa0b 100644
--- a/core/src/mindustry/world/blocks/ItemSelection.java
+++ b/core/src/mindustry/world/blocks/ItemSelection.java
@@ -12,6 +12,7 @@ import mindustry.ctype.*;
 import mindustry.gen.*;
 import mindustry.ui.*;
 import mindustry.world.*;
+import mindustryX.features.*;
 
 import static mindustry.Vars.*;
 
@@ -65,7 +66,7 @@ public class ItemSelection{
 
             Seq<T> list = items.select(u -> (text.isEmpty() || u.localizedName.toLowerCase().contains(text.toLowerCase())));
             for(T item : list){
-                if(!item.unlockedNow() || !item.isOnPlanet(state.getPlanet()) || item.isHidden()) continue;
+                if(!LogicExt.allUnlocked && (!item.unlockedNow() || !item.isOnPlanet(state.getPlanet()) || item.isHidden())) continue;
 
                 ImageButton button = cont.button(Tex.whiteui, Styles.clearNoneTogglei, Mathf.clamp(item.selectionSize, 0f, 40f), () -> {
                     if(closeSelect) control.input.config.hideConfig();
