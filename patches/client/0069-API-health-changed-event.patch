From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MinRi2 <2275045670@qq.com>
Date: Fri, 31 Jan 2025 23:13:28 +0800
Subject: [PATCH] API: health changed event

---
 core/src/mindustry/entities/Damage.java        |  5 +++++
 core/src/mindustry/entities/Lightning.java     |  3 ++-
 .../mindustry/entities/bullet/BulletType.java  |  7 +++++++
 .../mindustry/entities/comp/BuildingComp.java  |  8 +++++++-
 .../mindustry/entities/comp/HealthComp.java    | 18 ++++++++++++++++++
 .../mindustry/entities/comp/ShieldComp.java    |  3 +++
 6 files changed, 42 insertions(+), 2 deletions(-)

diff --git a/core/src/mindustry/entities/Damage.java b/core/src/mindustry/entities/Damage.java
index 7f13c16546af4650e8dee67fbb62e39c911d1814..7fdd10a33b668319e9980af6bfddf0f9a3a03fce 100644
--- a/core/src/mindustry/entities/Damage.java
+++ b/core/src/mindustry/entities/Damage.java
@@ -18,6 +18,7 @@ import mindustry.type.*;
 import mindustry.world.*;
 import mindustry.world.blocks.*;
 import mindustry.world.meta.*;
+import mindustryX.events.*;
 
 import static mindustry.Vars.*;
 
@@ -502,6 +503,8 @@ public class Damage{
             boolean dead = unit.dead;
 
             float amount = calculateDamage(scaled ? Math.max(0, unit.dst(x, y) - unit.type.hitSize/2) : unit.dst(x, y), radius, damage);
+
+            HealthChangedEvent.INSTANCE.source = source;
             unit.damage(amount);
 
             if(source != null){
@@ -548,6 +551,8 @@ public class Damage{
             //why? because otherwise the building would absorb everything in one cell, which means much less damage than a nearby explosion.
             //this needs to be compensated
             if(in != null && in.team != team && in.block.size > 1 && in.health > damage){
+                HealthChangedEvent.INSTANCE.source = source;
+
                 //deal the damage of an entire side, to be equivalent with maximum 'standard' damage
                 in.damage(team, damage * Math.min((in.block.size), baseRadius * 0.4f));
                 //no need to continue with the explosion
diff --git a/core/src/mindustry/entities/Lightning.java b/core/src/mindustry/entities/Lightning.java
index 76bbcb82b5895ac1b38a6eb15354e9213388f7da..d7319ea55492280601dd9ef80d0f02bc1c9e889d 100644
--- a/core/src/mindustry/entities/Lightning.java
+++ b/core/src/mindustry/entities/Lightning.java
@@ -43,7 +43,8 @@ public class Lightning{
         bhit = false;
 
         for(int i = 0; i < length / 2; i++){
-            hitCreate.create(null, team, x, y, rotation, damage * (hitter == null ? 1f : hitter.damageMultiplier()), 1f, 1f, hitter);
+            // MDTX: hitBullet set the owner to hitter.
+            hitCreate.create(hitter, team, x, y, rotation, damage * (hitter == null ? 1f : hitter.damageMultiplier()), 1f, 1f, hitter);
             lines.add(new Vec2(x + Mathf.range(3f), y + Mathf.range(3f)));
 
             if(lines.size > 1){
diff --git a/core/src/mindustry/entities/bullet/BulletType.java b/core/src/mindustry/entities/bullet/BulletType.java
index a53fbb9d96e2667ab5f77874c28a0dbdc24b3bcf..2902c3681d533d7af26fda04a8d3f1f4b77209a9 100644
--- a/core/src/mindustry/entities/bullet/BulletType.java
+++ b/core/src/mindustry/entities/bullet/BulletType.java
@@ -22,6 +22,7 @@ import mindustry.graphics.*;
 import mindustry.type.*;
 import mindustry.world.*;
 import mindustry.world.blocks.*;
+import mindustryX.events.*;
 import mindustryX.features.*;
 
 import static mindustry.Vars.*;
@@ -391,6 +392,7 @@ public class BulletType extends Content implements Cloneable{
         }
 
         if(heals() && build.team == b.team && !(build.block instanceof ConstructBlock)){
+            HealthChangedEvent.INSTANCE.source = b;
             healEffect.at(build.x, build.y, 0f, healColor, build.block);
             build.heal(healPercent / 100f * build.maxHealth + healAmount);
         }else if(build.team != b.team && direct){
@@ -404,6 +406,8 @@ public class BulletType extends Content implements Cloneable{
         boolean wasDead = entity instanceof Unit u && u.dead;
 
         if(entity instanceof Healthc h){
+            HealthChangedEvent.INSTANCE.source = entity;
+
             float damage = b.damage;
             float shield = entity instanceof Shieldc s ? Math.max(s.shield(), 0f) : 0f;
             if(maxDamageFraction > 0){
@@ -505,7 +509,9 @@ public class BulletType extends Content implements Cloneable{
 
     public void createSplashDamage(Bullet b, float x, float y){
         if(splashDamageRadius > 0 && !b.absorbed){
+            HealthChangedEvent.INSTANCE.isSplash = true;
             Damage.damage(b.team, x, y, splashDamageRadius, splashDamage * b.damageMultiplier(), splashDamagePierce, collidesAir, collidesGround, scaledSplashDamage, b);
+            HealthChangedEvent.INSTANCE.isSplash = false;
 
             if(status != StatusEffects.none){
                 Damage.status(b.team, x, y, splashDamageRadius, status, statusDuration, collidesAir, collidesGround);
@@ -513,6 +519,7 @@ public class BulletType extends Content implements Cloneable{
 
             if(heals()){
                 indexer.eachBlock(b.team, x, y, splashDamageRadius, Building::damaged, other -> {
+                    HealthChangedEvent.INSTANCE.source = b;
                     healEffect.at(other.x, other.y, 0f, healColor, other.block);
                     other.heal(healPercent / 100f * other.maxHealth() + healAmount);
                 });
diff --git a/core/src/mindustry/entities/comp/BuildingComp.java b/core/src/mindustry/entities/comp/BuildingComp.java
index 0ae44bc028104fc13cef6853bb8f0c4f8113a24e..35c20036d101a46fbc8fd967b7ded1397e251b71 100644
--- a/core/src/mindustry/entities/comp/BuildingComp.java
+++ b/core/src/mindustry/entities/comp/BuildingComp.java
@@ -41,6 +41,7 @@ import mindustry.world.blocks.power.*;
 import mindustry.world.consumers.*;
 import mindustry.world.meta.*;
 import mindustry.world.modules.*;
+import mindustryX.events.*;
 import mindustryX.features.*;
 
 import java.util.*;
@@ -1658,6 +1659,7 @@ abstract class BuildingComp implements Posc, Teamc, Healthc, Buildingc, Timerc,
             damage = Damage.applyArmor(damage, block.armor);
         }
 
+        HealthChangedEvent.INSTANCE.source = other;
         damage(other.team, damage);
         Events.fire(bulletDamageEvent.set(self(), other));
 
@@ -1675,6 +1677,8 @@ abstract class BuildingComp implements Posc, Teamc, Healthc, Buildingc, Timerc,
 
     /** Handles splash damage with a bullet source. */
     public void damage(Bullet bullet, Team source, float damage){
+        HealthChangedEvent.INSTANCE.source = bullet;
+
         damage(source, damage);
         Events.fire(bulletDamageEvent.set(self(), bullet));
     }
@@ -1927,7 +1931,9 @@ abstract class BuildingComp implements Posc, Teamc, Healthc, Buildingc, Timerc,
 
         //TODO handle this better on the client.
         if(!net.client()){
-            health -= handleDamage(damage);
+            float handledDamage = handleDamage(damage);
+
+            health -= handledDamage;
         }
 
         healthChanged();
diff --git a/core/src/mindustry/entities/comp/HealthComp.java b/core/src/mindustry/entities/comp/HealthComp.java
index f315b3fb753d1c2d4a2895fc27e0d06ac141b174..0ccf194df8752be9121d26ce2705f42e3cbb1cbb 100644
--- a/core/src/mindustry/entities/comp/HealthComp.java
+++ b/core/src/mindustry/entities/comp/HealthComp.java
@@ -3,6 +3,8 @@ package mindustry.entities.comp;
 import arc.util.*;
 import mindustry.annotations.Annotations.*;
 import mindustry.gen.*;
+import mindustryX.*;
+import mindustryX.events.*;
 
 @Component
 abstract class HealthComp implements Entityc, Posc{
@@ -12,6 +14,7 @@ abstract class HealthComp implements Entityc, Posc{
     transient float hitTime;
     transient float maxHealth = 1f;
     transient boolean dead;
+    private transient float lastHealthChanged;
 
     boolean isValid(){
         return !dead && isAdded();
@@ -42,6 +45,7 @@ abstract class HealthComp implements Entityc, Posc{
     void heal(){
         dead = false;
         health = maxHealth;
+        healthChanged();
     }
 
     boolean damaged(){
@@ -62,6 +66,8 @@ abstract class HealthComp implements Entityc, Posc{
         if(Float.isNaN(health)) health = 0f;
 
         health -= amount;
+        healthChanged();
+
         hitTime = 1f;
         if(health <= 0 && !dead){
             kill();
@@ -86,9 +92,21 @@ abstract class HealthComp implements Entityc, Posc{
         damagePierce(amount * Time.delta, hitTime <= -20 + hitDuration);
     }
 
+    @MindustryXApi
+    void healthChanged(){
+        if(lastHealthChanged!=0){
+            float delta = lastHealthChanged - health;
+            if(delta != 0){
+                HealthChangedEvent.fire(self(), delta);
+            }
+        }
+        lastHealthChanged = health;
+    }
+
     void clampHealth(){
         health = Math.min(health, maxHealth);
         if(Float.isNaN(health)) health = 0f;
+        healthChanged();
     }
 
     /** Heals by a flat amount. */
diff --git a/core/src/mindustry/entities/comp/ShieldComp.java b/core/src/mindustry/entities/comp/ShieldComp.java
index 1e06d2950428331e65745d4821d3c53f079c75c4..9c75a01679e88b08a348edd755d612450f17e911 100644
--- a/core/src/mindustry/entities/comp/ShieldComp.java
+++ b/core/src/mindustry/entities/comp/ShieldComp.java
@@ -61,6 +61,9 @@ abstract class ShieldComp implements Healthc, Posc{
 
         if(amount > 0 && type.killable){
             health -= amount;
+
+            healthChanged();
+
             if(health <= 0 && !dead){
                 kill();
             }
