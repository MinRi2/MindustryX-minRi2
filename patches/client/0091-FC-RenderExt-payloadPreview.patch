From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Fri, 2 Aug 2024 23:32:56 +0800
Subject: [PATCH] FC(RenderExt) payloadPreview

---
 core/src/mindustryX/features/RenderExt.java   |  7 +-
 .../features/draw/PayloadDropHint.java        | 83 +++++++++++++++++++
 2 files changed, 88 insertions(+), 2 deletions(-)
 create mode 100644 core/src/mindustryX/features/draw/PayloadDropHint.java

diff --git a/core/src/mindustryX/features/RenderExt.java b/core/src/mindustryX/features/RenderExt.java
index 20bf23e68ce8e751b66905b022c54aa2f72d9862..d2d9a53895e5d44302b6532307d12d26ad876970 100644
--- a/core/src/mindustryX/features/RenderExt.java
+++ b/core/src/mindustryX/features/RenderExt.java
@@ -21,8 +21,9 @@ import mindustry.world.blocks.logic.MessageBlock.*;
 import mindustry.world.blocks.production.Drill.*;
 import mindustry.world.blocks.storage.*;
 import mindustry.world.blocks.units.*;
+import mindustryX.features.draw.*;
 
-import static mindustry.Vars.tilesize;
+import static mindustry.Vars.*;
 
 public class RenderExt{
     public static boolean bulletShow, showMineBeam, displayAllMessage;
@@ -39,6 +40,7 @@ public class RenderExt{
     public static int massDriverLineInterval;
     public static boolean drawBars, drawBarsMend;
     public static float healthBarMinHealth;
+    public static boolean payloadPreview;
 
     public static boolean unitHide = false;
     public static Color massDriverLineColor = Color.clear;
@@ -78,13 +80,14 @@ public class RenderExt{
             drawBars = Core.settings.getBool("blockBars");
             drawBarsMend = Core.settings.getBool("blockBars_mend");
             healthBarMinHealth = Core.settings.getInt("blockbarminhealth");
+            payloadPreview = Core.settings.getBool("payloadpreview");
         });
         Events.run(Trigger.draw, RenderExt::draw);
         Events.on(TileChangeEvent.class, RenderExt::onSetBlock);
     }
 
     private static void draw(){
-
+        if(RenderExt.payloadPreview) PayloadDropHint.draw(player);
     }
 
     public static void onGroupDraw(Drawc t){
diff --git a/core/src/mindustryX/features/draw/PayloadDropHint.java b/core/src/mindustryX/features/draw/PayloadDropHint.java
new file mode 100644
index 0000000000000000000000000000000000000000..e48f5dbd754de2dd65d0a1003b248852236a04aa
--- /dev/null
+++ b/core/src/mindustryX/features/draw/PayloadDropHint.java
@@ -0,0 +1,83 @@
+package mindustryX.features.draw;
+
+import arc.graphics.*;
+import arc.graphics.g2d.*;
+import arc.math.geom.*;
+import arc.util.*;
+import mindustry.*;
+import mindustry.core.*;
+import mindustry.ctype.*;
+import mindustry.entities.*;
+import mindustry.gen.*;
+import mindustry.graphics.*;
+import mindustry.type.*;
+import mindustry.world.*;
+import mindustry.world.blocks.payloads.*;
+import mindustry.world.meta.*;
+
+// pick from https://github.com/MinRi2/MinerTools/blob/8ab2fe090cf24f0a5c8eaa0dcbea01f0a5447dd8/src/MinerTools/graphics/draw/player/PayloadDropHint.java
+// 重制修正：WayZer
+public class PayloadDropHint{
+    public static void draw(Player player){
+        var unit = player.unit() instanceof Payloadc ? (Unit & Payloadc)player.unit() : null;
+        if(unit == null) return;
+        Tile on = unit.tileOn();
+        if(on == null) return;
+
+        Draw.z(Layer.flyingUnit + 0.1f);
+        //dropHint
+        if(unit.payloads().any()){
+            Payload payload = unit.payloads().peek();
+            if(on.build != null && on.build.acceptPayload(on.build, payload)){
+                draw(on.build, payload.content(), payload instanceof BuildPayload b ? b.build.rotation * 90 : payload.rotation() - 90);
+            }else if(payload instanceof BuildPayload p){
+                Building build = p.build;
+                Block block = build.block;
+                int tx = World.toTile(build.x - block.offset), ty = World.toTile(build.y - block.offset);
+                boolean valid = Build.validPlace(block, build.team, tx, ty, build.rotation, false);
+
+                Vec2 center = block.bounds(tx, ty, Tmp.r1).getCenter(Tmp.v1);
+                draw(center, block, build.rotation * 90, valid);
+            }else if(payload instanceof UnitPayload p){
+                var u = p.unit;
+                boolean valid = u.canPass(on.x, on.y) && Units.count(u.x, u.y, u.physicSize(), Flyingc::isGrounded) <= 1;
+                draw(payload, payload.content(), u.rotation - 90, valid);
+            }
+        }
+        //pickHint
+        {
+            Unit target = Units.closest(unit.team(), unit.x, unit.y, unit.type.hitSize * 2f, u -> u.isAI() && u.isGrounded() && unit.canPickup(u) && u.within(unit, u.hitSize + unit.hitSize));
+            if(target != null){
+                draw(target, target.type, target.rotation - 90);
+                return;
+            }
+            Building build = on.build;
+            if(build == null) return;
+            Payload payload = build.getPayload();
+            if(payload != null && unit.canPickupPayload(payload)){
+                draw(payload, payload.content(), payload instanceof BuildPayload b ? b.build.rotation * 90 : payload.rotation());
+                return;
+            }
+            if(build.block.buildVisibility != BuildVisibility.hidden && build.canPickup() && unit.canPickup(build)){
+                draw(build, build.block, build.rotation * 90);
+            }
+        }
+    }
+
+    private static void draw(Position pos, UnlockableContent type, float rotation){
+        draw(pos, type, rotation, true);
+    }
+
+    private static void draw(Position pos, UnlockableContent type, float rotation, boolean valid){
+        Draw.color(!valid ? Color.red : Pal.accent, 0.6f);
+        if(type instanceof Block block){
+            float size = block.size * Vars.tilesize;
+            Draw.rect(block.fullIcon, pos.getX(), pos.getY(), size, size, rotation);
+            Lines.square(pos.getX(), pos.getY(), size * 0.9f, 20);
+        }else if(type instanceof UnitType unit){
+            Draw.rect(type.fullIcon, pos.getX(), pos.getY(), rotation);
+            Lines.square(pos.getX(), pos.getY(), unit.hitSize, 20);
+        }
+        Draw.color();
+    }
+}
\ No newline at end of file
