From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Fri, 2 Aug 2024 23:36:02 +0800
Subject: [PATCH] FR(RenderExt) deadOverlay

---
 .../mindustry/graphics/OverlayRenderer.java    |  4 ++--
 core/src/mindustry/input/DesktopInput.java     | 18 +++++++++---------
 core/src/mindustry/input/InputHandler.java     |  1 +
 3 files changed, 12 insertions(+), 11 deletions(-)

diff --git a/core/src/mindustry/graphics/OverlayRenderer.java b/core/src/mindustry/graphics/OverlayRenderer.java
index 29e76dc7ace4edabf9c729dca5e95f894a297b9a..f8d71ae77b72262b6531f7c7d5cbc55aa67aaf3a 100644
--- a/core/src/mindustry/graphics/OverlayRenderer.java
+++ b/core/src/mindustry/graphics/OverlayRenderer.java
@@ -71,7 +71,7 @@ public class OverlayRenderer{
     public void drawBottom(){
         InputHandler input = control.input;
 
-        if(player.dead()) return;
+        if(player.dead() && !RenderExt.deadOverlay.get()) return;
 
         if(player.isBuilder()){
             player.unit().drawBuildPlans();
@@ -113,7 +113,7 @@ public class OverlayRenderer{
             }
         }
 
-        if(player.dead()) return; //dead players don't draw
+        if(player.dead() && !RenderExt.deadOverlay.get()) return; //dead players don't draw
 
         InputHandler input = control.input;
 
diff --git a/core/src/mindustry/input/DesktopInput.java b/core/src/mindustry/input/DesktopInput.java
index b17228e12c55a1ad571fb405144122085ba4934d..1fe7946bffe62bfddc95f92dc56ad4fffab71c90 100644
--- a/core/src/mindustry/input/DesktopInput.java
+++ b/core/src/mindustry/input/DesktopInput.java
@@ -455,7 +455,7 @@ public class DesktopInput extends InputHandler{
             }
         }
 
-        if(player.dead() || locked){
+        if(!RenderExt.deadOverlay.get() && (player.dead() || locked)){
             cursorType = SystemCursor.arrow;
             if(!Core.scene.hasMouse()){
                 Core.graphics.cursor(cursorType);
@@ -470,7 +470,7 @@ public class DesktopInput extends InputHandler{
             mode = none;
         }
 
-        if(player.shooting && !canShoot()){
+        if(!player.dead() && player.shooting && !canShoot()){
             player.shooting = false;
         }
 
@@ -602,7 +602,7 @@ public class DesktopInput extends InputHandler{
         int rawCursorX = World.toTile(Core.input.mouseWorld().x), rawCursorY = World.toTile(Core.input.mouseWorld().y);
 
         //automatically pause building if the current build queue is empty
-        if(Core.settings.getBool("buildautopause") && isBuilding && !player.unit().isBuilding()){
+        if(!player.dead() && Core.settings.getBool("buildautopause") && isBuilding && !player.unit().isBuilding()){
             isBuilding = false;
             buildWasAutoPaused = true;
         }
@@ -619,7 +619,7 @@ public class DesktopInput extends InputHandler{
             schematicY += shiftY;
         }
 
-        if(Core.input.keyTap(Binding.deselect) && !ui.minimapfrag.shown() && !isPlacing() && player.unit().plans.isEmpty() && !commandMode){
+        if(!player.dead() && Core.input.keyTap(Binding.deselect) && !ui.minimapfrag.shown() && !isPlacing() && player.unit().plans.isEmpty() && !commandMode){
             player.unit().mineTile = null;
         }
 
@@ -706,7 +706,7 @@ public class DesktopInput extends InputHandler{
             selectUnitsRect();
         }
 
-        if(Core.input.keyRelease(Binding.select) && !Core.scene.hasMouse()){
+        if(!player.dead() && Core.input.keyRelease(Binding.select) && !Core.scene.hasMouse()){
             BuildPlan plan = getPlan(cursorX, cursorY);
 
             if(plan != null && !movedPlan){
@@ -726,7 +726,7 @@ public class DesktopInput extends InputHandler{
             if(Core.input.keyDown(Binding.breakBlock)){
                 mode = none;
             }else if(!selectPlans.isEmpty()){
-                flushPlans(selectPlans);
+                if(player.isBuilder()) flushPlans(selectPlans);
             }else if(isPlacing()){
                 selectX = cursorX;
                 selectY = cursorY;
@@ -747,7 +747,7 @@ public class DesktopInput extends InputHandler{
                 commandRectY = input.mouseWorldY();
             }else if(!checkConfigTap() && selected != null && !tryRepairDerelict(selected)){
                 //only begin shooting if there's no cursor event
-                if(!tryTapPlayer(Core.input.mouseWorld().x, Core.input.mouseWorld().y) && !tileTapped(selected.build) && !player.unit().activelyBuilding() && !droppingItem
+                if(!player.dead() && !tryTapPlayer(Core.input.mouseWorld().x, Core.input.mouseWorld().y) && !tileTapped(selected.build) && !player.unit().activelyBuilding() && !droppingItem
                     && !(tryStopMine(selected) || (!settings.getBool("doubletapmine") || selected == prevSelected && Time.timeSinceMillis(selectMillis) < 500) && tryBeginMine(selected)) && !Core.scene.hasKeyboard()){
                     player.shooting = shouldShoot;
                 }
@@ -772,7 +772,7 @@ public class DesktopInput extends InputHandler{
             schemY = rawCursorY;
         }
 
-        if(Core.input.keyDown(Binding.select) && mode == none && !isPlacing() && deleting){
+        if(!player.dead() && Core.input.keyDown(Binding.select) && mode == none && !isPlacing() && deleting){
             var plan = getPlan(cursorX, cursorY);
             if(plan != null && plan.breaking){
                 player.unit().plans().remove(plan);
@@ -796,7 +796,7 @@ public class DesktopInput extends InputHandler{
             schemY = -1;
         }
 
-        if(Core.input.keyRelease(Binding.breakBlock) || Core.input.keyRelease(Binding.select)){
+        if(!player.dead() && (Core.input.keyRelease(Binding.breakBlock) || Core.input.keyRelease(Binding.select))){
 
             if(mode == placing && block != null){ //touch up while placing, place everything in selection
                 if(input.keyDown(Binding.boost)){
diff --git a/core/src/mindustry/input/InputHandler.java b/core/src/mindustry/input/InputHandler.java
index a73ff8d7e02f42a497fb8ab9dc737314718fc35d..73d09ae967a5266c7ea5eb474fd8ad0793f6bf6b 100644
--- a/core/src/mindustry/input/InputHandler.java
+++ b/core/src/mindustry/input/InputHandler.java
@@ -2062,6 +2062,7 @@ public abstract class InputHandler implements InputProcessor, GestureListener{
     }
 
     public void rebuildArea(int x1, int y1, int x2, int y2){
+        if(!player.isBuilder()) return;
         NormalizeResult result = Placement.normalizeArea(x1, y1, x2, y2, rotation, false, 999999999);
         Tmp.r1.set(result.x * tilesize, result.y * tilesize, (result.x2 - result.x) * tilesize, (result.y2 - result.y) * tilesize);
 
