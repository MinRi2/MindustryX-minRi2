From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: way-zer <himc.wicp@gmail.com>
Date: Fri, 23 Jun 2023 16:21:59 +0800
Subject: [PATCH] SO: improve ControlPathfinder.java (limit memory use)

---
 core/src/mindustry/ai/ControlPathfinder.java | 20 ++++++++++++++++++--
 1 file changed, 18 insertions(+), 2 deletions(-)

diff --git a/core/src/mindustry/ai/ControlPathfinder.java b/core/src/mindustry/ai/ControlPathfinder.java
index 4ff9f7e384f50411470de468170f8b02db2af824..86ad9c250ab58343af0b0e4947a973e773409858 100644
--- a/core/src/mindustry/ai/ControlPathfinder.java
+++ b/core/src/mindustry/ai/ControlPathfinder.java
@@ -13,6 +13,10 @@ import mindustry.game.*;
 import mindustry.gen.*;
 import mindustry.graphics.*;
 import mindustry.world.*;
+import mindustryX.*;
+
+import java.util.*;
+import java.util.concurrent.*;
 
 import static mindustry.Vars.*;
 import static mindustry.ai.Pathfinder.*;
@@ -20,6 +24,8 @@ import static mindustry.ai.Pathfinder.*;
 public class ControlPathfinder{
     //TODO this FPS-based update system could be flawed.
     private static final long maxUpdate = Time.millisToNanos(30);
+    @MindustryXApi
+    public static int maxWorking = 24;
     private static final int updateFPS = 60;
     private static final int updateInterval = 1000 / updateFPS;
     private static final int wallImpassableCap = 1_000_000;
@@ -74,6 +80,7 @@ public class ControlPathfinder{
     int lastTargetId = 1;
     /** requests per-unit */
     ObjectMap<Unit, PathRequest> requests = new ObjectMap<>();
+    static Map<PathRequest, Object> workingRequests = new ConcurrentHashMap<>();
 
     public ControlPathfinder(){
 
@@ -110,6 +117,8 @@ public class ControlPathfinder{
                     req.thread.queue.post(() -> req.thread.requests.remove(req));
                 }
             }
+            //skipped N update -> drop it
+            workingRequests.keySet().removeIf(req -> req.lastUpdateId <= state.updateId - 10);
         });
 
         Events.run(Trigger.draw, () -> {
@@ -334,6 +343,7 @@ public class ControlPathfinder{
         }
         threads = null;
         requests.clear();
+        workingRequests.clear();
     }
 
     private static boolean raycast(int team, PathCost type, int x1, int y1, int x2, int y2){
@@ -463,9 +473,15 @@ public class ControlPathfinder{
                         requestSize = requests.size;
 
                         //total update time no longer than maxUpdate
+                        //MDTX: changed
+                        var count = Math.min(requestSize, maxWorking / controlPath.threads.length);
+                        long ns = Time.nanos();
                         for(var req : requests){
-                            //TODO this is flawed with many paths
-                            req.update(maxUpdate / requests.size);
+                            if(!req.done && !workingRequests.containsKey(req) && workingRequests.size() > maxWorking) continue;
+                            req.update(maxUpdate / count);
+                            if(req.done) workingRequests.remove(req);
+                            else workingRequests.put(req, this);
+                            if(Time.nanos() - ns > maxUpdate) break;
                         }
                     }
 
