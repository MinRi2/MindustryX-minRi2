From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Anuken <arnukren@gmail.com>
Date: Wed, 6 Aug 2025 21:54:38 +0200
Subject: [PATCH] Alternate sync implementation for non-update blocks - Closes
 #11099

---
 core/src/mindustry/core/NetServer.java        | 28 ++++++++++---------
 core/src/mindustry/world/Block.java           |  4 +++
 .../world/blocks/storage/CoreBlock.java       |  1 +
 .../world/blocks/storage/StorageBlock.java    |  1 +
 core/src/mindustry/world/meta/BlockFlag.java  |  3 +-
 5 files changed, 23 insertions(+), 14 deletions(-)

diff --git a/core/src/mindustry/core/NetServer.java b/core/src/mindustry/core/NetServer.java
index 1942e51166409185b1f6b5d583c9285441046bfe..ebd51361399fcf1bb4340fe02a8457816009c361 100644
--- a/core/src/mindustry/core/NetServer.java
+++ b/core/src/mindustry/core/NetServer.java
@@ -23,6 +23,7 @@ import mindustry.net.*;
 import mindustry.net.Administration.*;
 import mindustry.net.Packets.*;
 import mindustry.world.*;
+import mindustry.world.meta.*;
 
 import java.io.*;
 import java.net.*;
@@ -931,19 +932,20 @@ public class NetServer implements ApplicationListener{
         syncStream.reset();
 
         short sent = 0;
-        for(Building entity : Groups.build){
-            if(!entity.block.sync) continue;
-            sent++;
-
-            dataStream.writeInt(entity.pos());
-            dataStream.writeShort(entity.block.id);
-            entity.writeSync(Writes.get(dataStream));
-
-            if(syncStream.size() > maxSnapshotSize){
-                dataStream.close();
-                Call.blockSnapshot(sent, syncStream.toByteArray());
-                sent = 0;
-                syncStream.reset();
+        for(var team : state.teams.present){
+            for(var build : indexer.getFlagged(team.team, BlockFlag.synced)){
+                sent++;
+
+                dataStream.writeInt(build.pos());
+                dataStream.writeShort(build.block.id);
+                build.writeSync(Writes.get(dataStream));
+
+                if(syncStream.size() > maxSnapshotSize){
+                    dataStream.close();
+                    Call.blockSnapshot(sent, syncStream.toByteArray());
+                    sent = 0;
+                    syncStream.reset();
+                }
             }
         }
 
diff --git a/core/src/mindustry/world/Block.java b/core/src/mindustry/world/Block.java
index a1a07a673666b7db6a613523abf24c76e144d244..4ea1a5197cc8f1aedf5d88597d4b2a8179f5e38d 100644
--- a/core/src/mindustry/world/Block.java
+++ b/core/src/mindustry/world/Block.java
@@ -1235,6 +1235,10 @@ public class Block extends UnlockableContent implements Senseable{
             flags = flags.with(BlockFlag.hasFogRadius);
         }
 
+        if(sync){
+            flags = flags.with(BlockFlag.synced);
+        }
+
         //initialize default health based on size
         if(health == -1){
             boolean round = false;
diff --git a/core/src/mindustry/world/blocks/storage/CoreBlock.java b/core/src/mindustry/world/blocks/storage/CoreBlock.java
index 0583fe6b52eb526f3fb3697eb19104653765a11f..65d723da57920144c6ced3a35498ef5c253132b0 100644
--- a/core/src/mindustry/world/blocks/storage/CoreBlock.java
+++ b/core/src/mindustry/world/blocks/storage/CoreBlock.java
@@ -71,6 +71,7 @@ public class CoreBlock extends StorageBlock{
         priority = TargetPriority.core;
         flags = EnumSet.of(BlockFlag.core);
         unitCapModifier = 10;
+        sync = false; //core items are synced elsewhere
         drawDisabled = false;
         canOverdrive = false;
         commandable = true;
diff --git a/core/src/mindustry/world/blocks/storage/StorageBlock.java b/core/src/mindustry/world/blocks/storage/StorageBlock.java
index cb0fc541f14d45bec82605101aadc8c09097c34b..31dd510f8923edf94678498c6237b8fdfc2f72f5 100644
--- a/core/src/mindustry/world/blocks/storage/StorageBlock.java
+++ b/core/src/mindustry/world/blocks/storage/StorageBlock.java
@@ -21,6 +21,7 @@ public class StorageBlock extends Block{
         hasItems = true;
         solid = true;
         update = false;
+        sync = true;
         destructible = true;
         separateItemCapacity = true;
         group = BlockGroup.transportation;
diff --git a/core/src/mindustry/world/meta/BlockFlag.java b/core/src/mindustry/world/meta/BlockFlag.java
index 9f6cd57a339c3a81ffb8655cbec4c3b0eec58916..0e36efd5e790334c6866440948d4723818909818 100644
--- a/core/src/mindustry/world/meta/BlockFlag.java
+++ b/core/src/mindustry/world/meta/BlockFlag.java
@@ -31,7 +31,8 @@ public enum BlockFlag{
     unitAssembler,
     hasFogRadius,
     steamVent,
-    blockRepair;
+    blockRepair,
+    synced;
 
     public final static BlockFlag[] all = values();
 
