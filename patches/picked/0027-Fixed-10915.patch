From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Anuken <arnukren@gmail.com>
Date: Fri, 13 Jun 2025 12:03:31 +0800
Subject: [PATCH] Fixed #10915

(cherry picked from commit 7da5f0a6d93f6e0a36e8ecbbc2ccb899aefde5cb)
---
 .../mindustry/entities/units/BuildPlan.java    | 12 ------------
 core/src/mindustry/game/Schematics.java        |  2 +-
 core/src/mindustry/input/InputHandler.java     | 18 +++++++++---------
 .../world/blocks/power/PowerNode.java          |  5 +++++
 4 files changed, 15 insertions(+), 22 deletions(-)

diff --git a/core/src/mindustry/entities/units/BuildPlan.java b/core/src/mindustry/entities/units/BuildPlan.java
index f9930f707f74bb2bc6f5d6114acf80c54fbf6cf7..e8f76158535bdb848db962682ea1eeb75af336f8 100644
--- a/core/src/mindustry/entities/units/BuildPlan.java
+++ b/core/src/mindustry/entities/units/BuildPlan.java
@@ -21,8 +21,6 @@ public class BuildPlan implements Position, QuadTreeObject{
     public boolean breaking;
     /** Config int. Not used unless hasConfig is true.*/
     public Object config;
-    /** Original position, only used in schematics.*/
-    public int originalX, originalY, originalWidth, originalHeight;
 
     /** Last progress.*/
     public float progress;
@@ -111,22 +109,12 @@ public class BuildPlan implements Position, QuadTreeObject{
         copy.block = block;
         copy.breaking = breaking;
         copy.config = config;
-        copy.originalX = originalX;
-        copy.originalY = originalY;
         copy.progress = progress;
         copy.initialized = initialized;
         copy.animScale = animScale;
         return copy;
     }
 
-    public BuildPlan original(int x, int y, int originalWidth, int originalHeight){
-        originalX = x;
-        originalY = y;
-        this.originalWidth = originalWidth;
-        this.originalHeight = originalHeight;
-        return this;
-    }
-
     public Rect bounds(Rect rect){
         if(breaking){
             return rect.set(-100f, -100f, 0f, 0f);
diff --git a/core/src/mindustry/game/Schematics.java b/core/src/mindustry/game/Schematics.java
index d43599fef130da4ed935b7fc819acd73517477df..62ddc27653c07346ee62c8e50d30ae5148efc37f 100644
--- a/core/src/mindustry/game/Schematics.java
+++ b/core/src/mindustry/game/Schematics.java
@@ -276,7 +276,7 @@ public class Schematics implements Loadable{
 
     /** Creates an array of build plans from a schematic's data, centered on the provided x+y coordinates. */
     public Seq<BuildPlan> toPlans(Schematic schem, int x, int y){
-        return schem.tiles.map(t -> new BuildPlan(t.x + x - schem.width/2, t.y + y - schem.height/2, t.rotation, t.block, t.config).original(t.x, t.y, schem.width, schem.height))
+        return schem.tiles.map(t -> new BuildPlan(t.x + x - schem.width/2, t.y + y - schem.height/2, t.rotation, t.block, t.config))
             .removeAll(s -> (!s.block.isVisible() && !(s.block instanceof CoreBlock)) || !s.block.unlockedNow()).sort(Structs.comparingInt(s -> -s.block.schematicPriority));
     }
 
diff --git a/core/src/mindustry/input/InputHandler.java b/core/src/mindustry/input/InputHandler.java
index 2a56d250efd3027071c227583dc9a1a5592333df..4ba1fe62a540c551d4e0d10177422a4c054a5f5f 100644
--- a/core/src/mindustry/input/InputHandler.java
+++ b/core/src/mindustry/input/InputHandler.java
@@ -1335,9 +1335,11 @@ public abstract class InputHandler implements InputProcessor, GestureListener{
         plans.each(plan -> {
             if(plan.breaking) return;
 
+            float off = plan.block.size % 2 == 0 ? -0.5f : 0f;
+
             plan.pointConfig(p -> {
-                int cx = p.x, cy = p.y;
-                int lx = cx;
+                float cx = p.x + off, cy = p.y + off;
+                float lx = cx;
 
                 if(direction >= 0){
                     cx = -cy;
@@ -1346,7 +1348,7 @@ public abstract class InputHandler implements InputProcessor, GestureListener{
                     cx = cy;
                     cy = -lx;
                 }
-                p.set(cx, cy);
+                p.set(Mathf.floor(cx - off), Mathf.floor(cy - off));
             });
 
             //rotate actual plan, centered on its multiblock position
@@ -1380,14 +1382,12 @@ public abstract class InputHandler implements InputProcessor, GestureListener{
             }
 
             plan.pointConfig(p -> {
-                int corigin = x ? plan.originalWidth/2 : plan.originalHeight/2;
-                int nvalue = -(x ? p.x : p.y);
                 if(x){
-                    plan.originalX = -(plan.originalX - corigin) + corigin;
-                    p.x = nvalue;
+                    if(plan.block.size % 2 == 0) p.x --;
+                    p.x = -p.x;
                 }else{
-                    plan.originalY = -(plan.originalY - corigin) + corigin;
-                    p.y = nvalue;
+                    if(plan.block.size % 2 == 0) p.y --;
+                    p.y = -p.y;
                 }
             });
 
diff --git a/core/src/mindustry/world/blocks/power/PowerNode.java b/core/src/mindustry/world/blocks/power/PowerNode.java
index a3eae8fb0805891a267b03c481c89c36729a9008..f01d93ef9ab12d7cc181fbc283743b4e7c1c429e 100644
--- a/core/src/mindustry/world/blocks/power/PowerNode.java
+++ b/core/src/mindustry/world/blocks/power/PowerNode.java
@@ -328,6 +328,11 @@ public class PowerNode extends PowerBlock{
                     }
                 });
 
+                //uncomment for debugging connection translation issues in schematics
+                //Draw.color(Color.red);
+                //Lines.line(plan.drawx(), plan.drawy(), px * tilesize, py * tilesize);
+                //Draw.color();
+
                 if(otherReq == null || otherReq.block == null) continue;
 
                 drawLaser(plan.drawx(), plan.drawy(), otherReq.drawx(), otherReq.drawy(), size, otherReq.block.size);
